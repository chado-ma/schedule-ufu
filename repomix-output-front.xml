This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.editorconfig
.gitignore
.postcssrc.json
angular.json
documentacao/component.uml
documentacao/infraestrutra.plantuml
documentacao/uml.plantuml
MODAL_SYSTEM_README.md
package.json
proxy.conf.json
README.md
repomix-output-front.xml
src/app/app.component.css
src/app/app.component.html
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.config.ts
src/app/app.module.ts
src/app/core/components/adm-form/adm-form.component.html
src/app/core/components/adm-form/adm-form.component.spec.ts
src/app/core/components/adm-form/adm-form.component.ts
src/app/core/components/datapicker/datapicker.component.html
src/app/core/components/datapicker/datapicker.component.spec.ts
src/app/core/components/datapicker/datapicker.component.ts
src/app/core/components/delete-schedule-form/delete-schedule-form.component.css
src/app/core/components/delete-schedule-form/delete-schedule-form.component.html
src/app/core/components/delete-schedule-form/delete-schedule-form.component.spec.ts
src/app/core/components/delete-schedule-form/delete-schedule-form.component.ts
src/app/core/components/dropdownn/dropdownn.component.html
src/app/core/components/dropdownn/dropdownn.component.spec.ts
src/app/core/components/dropdownn/dropdownn.component.ts
src/app/core/components/generic-modal/generic-modal.component.css
src/app/core/components/generic-modal/generic-modal.component.html
src/app/core/components/generic-modal/generic-modal.component.spec.ts
src/app/core/components/generic-modal/generic-modal.component.ts
src/app/core/components/ginasio-form-delete/ginasio-form-delete.component.html
src/app/core/components/ginasio-form-delete/ginasio-form-delete.component.spec.ts
src/app/core/components/ginasio-form-delete/ginasio-form-delete.component.ts
src/app/core/components/ginasio-form/ginasio-form.component.html
src/app/core/components/ginasio-form/ginasio-form.component.spec.ts
src/app/core/components/ginasio-form/ginasio-form.component.ts
src/app/core/components/restricao-form-delete/restricao-form-delete.component.html
src/app/core/components/restricao-form-delete/restricao-form-delete.component.spec.ts
src/app/core/components/restricao-form-delete/restricao-form-delete.component.ts
src/app/core/components/restricao-form/restricao-form.component.html
src/app/core/components/restricao-form/restricao-form.component.spec.ts
src/app/core/components/restricao-form/restricao-form.component.ts
src/app/core/components/schedule-form/schedule-form.component.css
src/app/core/components/schedule-form/schedule-form.component.html
src/app/core/components/schedule-form/schedule-form.component.ts
src/app/core/components/select-filter/select-filter.component.html
src/app/core/components/select-filter/select-filter.component.spec.ts
src/app/core/components/select-filter/select-filter.component.ts
src/app/core/components/slider/slider.component.css
src/app/core/components/slider/slider.component.html
src/app/core/components/slider/slider.component.spec.ts
src/app/core/components/slider/slider.component.ts
src/app/core/components/table-espacos/table-espacos.component.html
src/app/core/components/table-espacos/table-espacos.component.spec.ts
src/app/core/components/table-espacos/table-espacos.component.ts
src/app/core/components/table-restricao/table-restricao.component.html
src/app/core/components/table-restricao/table-restricao.component.spec.ts
src/app/core/components/table-restricao/table-restricao.component.ts
src/app/core/components/table-users/table-users.component.html
src/app/core/components/table-users/table-users.component.spec.ts
src/app/core/components/table-users/table-users.component.ts
src/app/core/components/table/table.component.css
src/app/core/components/table/table.component.html
src/app/core/components/table/table.component.spec.ts
src/app/core/components/table/table.component.ts
src/app/core/components/user-schedule-delete/user-schedule-delete.component.css
src/app/core/components/user-schedule-delete/user-schedule-delete.component.html
src/app/core/components/user-schedule-delete/user-schedule-delete.component.spec.ts
src/app/core/components/user-schedule-delete/user-schedule-delete.component.ts
src/app/core/components/user-schedule-form/user-schedule-form.component.css
src/app/core/components/user-schedule-form/user-schedule-form.component.html
src/app/core/components/user-schedule-form/user-schedule-form.component.spec.ts
src/app/core/components/user-schedule-form/user-schedule-form.component.ts
src/app/core/guards/auth.guard.spec.ts
src/app/core/guards/auth.guard.ts
src/app/core/layouts/auth-layout/auth-layout.component.html
src/app/core/layouts/auth-layout/auth-layout.component.spec.ts
src/app/core/layouts/auth-layout/auth-layout.component.ts
src/app/core/layouts/schedule-layout/schedule-layout.component.css
src/app/core/layouts/schedule-layout/schedule-layout.component.html
src/app/core/layouts/schedule-layout/schedule-layout.component.spec.ts
src/app/core/layouts/schedule-layout/schedule-layout.component.ts
src/app/core/models/CreateGinasioRequest.ts
src/app/core/models/DeleteSchedule.ts
src/app/core/models/FormType.ts
src/app/core/models/Ginasio.ts
src/app/core/models/NewSchedule.ts
src/app/core/models/Option.ts
src/app/core/models/Restricao.ts
src/app/core/models/RestricaoRequest.ts
src/app/core/models/ScheduleModel.ts
src/app/core/models/User.ts
src/app/core/models/UserData.ts
src/app/core/pages/configuration/configuration.component.html
src/app/core/pages/configuration/configuration.component.spec.ts
src/app/core/pages/configuration/configuration.component.ts
src/app/core/pages/email-code-send/email-code-send.component.html
src/app/core/pages/email-code-send/email-code-send.component.spec.ts
src/app/core/pages/email-code-send/email-code-send.component.ts
src/app/core/pages/email-validator/email-validator.component.html
src/app/core/pages/email-validator/email-validator.component.spec.ts
src/app/core/pages/email-validator/email-validator.component.ts
src/app/core/pages/schedule/schedule.component.css
src/app/core/pages/schedule/schedule.component.html
src/app/core/pages/schedule/schedule.component.spec.ts
src/app/core/pages/schedule/schedule.component.ts
src/app/core/pages/userschdeules/userschdeules.component.html
src/app/core/pages/userschdeules/userschdeules.component.spec.ts
src/app/core/pages/userschdeules/userschdeules.component.ts
src/app/core/routes/app.routes.ts
src/app/core/services/adm/adm.service.spec.ts
src/app/core/services/adm/adm.service.ts
src/app/core/services/auth/auth.service.spec.ts
src/app/core/services/auth/auth.service.ts
src/app/core/services/layout/layout-schedules.service.spec.ts
src/app/core/services/layout/layout-schedules.service.ts
src/app/core/services/schedule/schedule-time.service.ts
src/app/core/services/schedule/schedules.service.spec.ts
src/app/core/services/schedule/schedules.service.ts
src/app/core/shared/footer/footer.component.html
src/app/core/shared/footer/footer.component.spec.ts
src/app/core/shared/footer/footer.component.ts
src/app/core/shared/header/header.component.css
src/app/core/shared/header/header.component.html
src/app/core/shared/header/header.component.spec.ts
src/app/core/shared/header/header.component.ts
src/app/core/shared/menu/menu.component.css
src/app/core/shared/menu/menu.component.html
src/app/core/shared/menu/menu.component.spec.ts
src/app/core/shared/menu/menu.component.ts
src/index.html
src/main.ts
src/styles.css
tsconfig.app.json
tsconfig.json
tsconfig.spec.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false
</file>

<file path=".gitignore">
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db
</file>

<file path=".postcssrc.json">
{
    "plugins": {
      "@tailwindcss/postcss": {}
    }
  }
</file>

<file path="documentacao/component.uml">
@startuml

package "Frontend (Cliente)" {
  [Interface de Agendamento] 
  [Interface de Consulta de Espaços]
  [Interface de Autenticação]
}

package "Servidor (Backend)" {
  [API REST]
  [Controle de Agendamento]
  [Validação de Disponibilidade]
  [Controle de Feriados e Horários]
  [Autenticação e Autorização]
  [Integração SSO UFU]
}

package "Banco de Dados" {
  [Tabela de Usuários]
  [Tabela de Agendamentos]
  [Tabela de Espaços]
  [Tabela de Horários]
  [Tabela de Feriados]
}

[Frontend (Cliente)] --> [API REST] : Consome API
[API REST] --> [Controle de Agendamento] : Comunicação
[Controle de Agendamento] --> [Banco de Dados] : Acessa Dados
[Autenticação e Autorização] --> [Integração SSO UFU] : Redireciona Usuário
[Integração SSO UFU] --> [API REST] : Retorno de JWT
[API REST] --> [Banco de Dados] : Acesso aos Dados do Usuário

@enduml
</file>

<file path="documentacao/infraestrutra.plantuml">
@startuml

actor "Usuário" as usuario
node "Cliente (Web)" {
  [Browser]
}

node "Servidor Web (Backend)" {
  [Servidor de API (Spring Boot)]
}

node "Servidor de Banco de Dados" {
  [Banco de Dados (PostgreSQL)]
}

node "SSO (UFU)" {
  [Serviço de Autenticação SSO UFU]
}

usuario --> [Cliente (Web)] : Acesso
[Cliente (Web)] --> [SSO (UFU)] : Redireciona para Autenticação
[SSO (UFU)] --> [Cliente (Web)] : Retorna JWT
[Cliente (Web)] --> [Servidor Web (Backend)] : Envia JWT para API
[Servidor Web (Backend)] --> [Banco de Dados] : Consulta/Manipula Dados

@enduml
</file>

<file path="documentacao/uml.plantuml">
@startuml
!theme cerulean

entity "Campus" as Campus {
  * id (PK)
  --
  nome
  localização
}

entity "EspaçoEsportivo" as EspacoEsportivo {
  * id (PK) [Nome do Espaço]
  --
  id_campus (FK)
  disponibilidade (bool)
  funcao
  modalidades
}

entity "HorarioFuncionamento" as HorarioFuncionamento {
  * id (PK)
  --
  id_espaco (FK)
  dia_semana
  horario_abertura
  horario_fechamento
}

entity "Feriados" as Feriados {
  * id (PK)
  --
  id_campus (FK)
  data
  descricao
  horario_abertura
  horario_fechamento
}

entity "Usuario" as Usuario {
  * matricula (PK)
  --
  nome
  email
  curso
  telefone
  tipo_usuario
}

entity "Agendamento" as Agendamento {
  * id (PK)
  --
  matricula_usuario (FK)
  id_espaco (FK)
  data_agendamento
  horario_inicio
  horario_fim
  num_pessoas
  telefone_contato
  prioridade
}

entity "ConfiguracoesAgendamento" as ConfiguracoesAgendamento {
  * id (PK)
  --
  tempo_maximo_agendamento
  tempo_antecedencia_cancelamento
  tempo_antecedencia_agendamento
}

Campus ||--o{ EspacoEsportivo : "1:N"
EspacoEsportivo ||--o{ HorarioFuncionamento : "1:N"
Campus ||--o{ Feriados : "1:N"
EspacoEsportivo ||--o{ Agendamento : "1:N"
Usuario ||--o{ Agendamento : "1:N"
@enduml
</file>

<file path="MODAL_SYSTEM_README.md">
# Sistema de Modal Genérico para Formulários

## Visão Geral

Este sistema fornece uma solução elegante e reutilizável para gerenciar diferentes tipos de formulários em modais. Usando um componente `GenericModalComponent` e um enum `FormType`, você pode facilmente adicionar novos formulários sem duplicar código.

## Estrutura

### 1. FormType Enum (`src/app/core/models/FormType.ts`)
```typescript
export enum FormType {
  CREATE_SCHEDULE = 'CREATE_SCHEDULE',
  DELETE_SCHEDULE = 'DELETE_SCHEDULE',
  CREATE_GINASIO = 'CREATE_GINASIO',
  DELETE_GINASIO = 'DELETE_GINASIO',
  CREATE_RESTRICAO = 'CREATE_RESTRICAO',
  DELETE_RESTRICAO = 'DELETE_RESTRICAO'
}
```

### 2. GenericModalComponent (`src/app/core/components/generic-modal/`)
Componente reutilizável que renderiza diferentes formulários baseado no `FormType`.

### 3. Como Usar no ConfigurationComponent

```typescript
// No componente
modalConfig: ModalConfig = {
  type: FormType.CREATE_SCHEDULE,
  title: '',
  isOpen: false
};

// Métodos para abrir modais
onCriarReservaClick(): void {
  this.openModal(FormType.CREATE_SCHEDULE, 'Criar Reserva');
}

onCancelarAgendamentoClick(): void {
  this.openModal(FormType.DELETE_SCHEDULE, 'Cancelar Agendamento');
}
```

```html
<!-- No template -->
<button class="br-button primary" (click)="onCriarReservaClick()">
  Criar Reserva
</button>

<app-generic-modal 
  [isOpen]="modalConfig.isOpen"
  [formType]="modalConfig.type"
  [title]="modalConfig.title"
  (close)="closeModal()"
  (formSubmitted)="onFormSubmit($event)">
</app-generic-modal>
```

## Como Adicionar um Novo Formulário

### Passo 1: Adicionar novo tipo no enum
```typescript
// Em FormType.ts
export enum FormType {
  // ... tipos existentes
  CREATE_USER = 'CREATE_USER'
}
```

### Passo 2: Criar o componente do formulário
```typescript
// user-form.component.ts
@Component({
  selector: 'app-user-form',
  // ... configurações
})
export class UserFormComponent {
  @Output() send = new EventEmitter<boolean>();
  
  onSubmit(): void {
    // Lógica do formulário
    this.send.emit(true); // true para sucesso, false para erro
  }
}
```

### Passo 3: Adicionar ao GenericModalComponent
```typescript
// Importar o novo componente
import { UserFormComponent } from '../user-form/user-form.component';

// Adicionar aos imports
@Component({
  imports: [CommonModule, /* outros imports */, UserFormComponent]
})
```

```html
<!-- Adicionar no template do GenericModalComponent -->
<app-user-form 
  *ngSwitchCase="FormType.CREATE_USER"
  (send)="onFormSubmit($event)">
</app-user-form>
```

### Passo 4: Adicionar botão e método no ConfigurationComponent
```typescript
onCriarUsuarioClick(): void {
  this.openModal(FormType.CREATE_USER, 'Criar Usuário');
}
```

```html
<button class="br-button primary" (click)="onCriarUsuarioClick()">
  Criar Usuário
</button>
```

## Vantagens desta Abordagem

1. **Reutilização**: Um único modal para todos os formulários
2. **Manutenibilidade**: Fácil adicionar/remover formulários
3. **Consistência**: UI consistente para todos os modals
4. **Type Safety**: Enum fornece segurança de tipos
5. **Responsividade**: Suporte completo a dispositivos móveis
6. **Acessibilidade**: Inclui recursos de acessibilidade

## Exemplo de Formulário Padrão

```typescript
@Component({
  selector: 'app-example-form',
  template: `
    <form [formGroup]="exampleForm" (ngSubmit)="onSubmit()">
      <div class="mb-4">
        <label for="field" class="block text-sm font-medium text-gray-700">
          Campo
        </label>
        <input 
          type="text" 
          id="field" 
          formControlName="field" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
      </div>

      <div class="flex justify-end gap-4">
        <button type="button" class="br-button secondary" (click)="onCancel()">
          Cancelar
        </button>
        <button type="submit" class="br-button primary" [disabled]="exampleForm.invalid">
          Salvar
        </button>
      </div>
    </form>
  `
})
export class ExampleFormComponent {
  @Output() send = new EventEmitter<boolean>();
  exampleForm: FormGroup;

  constructor(private fb: FormBuilder) {
    this.exampleForm = this.fb.group({
      field: ['', Validators.required]
    });
  }

  onSubmit(): void {
    if (this.exampleForm.valid) {
      // Chamada para API
      this.send.emit(true);
    }
  }

  onCancel(): void {
    this.send.emit(false);
  }
}
```

## Convenções

1. Todos os formulários devem emitir um evento `send` com boolean
2. `true` indica sucesso, `false` indica cancelamento/erro
3. Usar classes CSS do design system (br-button, etc.)
4. Seguir padrão de validação e mensagens de erro
5. Incluir botões "Cancelar" e "Salvar/Criar/etc."
</file>

<file path="proxy.conf.json">
{
  "/api/*": {
    "target": "http://localhost:3000",
    "secure": false,
    "changeOrigin": true,
    "logLevel": "debug",
    "pathRewrite": {
      "^/api": ""
    }
  }
}
</file>

<file path="repomix-output-front.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.editorconfig
.gitignore
.postcssrc.json
angular.json
documentacao/component.uml
documentacao/infraestrutra.plantuml
documentacao/uml.plantuml
package.json
proxy.conf.json
README.md
src/app/app.component.css
src/app/app.component.html
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.config.ts
src/app/app.module.ts
src/app/core/components/datapicker/datapicker.component.html
src/app/core/components/datapicker/datapicker.component.spec.ts
src/app/core/components/datapicker/datapicker.component.ts
src/app/core/components/dropdownn/dropdownn.component.html
src/app/core/components/dropdownn/dropdownn.component.spec.ts
src/app/core/components/dropdownn/dropdownn.component.ts
src/app/core/components/schedule-form/schedule-form.component.css
src/app/core/components/schedule-form/schedule-form.component.html
src/app/core/components/schedule-form/schedule-form.component.ts
src/app/core/components/select-filter/select-filter.component.html
src/app/core/components/select-filter/select-filter.component.spec.ts
src/app/core/components/select-filter/select-filter.component.ts
src/app/core/components/slider/slider.component.css
src/app/core/components/slider/slider.component.html
src/app/core/components/slider/slider.component.spec.ts
src/app/core/components/slider/slider.component.ts
src/app/core/components/table-espacos/table-espacos.component.html
src/app/core/components/table-espacos/table-espacos.component.spec.ts
src/app/core/components/table-espacos/table-espacos.component.ts
src/app/core/components/table-users/table-users.component.html
src/app/core/components/table-users/table-users.component.spec.ts
src/app/core/components/table-users/table-users.component.ts
src/app/core/components/table/table.component.css
src/app/core/components/table/table.component.html
src/app/core/components/table/table.component.spec.ts
src/app/core/components/table/table.component.ts
src/app/core/guards/auth.guard.spec.ts
src/app/core/guards/auth.guard.ts
src/app/core/layouts/auth-layout/auth-layout.component.html
src/app/core/layouts/auth-layout/auth-layout.component.spec.ts
src/app/core/layouts/auth-layout/auth-layout.component.ts
src/app/core/layouts/schedule-layout/schedule-layout.component.css
src/app/core/layouts/schedule-layout/schedule-layout.component.html
src/app/core/layouts/schedule-layout/schedule-layout.component.spec.ts
src/app/core/layouts/schedule-layout/schedule-layout.component.ts
src/app/core/models/DeleteSchedule.ts
src/app/core/models/Ginasio.ts
src/app/core/models/NewSchedule.ts
src/app/core/models/Option.ts
src/app/core/models/ScheduleModel.ts
src/app/core/models/User.ts
src/app/core/models/UserData.ts
src/app/core/pages/configuration/configuration.component.html
src/app/core/pages/configuration/configuration.component.spec.ts
src/app/core/pages/configuration/configuration.component.ts
src/app/core/pages/email-code-send/email-code-send.component.html
src/app/core/pages/email-code-send/email-code-send.component.spec.ts
src/app/core/pages/email-code-send/email-code-send.component.ts
src/app/core/pages/email-validator/email-validator.component.html
src/app/core/pages/email-validator/email-validator.component.spec.ts
src/app/core/pages/email-validator/email-validator.component.ts
src/app/core/pages/schedule/schedule.component.css
src/app/core/pages/schedule/schedule.component.html
src/app/core/pages/schedule/schedule.component.spec.ts
src/app/core/pages/schedule/schedule.component.ts
src/app/core/pages/userschdeules/userschdeules.component.html
src/app/core/pages/userschdeules/userschdeules.component.spec.ts
src/app/core/pages/userschdeules/userschdeules.component.ts
src/app/core/routes/app.routes.ts
src/app/core/services/auth/auth.service.spec.ts
src/app/core/services/auth/auth.service.ts
src/app/core/services/layout/layout-schedules.service.spec.ts
src/app/core/services/layout/layout-schedules.service.ts
src/app/core/services/schedule/schedule-time.service.ts
src/app/core/services/schedule/schedules.service.spec.ts
src/app/core/services/schedule/schedules.service.ts
src/app/core/shared/footer/footer.component.html
src/app/core/shared/footer/footer.component.spec.ts
src/app/core/shared/footer/footer.component.ts
src/app/core/shared/header/header.component.css
src/app/core/shared/header/header.component.html
src/app/core/shared/header/header.component.spec.ts
src/app/core/shared/header/header.component.ts
src/app/core/shared/menu/menu.component.css
src/app/core/shared/menu/menu.component.html
src/app/core/shared/menu/menu.component.spec.ts
src/app/core/shared/menu/menu.component.ts
src/index.html
src/main.ts
src/styles.css
tsconfig.app.json
tsconfig.json
tsconfig.spec.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single
ij_typescript_use_double_quotes = false

[*.md]
max_line_length = off
trim_trailing_whitespace = false
</file>

<file path=".gitignore">
# See https://docs.github.com/get-started/getting-started-with-git/ignoring-files for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db
</file>

<file path=".postcssrc.json">
{
    "plugins": {
      "@tailwindcss/postcss": {}
    }
  }
</file>

<file path="documentacao/component.uml">
@startuml

package "Frontend (Cliente)" {
  [Interface de Agendamento] 
  [Interface de Consulta de Espaços]
  [Interface de Autenticação]
}

package "Servidor (Backend)" {
  [API REST]
  [Controle de Agendamento]
  [Validação de Disponibilidade]
  [Controle de Feriados e Horários]
  [Autenticação e Autorização]
  [Integração SSO UFU]
}

package "Banco de Dados" {
  [Tabela de Usuários]
  [Tabela de Agendamentos]
  [Tabela de Espaços]
  [Tabela de Horários]
  [Tabela de Feriados]
}

[Frontend (Cliente)] --> [API REST] : Consome API
[API REST] --> [Controle de Agendamento] : Comunicação
[Controle de Agendamento] --> [Banco de Dados] : Acessa Dados
[Autenticação e Autorização] --> [Integração SSO UFU] : Redireciona Usuário
[Integração SSO UFU] --> [API REST] : Retorno de JWT
[API REST] --> [Banco de Dados] : Acesso aos Dados do Usuário

@enduml
</file>

<file path="documentacao/infraestrutra.plantuml">
@startuml

actor "Usuário" as usuario
node "Cliente (Web)" {
  [Browser]
}

node "Servidor Web (Backend)" {
  [Servidor de API (Spring Boot)]
}

node "Servidor de Banco de Dados" {
  [Banco de Dados (PostgreSQL)]
}

node "SSO (UFU)" {
  [Serviço de Autenticação SSO UFU]
}

usuario --> [Cliente (Web)] : Acesso
[Cliente (Web)] --> [SSO (UFU)] : Redireciona para Autenticação
[SSO (UFU)] --> [Cliente (Web)] : Retorna JWT
[Cliente (Web)] --> [Servidor Web (Backend)] : Envia JWT para API
[Servidor Web (Backend)] --> [Banco de Dados] : Consulta/Manipula Dados

@enduml
</file>

<file path="documentacao/uml.plantuml">
@startuml
!theme cerulean

entity "Campus" as Campus {
  * id (PK)
  --
  nome
  localização
}

entity "EspaçoEsportivo" as EspacoEsportivo {
  * id (PK) [Nome do Espaço]
  --
  id_campus (FK)
  disponibilidade (bool)
  funcao
  modalidades
}

entity "HorarioFuncionamento" as HorarioFuncionamento {
  * id (PK)
  --
  id_espaco (FK)
  dia_semana
  horario_abertura
  horario_fechamento
}

entity "Feriados" as Feriados {
  * id (PK)
  --
  id_campus (FK)
  data
  descricao
  horario_abertura
  horario_fechamento
}

entity "Usuario" as Usuario {
  * matricula (PK)
  --
  nome
  email
  curso
  telefone
  tipo_usuario
}

entity "Agendamento" as Agendamento {
  * id (PK)
  --
  matricula_usuario (FK)
  id_espaco (FK)
  data_agendamento
  horario_inicio
  horario_fim
  num_pessoas
  telefone_contato
  prioridade
}

entity "ConfiguracoesAgendamento" as ConfiguracoesAgendamento {
  * id (PK)
  --
  tempo_maximo_agendamento
  tempo_antecedencia_cancelamento
  tempo_antecedencia_agendamento
}

Campus ||--o{ EspacoEsportivo : "1:N"
EspacoEsportivo ||--o{ HorarioFuncionamento : "1:N"
Campus ||--o{ Feriados : "1:N"
EspacoEsportivo ||--o{ Agendamento : "1:N"
Usuario ||--o{ Agendamento : "1:N"
@enduml
</file>

<file path="proxy.conf.json">
{
  "/api/*": {
    "target": "http://localhost:3000",
    "secure": false,
    "changeOrigin": true,
    "logLevel": "debug",
    "pathRewrite": {
      "^/api": ""
    }
  }
}
</file>

<file path="src/app/app.component.spec.ts">
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'schedule-ufu' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('schedule-ufu');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, schedule-ufu');
  });
});
</file>

<file path="src/app/core/components/datapicker/datapicker.component.html">
<div class="br-datetimepicker" data-mode="single" data-type="text">
    <div class="br-input has-icon">
      <input id="simples-input" type="text" placeholder="exemplo: 02/02/2024" data-input="data-input" />
      <button class="br-button circle small" type="button" aria-label="Abrir Timepicker" data-toggle="data-toggle"
        id="simples-input-btn" tabindex="-1" aria-hidden="true">
        <i class="fas fa-calendar-alt" aria-hidden="true"></i>
      </button>
    </div>
  </div>
</file>

<file path="src/app/core/components/datapicker/datapicker.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DatapickerComponent } from './datapicker.component';

describe('DatapickerComponent', () => {
  let component: DatapickerComponent;
  let fixture: ComponentFixture<DatapickerComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DatapickerComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DatapickerComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/dropdownn/dropdownn.component.html">
<div class="br-select">
    <div class="br-input">
    <label for="select-ginasio">{{field}}</label>
      <input id="select-simple" type="text" [value]="selectedLabel" placeholder="{placeholder}"
        readonly />
      <button class="br-button" type="button" aria-label="Exibir lista" (click)="toggleDropdown()" tabindex="-1"
        data-trigger="data-trigger">
        <i class="fas fa-angle-down" aria-hidden="true"></i>
      </button>
    </div>
    <div [ngClass]="{'hidden': !isDropdownOpen}" style="position: absolute;z-index: 1000;" tabindex="0">
      <div class="br-item" tabindex="-1" *ngFor="let option of dropdownOptions"
        (click)="onDropdownChange(option.value)">
        <div class="br-radio">
          <input [id]="option.id" type="radio" name="actions" [value]="option.value"
            [checked]="selectedCampus === option.value" />
          <label [for]="option.id">{{ option.label }}</label>
        </div>
      </div>
    </div>
  </div>
</file>

<file path="src/app/core/components/dropdownn/dropdownn.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DropdownnComponent } from './dropdownn.component';

describe('DropdownnComponent', () => {
  let component: DropdownnComponent;
  let fixture: ComponentFixture<DropdownnComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DropdownnComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DropdownnComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/select-filter/select-filter.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SelectFilterComponent } from './select-filter.component';

describe('SelectFilterComponent', () => {
  let component: SelectFilterComponent;
  let fixture: ComponentFixture<SelectFilterComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SelectFilterComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SelectFilterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/slider/slider.component.css">
mat-slider {
    width: 300px;
  }
</file>

<file path="src/app/core/components/slider/slider.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SliderComponent } from './slider.component';

describe('SliderComponent', () => {
  let component: SliderComponent;
  let fixture: ComponentFixture<SliderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SliderComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SliderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/table-espacos/table-espacos.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TableEspacosComponent } from './table-espacos.component';

describe('TableEspacosComponent', () => {
  let component: TableEspacosComponent;
  let fixture: ComponentFixture<TableEspacosComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TableEspacosComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TableEspacosComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/table-users/table-users.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TableUsersComponent } from './table-users.component';

describe('TableUsersComponent', () => {
  let component: TableUsersComponent;
  let fixture: ComponentFixture<TableUsersComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TableUsersComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TableUsersComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/table/table.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TableComponent } from './table.component';

describe('TableComponent', () => {
  let component: TableComponent;
  let fixture: ComponentFixture<TableComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TableComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/guards/auth.guard.spec.ts">
import { TestBed } from '@angular/core/testing';
import { CanActivateFn } from '@angular/router';

import { authGuard } from './auth.guard';

describe('authGuard', () => {
  const executeGuard: CanActivateFn = (...guardParameters) => 
      TestBed.runInInjectionContext(() => authGuard(...guardParameters));

  beforeEach(() => {
    TestBed.configureTestingModule({});
  });

  it('should be created', () => {
    expect(executeGuard).toBeTruthy();
  });
});
</file>

<file path="src/app/core/layouts/auth-layout/auth-layout.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AuthLayoutComponent } from './auth-layout.component';

describe('AuthLayoutComponent', () => {
  let component: AuthLayoutComponent;
  let fixture: ComponentFixture<AuthLayoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AuthLayoutComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(AuthLayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/layouts/auth-layout/auth-layout.component.ts">
import { Component } from '@angular/core';
import { HeaderComponent } from '../../shared/header/header.component';
import { FooterComponent } from '../../shared/footer/footer.component';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-auth-layout',
  imports: [RouterOutlet, FooterComponent, HeaderComponent],
  templateUrl: './auth-layout.component.html',
  styleUrl: './auth-layout.component.css'
})
export class AuthLayoutComponent {

}
</file>

<file path="src/app/core/layouts/schedule-layout/schedule-layout.component.css">
.shadow-content{
    box-shadow: inset 0 0 3px #000;
}
</file>

<file path="src/app/core/layouts/schedule-layout/schedule-layout.component.html">
<app-header [user]="'Gigi'"></app-header>
<div class="flex h-full m-0">
    <div class="w-1/4 h-max">
        <app-menu></app-menu>
    </div>
    <div class="flex-1 p-5 shadow-content h-max ">
      <router-outlet></router-outlet>
    </div>
</div>
<app-footer [title]="'©2022 - 2024 | Acesso UFU (v0.14.2) | Desenvolvido pelo CTIC | Universidade Federal de Uberlândia'"></app-footer>
</file>

<file path="src/app/core/layouts/schedule-layout/schedule-layout.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ScheduleLayoutComponent } from './schedule-layout.component';

describe('ScheduleLayoutComponent', () => {
  let component: ScheduleLayoutComponent;
  let fixture: ComponentFixture<ScheduleLayoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ScheduleLayoutComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ScheduleLayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/models/DeleteSchedule.ts">
export interface DeleteSchedule {
horario: string; // Time em Java -> string no formato "HH:mm"
  data: string; // LocalDate em Java -> string no formato "YYYY-MM-DD"
  ginasio: string;
  matriculaAluno: string;
}
</file>

<file path="src/app/core/models/NewSchedule.ts">
export interface NewSchedule {
  horario: string; // Time em Java -> string no formato "HH:mm"
  data: string; // Date em Java -> string no formato "YYYY-MM-DD"
  ginasio: string;
  responsavel: string;
  curso: string;
  campus: string; //CampusEnum
  matriculaAluno: string;
  telefone: string;
  email: string;
  quantidadePessoas: number;
}
</file>

<file path="src/app/core/models/Option.ts">
export interface option {
    id: string;
    value: string;
    label: string;
  }
</file>

<file path="src/app/core/models/ScheduleModel.ts">
export interface ScheduleModel {
  horario: string; // Time em Java -> string no formato "HH:mm"
  data: string; // Date em Java -> string no formato "YYYY-MM-DD"
  ginasio: string;
  responsavel: string;
  curso: string;
  campus: string;
  matriculaAluno: string;
  email: string;
}
</file>

<file path="src/app/core/models/UserData.ts">
export interface UserData {
    matricula: string;
    nome: string;
    email: string;
    telefone: string;
    codigo: string;
}
</file>

<file path="src/app/core/pages/configuration/configuration.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ConfigurationComponent } from './configuration.component';

describe('ConfigurationComponent', () => {
  let component: ConfigurationComponent;
  let fixture: ComponentFixture<ConfigurationComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ConfigurationComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ConfigurationComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/pages/email-code-send/email-code-send.component.html">
<div class="flex h-full m-0 items-center justify-center">
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" class="h-full w-1/3 flex flex-col gap-4">
        <div class="row">
            <div class="col-sm-6 mb-3">
            <div class="br-input"
                [class.invalid]="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched">
                <label for="email">Email</label>
                <input id="email" type="email" formControlName="email" placeholder="Digite o seu email @ufu.br" />
                <div *ngIf="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('email') }}
                </div>
            </div>
            </div>
        </div>
                
        <div class="w-full">
            <button type="submit" 
                    [disabled]="scheduleForm.invalid" 
                    class="br-button primary">
                Enviar código de validação
            </button>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/pages/email-code-send/email-code-send.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { EmailCodeSendComponent } from './email-code-send.component';

describe('EmailCodeSendComponent', () => {
  let component: EmailCodeSendComponent;
  let fixture: ComponentFixture<EmailCodeSendComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [EmailCodeSendComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(EmailCodeSendComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/pages/email-validator/email-validator.component.html">
<div class="flex h-full m-0 items-center justify-center">
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" class="h-full w-1/3 flex flex-col gap-4">
           <!-- Linha 1: Emmail -->
        <div class="row">
            <div class="col-sm-6 mb-3">
            <div class="br-input"
                [class.invalid]="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched">
                <label for="email">Email</label>
                <input id="email" type="email" formControlName="email" placeholder="Digite o seu email @ufu.br" />
                <div *ngIf="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('email') }}
                </div>
            </div>
            </div>
        </div>

         <!-- Linha 2: Nome -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input large input-button"
                    [class.invalid]="scheduleForm.get('nome')?.invalid && scheduleForm.get('nome')?.touched">
                    <label for="input-search-responsavel">Nome (Obrigatório)</label>
                    <input id="input-search-responsavel" type="search" placeholder="Digite o seu nome"
                        formControlName="nome" />
                </div>
                <div *ngIf="scheduleForm.get('nome')?.invalid && scheduleForm.get('nome')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('nome') }}
                </div>
            </div>
        </div>

        <!-- Linha 3: Matrícula -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="matricula">Matrícula</label>
                    <input id="matricula" type="text" formControlName="matricula"
                        placeholder="Preenchido automaticamente ao selecionar o responsável"
                        [class.invalid]="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('matricula') }}
                </div>
            </div>
        </div>

        <!-- Linha 4: Telefone -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input"
                    [class.invalid]="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched">
                    <label for="telefone">Telefone</label>
                    <input id="telefone" type="text" formControlName="telefone" placeholder="Digite o telefone" />
                    <div *ngIf="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('telefone') }}
                    </div>
                </div>
            </div>
            </div>

        <!-- Linha 5: Código Email -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="codigo">Código</label>
                    <input id="codigo" type="text" formControlName="codigo"
                        placeholder="Código númerico enviado para o email"
                        [class.invalid]="scheduleForm.get('codigo')?.invalid && scheduleForm.get('codigo')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('codigo')?.invalid && scheduleForm.get('codigo')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('codigo') }}
                </div>
            </div>
        </div>

        <!-- Linha 6: Botão de Envio -->
            
        <div class="w-full">
            <button type="submit" 
                    [disabled]="scheduleForm.invalid" 
                    class="br-button primary">
                Validar código de verificação
            </button>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/pages/email-validator/email-validator.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { EmailValidatorComponent } from './email-validator.component';

describe('EmailValidatorComponent', () => {
  let component: EmailValidatorComponent;
  let fixture: ComponentFixture<EmailValidatorComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [EmailValidatorComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(EmailValidatorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/pages/schedule/schedule.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ScheduleComponent } from './schedule.component';

describe('ScheduleComponent', () => {
  let component: ScheduleComponent;
  let fixture: ComponentFixture<ScheduleComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ScheduleComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ScheduleComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/pages/userschdeules/userschdeules.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserschdeulesComponent } from './userschdeules.component';

describe('UserschdeulesComponent', () => {
  let component: UserschdeulesComponent;
  let fixture: ComponentFixture<UserschdeulesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [UserschdeulesComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UserschdeulesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/auth/auth.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/auth/auth.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { Router } from '@angular/router';
import { UserData } from '../../models/UserData';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private baseApiUrl = 'http://localhost:3000/v1/auth';
  private tokenKey = 'auth-token';
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();

  constructor(
    private http: HttpClient,
    private router: Router
  ) {
    this.checkToken();
  }

  private checkToken(): void {
    const token = localStorage.getItem(this.tokenKey);
    if (token && this.isValidToken(token)) {
      this.isAuthenticatedSubject.next(true);
    } else {
      this.logout();
    }
  }

  private isValidToken(token: string): boolean {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const currentTime = Math.floor(Date.now() / 1000);
      return payload.exp > currentTime;
    } catch {
      return false;
    }
  }

  sendEmailCode(email: string): Observable<any> {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });

    return this.http.post(`${this.baseApiUrl}/email/send/${email}`, { headers });
  }

  verifyEmailCode(email: string, code: string): Observable<any> {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });
  

    return this.http.post(`${this.baseApiUrl}/email/validate`, { email, code }, { headers });
  }

  gerenateAuth(userData: UserData): Observable<any> {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });

    return this.http.post(`${this.baseApiUrl}`, userData, { 
      headers,
      responseType: 'text' // Aceita resposta em texto (token)
    });
  }

    validateAuth(token : string): Observable<any> {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });

    return this.http.post(`${this.baseApiUrl}/validate`, token, { headers });
  }

  

  saveToken(token: string): void {
    localStorage.setItem(this.tokenKey, token);
    this.isAuthenticatedSubject.next(true);
  }


  logout(): void {
    localStorage.removeItem(this.tokenKey);
    localStorage.removeItem('user');
    this.isAuthenticatedSubject.next(false);
    this.router.navigate(['/auth/login']);
  }

  // Obter token
  getToken(): string | null {
    return localStorage.getItem(this.tokenKey);
  }

  // Verificar se está autenticado
  isAuthenticated(): boolean {
    const token = this.getToken();
    return token ? this.isValidToken(token) : false;
  }

  // Obter dados do usuário
  getUser(): UserData | null {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user) : null;
  }

  // Salvar dados do usuário
  saveUser(user: UserData): void {
    localStorage.setItem('user', JSON.stringify(user));
  }
}
</file>

<file path="src/app/core/services/layout/layout-schedules.service.spec.ts">
/* tslint:disable:no-unused-variable */

import { TestBed, inject } from '@angular/core/testing';
import { LayoutSchedulesService } from './layout-schedules.service';

describe('Service: LayoutSchedules', () => {
  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [LayoutSchedulesService]
    });
  });

  it('should ...', inject([LayoutSchedulesService], (service: LayoutSchedulesService) => {
    expect(service).toBeTruthy();
  }));
});
</file>

<file path="src/app/core/services/layout/layout-schedules.service.ts">
import { Injectable } from '@angular/core';
import { SchedulesService } from '../schedule/schedules.service';
import { AuthService } from '../auth/auth.service';
import { User } from '../../models/User';
import { Ginasio } from '../../models/Ginasio';
import { UserData } from '../../models/UserData';

@Injectable({
  providedIn: 'root'
})
export class LayoutSchedulesService {
  private Ginasios: Ginasio[] = [];
  private user: UserData | null = null;

constructor(private Auth: AuthService, private ScheduleService: SchedulesService) { 
    this.loadGinasios();
    this.loadUser();
  }

  private loadGinasios(): void {
    this.ScheduleService.getAvailableGyms().subscribe({
      next: (ginasios) => {
        this.Ginasios = ginasios;
      },
      error: (error) => {
        console.error('Erro ao carregar ginásios:', error);
      }
    });
  }

  private loadUser(): void {
    const user = this.Auth.getUser();
    if (user !== null) {
      this.user = user;
    } else {
      console.error('Usuário não encontrado');
    };
  }

  getGinasios(): Ginasio[] {
    return this.Ginasios;
  }

  getUser(): UserData | null {
    return this.user;
  }

}
</file>

<file path="src/app/core/services/schedule/schedule-time.service.ts">
import { Injectable, EventEmitter } from '@angular/core';

@Injectable({
    providedIn: 'root',
})
export class ScheduleTimeService {
    horarioDisponivelClicadoEmitter = new EventEmitter<void>();

    abrirModalScheduleForm(): void {
        this.horarioDisponivelClicadoEmitter.emit();
    }
}
</file>

<file path="src/app/core/services/schedule/schedules.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { SchedulesService } from './schedules.service';

describe('SchedulesService', () => {
  let service: SchedulesService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(SchedulesService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/shared/header/header.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HeaderComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/shared/menu/menu.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { MenuComponent } from './menu.component';

describe('SidebarComponent', () => {
  let component: MenuComponent;
  let fixture: ComponentFixture<MenuComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [MenuComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(MenuComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/shared/menu/menu.component.ts">
import { Component } from '@angular/core';
import { RouterLink } from '@angular/router';
@Component({
  selector: 'app-menu',
  imports: [RouterLink],
  templateUrl: './menu.component.html',
  styleUrls: ['./menu.component.css']
})
export class MenuComponent {

}
</file>

<file path="src/main.ts">
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));
</file>

<file path="tsconfig.app.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}
</file>

<file path="tsconfig.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}
</file>

<file path="tsconfig.spec.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
</file>

<file path="README.md">
# Schedule UFU - Documentação do Projeto

## Visão Geral

O **Schedule UFU** é um sistema web para gerenciamento de reservas de espaços esportivos da Universidade Federal de Uberlândia. O projeto foi desenvolvido em Angular, utilizando Tailwind CSS e o Design System do GOVBR, com foco em usabilidade, organização e escalabilidade.

---

## Development server

To start a local development server, run:

```bash
ng serve
```

Once the server is running, open your browser and navigate to `http://localhost:4200/`. The application will automatically reload whenever you modify any of the source files.

## Code scaffolding

Angular CLI includes powerful code scaffolding tools. To generate a new component, run:

```bash
ng generate component component-name
```

For a complete list of available schematics (such as `components`, `directives`, or `pipes`), run:

```bash
ng generate --help
```

## Building

To build the project run:

```bash
ng build
```

This will compile your project and store the build artifacts in the `dist/` directory. By default, the production build optimizes your application for performance and speed.

## Running unit tests

To execute unit tests with the [Karma](https://karma-runner.github.io) test runner, use the following command:

```bash
ng test
```

## Running end-to-end tests

For end-to-end (e2e) testing, run:

```bash
ng e2e
```

Angular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.

## Additional Resources

For more information on using the Angular CLI, including detailed command references, visit the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.

---

## Estrutura de Pastas

### src/app/core/components

Componentes reutilizáveis e especializados:

- **dropdownn/**: Dropdown customizado para seleção em formulários.
- **select-filter/**: Dropdown para filtros rápidos em tabelas/listas.
- **schedule-form/**: Formulário principal de agendamento, com suporte a recorrência.
- **table/**: Tabela para exibição de reservas, com botões de ação (reservar, editar).
- **table-users/**: Tabela para gestão de usuários (nome, matrícula, email, tipo, ações).
- **table-espacos/**: Tabela para gestão de espaços esportivos (nome, campus, horários, disponibilidade, ações).
- **datapicker/**: Componente para seleção de datas e horários.
- **slider/**: Componente de slider para seleção de valores numéricos (ex: antecedência de agendamento).

### src/app/core/models

Interfaces e tipos utilizados em toda a aplicação:

- **Option.ts**: Interface para opções de dropdowns.
- **Reserva.ts**: Interface para reservas/agendamentos.
- **User.ts**: Interface para usuários do sistema.
- **Ginasio.ts**: Interface para espaços esportivos.

### src/app/core/pages

Páginas principais do sistema:

- **schedule/**: Página principal de reservas, exibe tabela de horários e permite abrir o formulário de agendamento.
- **userschdeules/**: Página "Minhas Reservas", exibe reservas do usuário e permite edição/cancelamento.
- **configuration/**: Página de configurações administrativas (gestão de reservas, espaços, permissões).

### src/app/core/routes

- **app.routes.ts**: Definição das rotas principais do sistema.

### src/app/core/services

- **schedule-time.service.ts**: Serviço para comunicação entre componentes (ex: abrir modal de agendamento).

### src/app/core/shared

Componentes compartilhados entre páginas:

- **header/**: Cabeçalho do sistema, exibe logo, nome do sistema e usuário logado.
- **footer/**: Rodapé do sistema, exibe informações institucionais.
- **menu/**: Menu lateral de navegação entre páginas principais.

---

## Outras Pastas

### src/assets

- Imagens, ícones e arquivos estáticos.

### src/styles.css

- Estilos globais e importação do Tailwind CSS.

---

## Observações e Boas Práticas

- Cada componente Angular está organizado em sua própria pasta, contendo arquivos `.ts`, `.html`, `.css` e `.spec.ts` (testes).
- Os componentes são reutilizáveis e seguem o padrão de comunicação via `@Input` e `@Output` para integração entre eles.
- Serviços são utilizados para lógica compartilhada e comunicação entre componentes que não possuem relação direta de hierarquia.
- O projeto utiliza Tailwind CSS para estilização rápida e responsiva, além do Design System do GOVBR para padronização visual.
- O código segue boas práticas de modularização, separação de responsabilidades e uso de tipagem forte com TypeScript.

---

## Como Rodar o Projeto

1. Instale as dependências:

```bash
npm install
```

2. Inicie o servidor de desenvolvimento:

```bash
ng serve
```

3. Acesse em [http://localhost:4200](http://localhost:4200)

---

## Licença

Projeto acadêmico - Universidade Federal de Uberlândia.
</file>

<file path="src/app/core/components/datapicker/datapicker.component.ts">
import { AfterViewInit, Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import flatpickr from 'flatpickr';

@Component({
  selector: 'app-datapicker',
  imports: [],
  templateUrl: './datapicker.component.html',
  styleUrl: './datapicker.component.css'
})
export class DatapickerComponent implements AfterViewInit, OnChanges {
  @Input() selectedDate: string = ''; 
  @Output() dateSelected = new EventEmitter<string>(); 

  private flatpickrInstance: any;

  ngAfterViewInit(): void {
    this.initializeFlatpickr();
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['selectedDate'] && this.flatpickrInstance) {
      this.flatpickrInstance.setDate(this.selectedDate);
    }
  }

  private initializeFlatpickr(): void {
    this.flatpickrInstance = flatpickr('#simples-input', {
      dateFormat: 'Y-m-d', // Formato correto do flatpickr para YYYY-MM-DD
      defaultDate: this.selectedDate || new Date(), // Data padrão: selectedDate ou data atual
      onChange: (selectedDates: Date[], dateStr: string) => {
        this.dateSelected.emit(dateStr);
      }
    });
  }
}
</file>

<file path="src/app/core/components/dropdownn/dropdownn.component.ts">
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild} from '@angular/core';
import { option } from '../../models/Option';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-dropdownn',
   imports: [CommonModule],
  templateUrl: './dropdownn.component.html',
  styleUrl: './dropdownn.component.css'
})
export class DropdownnComponent {
      @Input() field: string = 'Campo';
      @Input() placeholder: string = 'Selecione alguma opção';
      @Input() dropdownOptions: Array<option> = [];
      @Output() selectedOption = new EventEmitter<option>();

            // Select configuration
            @ViewChild('dropdownList') dropdownList!: ElementRef;
            isDropdownOpen: boolean = false;
            // Variáveis para o filtro e lista a ser mostrada
            selectedCampus: string = '';
            selectedLabel: string = this.placeholder;
          
        
          //lógica do dropdown
          toggleDropdown(): void {
            this.isDropdownOpen = !this.isDropdownOpen;
            if (this.isDropdownOpen) {
              this.dropdownList.nativeElement.style.display = 'absolute';
            } else {
              this.dropdownList.nativeElement.style.display = 'none';
            }
          }
      
        //Exibição da lista
        onDropdownChange(selectedValue: string): void {
          let selected: option = this.dropdownOptions.find(option => option.value === selectedValue) ||  { id: '', value: '', label: '' };
          this.selectedLabel = selected.label;
          this.selectedCampus = selected.value;
          this.selectedOption.emit(selected);
          this.toggleDropdown();
        }

}
</file>

<file path="src/app/core/components/slider/slider.component.html">
<div class="flex flex-col justify-around m-2">
    <div class="example-label-container">
      <label id="example-name-label" class="example-name-label">{{title}}</label>
      <label class="example-value-label ml-2 p-2 border 3px">{{slider.value}} minutos</label>
    </div>
    <mat-slider
        class="example-margin"
        [max]="max"
        [min]="min" 
        [step]="step"
        (input)="onSliderValueChange($event)">
      <input matSliderThumb [(ngModel)]="value" #slider>
    </mat-slider>
</div>
</file>

<file path="src/app/core/components/table-espacos/table-espacos.component.html">
<!-- Tabela  -->
<div title="{{tableName}}">
    <div class="table-header">
      <div class="top-bar">
        <h3 class="table-title">{{tableName}}</h3>
      </div>
    </div>
    <div class="tabela-horarios">
      <table>
        <thead>
          <th class="border-right text-center" scope="col">Nome</th>
          <th class="border-right text-center" scope="col">Campus</th>
          <th class="border-right text-center" scope="col">Funcionamento</th>
          <th class="text-center" scope="col">Apagar</th>
        </thead>
        <tbody>
          <tr *ngFor="let row of tableData">
            <td class="text-center">{{ row.nome }}</td>
            <td class="text-center">{{ row.campus }}</td>
            <td class="text-center">{{ row.startTime }} - {{ row.endTime }}</td>
            <td class="text-center">
              <button class="br-button primary" type="button" aria-label="Controle Espaços Esportivos"
                (click)="onDisponivelClick(row)">
                Apagar</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</file>

<file path="src/app/core/components/table-espacos/table-espacos.component.ts">
import { Component, Input } from '@angular/core';
import { Ginasio } from '../../models/Ginasio';
import { CommonModule } from '@angular/common';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';

@Component({
  selector: 'app-table-espacos',
  imports: [CommonModule],
  templateUrl: './table-espacos.component.html',
  styleUrl: './table-espacos.component.css'
})
export class TableEspacosComponent {
    @Input() tableName: string = 'Tabela';
    @Input() tableData: Ginasio[] = [];
  
    constructor(private scheduleService: ScheduleTimeService) { }
    onDisponivelClick(row: Ginasio): void {
        this.scheduleService.abrirModalScheduleForm();
    }

}
</file>

<file path="src/app/core/components/table-users/table-users.component.html">
<!-- Tabela  -->
<div title="{{tableName}}">
    <div class="table-header">
      <div class="top-bar">
        <h3 class="table-title">{{tableName}}</h3>
      </div>
    </div>
    <div class="tabela-horarios">
      <table>
        <thead>
          <th class="border-right text-center" scope="col">Nome</th>
          <th class="border-right text-center" scope="col">Matricula</th>
          <th class="border-right text-center" scope="col">Email</th>
          <th class="border-right text-center" scope="col">Acesso</th>
          <th class="text-center" scope="col">Acesso</th>
        </thead>
        <tbody>
          <tr *ngFor="let row of tableData">
            <td class="text-center">{{ row.nome }}</td>
            <td class="text-center">{{ row.matricula }}</td>
            <td class="text-center">{{ row.email }}</td>
            <td class="text-center">{{ row.acess }}</td>
            <td class="text-center">
              <button class="br-button primary" type="button" aria-label="Controle Reserva"
                (click)="onDisponivelClick(row)">
                Editar</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</file>

<file path="src/app/core/components/table-users/table-users.component.ts">
import { Component, Input } from '@angular/core';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';
import { User } from '../../models/User';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-table-users',
  imports: [CommonModule],
  templateUrl: './table-users.component.html',
  styleUrl: './table-users.component.css'
})
export class TableUsersComponent {
  @Input() tableName: string = 'Tabela';
  @Input() tableData: User[] = [];

  constructor(private scheduleService: ScheduleTimeService) { }
  onDisponivelClick(row: User): void {
      this.scheduleService.abrirModalScheduleForm();
  }
}
</file>

<file path="src/app/core/components/table/table.component.css">
.tabela-horarios {
  max-height: 67vh;
  overflow-y: auto;
  overflow-x: auto;
  box-sizing: border-box;
}
</file>

<file path="src/app/core/guards/auth.guard.ts">
import { CanActivateFn, Router } from '@angular/router';
import { inject } from '@angular/core';
import { AuthService } from '../services/auth/auth.service';

export const authGuard: CanActivateFn = (route, state) => {
  const authService = inject(AuthService);
  const router = inject(Router);

  const token = authService.getToken();
  if (authService.isAuthenticated() && token && authService.validateAuth(token)) {
    return true;
  }
  router.navigate(['/auth/login']);
  return false;
};
</file>

<file path="src/app/core/layouts/auth-layout/auth-layout.component.html">
<app-header></app-header>
    <div class="flex-1 p-5 shadow-content h-max ">
      <router-outlet></router-outlet>
    </div>
<app-footer [title]="'©2022 - 2024 | Acesso UFU (v0.14.2) | Desenvolvido pelo CTIC | Universidade Federal de Uberlândia'"></app-footer>
</file>

<file path="src/app/core/layouts/schedule-layout/schedule-layout.component.ts">
import { Component } from '@angular/core';
import { Router, RouterOutlet } from '@angular/router';
import { HeaderComponent } from '../../shared/header/header.component';
import { FooterComponent } from '../../shared/footer/footer.component';
import { MenuComponent } from '../../shared/menu/menu.component';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { UserData } from '../../models/UserData';

@Component({
  selector: 'app-schedule-layout',
  imports: [   
     RouterOutlet,
      HeaderComponent,
      FooterComponent,
      MenuComponent],
  templateUrl: './schedule-layout.component.html',
  styleUrl: './schedule-layout.component.css'
})
export class ScheduleLayoutComponent {
  private user: UserData | null = null;
  constructor(private layoutService: LayoutSchedulesService, private router: Router) { }

  onActivate(event: any): void {
    this.user = this.layoutService.getUser();
    if(this.user === null) {
      console.error('User not found');
        this.router.navigate(['/auth/login']);
    }else {
      console.log('Activated component:', event);
    }
  }

}
</file>

<file path="src/app/core/models/Ginasio.ts">
export interface Ginasio {
    nome: any;
    campus: string;
    startTime: string;
    endTime: string;
  }
</file>

<file path="src/app/core/models/User.ts">
export interface User {
  matricula: string;
  nome: string;
  email: string;
  telefone: string;
  acess: String; // AcessEnum
}
</file>

<file path="src/app/core/pages/email-code-send/email-code-send.component.ts">
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth/auth.service';

@Component({
  selector: 'app-email-code-send',
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './email-code-send.component.html',
  styleUrl: './email-code-send.component.css'
})
export class EmailCodeSendComponent implements OnInit {
    scheduleForm!: FormGroup;

    constructor(
        private fb: FormBuilder,
        private router: Router,
        private service : AuthService
    ) { }

    ngOnInit(): void {
        this.scheduleForm = this.fb.group({
            email: [
                '',
                [
                    Validators.required, 
                    Validators.email,
                    Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]*\.?ufu\.br$/)
                ]
            ]
        });

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });
    }

    onSubmit(): void {
    if (this.scheduleForm.valid) {
        console.log('Formulário enviado com sucesso!', this.scheduleForm.value.email);
        this.service.sendEmailCode(this.scheduleForm.value.email).subscribe({
            next: (response) => {
                console.log('Código enviado com sucesso!', response);
                this.router.navigate(['/auth/register']);
            },
            error: (error) => {
                alert('Erro ao enviar o código. Por favor, tente novamente.');
                console.error('Erro ao enviar o código:', error);
            }
        });
        
    } else {
        console.log('Formulário inválido');
        this.markFormGroupTouched();
    }
  }

    private markFormGroupTouched(): void {
        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsTouched();
        });
    }

    getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('email')) {
            return 'Email inválido.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'email') {
                return 'Use um email válido da UFU: nome@ufu.br';
            }
        }
        return '';
    }
}
</file>

<file path="src/app/core/pages/email-validator/email-validator.component.ts">
import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth/auth.service';

@Component({
  selector: 'app-email-validator',
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './email-validator.component.html',
  styleUrl: './email-validator.component.css'
})
export class EmailValidatorComponent  implements OnInit {
    scheduleForm!: FormGroup;
    

      constructor(
        private fb: FormBuilder,
        private router: Router,
        private service : AuthService
      ) { }

    ngOnInit(): void {
        this.scheduleForm = this.fb.group({
            email: [
                '',
                [
                    Validators.required, 
                    Validators.email,
                    Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]*\.?ufu\.br$/)
                ]
            ],
            nome: ['', Validators.required],
            matricula: ['', Validators.required],
            telefone: [
                '',
                [Validators.required, Validators.pattern(/^\(\d{2}\) \d{5}-\d{4}$/)],
            ],
            codigo: ['', Validators.required],

        });

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });
    }

    onSubmit(): void {
        if (this.scheduleForm.valid) {
            console.log('Formulário enviado com sucesso!', this.scheduleForm.value);

            this.service.verifyEmailCode(this.scheduleForm.value.email, this.scheduleForm.value.codigo).subscribe({
                next: (response) => {
                    console.log('Código validado com sucesso!', response);
                    this.generateAuth();
                },
                error: (error) => {
                    alert('Erro ao validar o código. Por favor, tente novamente.');
                    console.error('Erro ao validar o código:', error);
                }
            });

        } else {
            console.log('Formulário inválido');
            this.markFormGroupTouched();
        }
    }

    private markFormGroupTouched(): void {
        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsTouched();
        });
    }

    private generateAuth(): void {
        const userData = {
            email: this.scheduleForm.value.email,
            nome: this.scheduleForm.value.nome,
            matricula: this.scheduleForm.value.matricula,
            telefone: this.scheduleForm.value.telefone,
            codigo: this.scheduleForm.value.codigo
        };
        
        this.service.gerenateAuth(userData).subscribe({
            next: (response) => {
                console.log('Token gerado com sucesso!', response);
                this.service.saveToken(response);
                this.service.saveUser(userData);
                this.router.navigate(['/reservas']);
            },
            error: (error) => {
                alert('Erro ao gerar token. Por favor, tente novamente.');
                console.error('Erro ao gerar o token:', error);
            }
        });
    }

    getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('email')) {
            return 'Email inválido.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'email') {
                return 'Use um email válido da UFU: nome@ufu.br';
            }
            if (controlName === 'telefone') {
                return 'Use o formato: (XX) XXXXX-XXXX.';
            }
        }
        return '';
    }
}
</file>

<file path="src/app/core/shared/footer/footer.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [FooterComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/shared/footer/footer.component.ts">
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-footer',
  imports: [],
  templateUrl: './footer.component.html',
  styleUrl: './footer.component.css'
})
export class FooterComponent {
   @Input() title: string = '2025 | Acesso UFU  | Desenvolvido pelo CTIC | Universidade Federal de Uberlândia.';

}
</file>

<file path="src/app/app.config.ts">
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { routes } from './core/routes/app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient()
  ]
};
</file>

<file path="src/app/core/components/select-filter/select-filter.component.html">
<div class="br-select">
    <div class="br-input">
      <input id="select-simple" type="text" [value]="selectedLabel" placeholder="{{placeholder}}"
        readonly />
      <button class="br-button" type="button" aria-label="Exibir lista" (click)="toggleDropdown()" tabindex="-1"
        data-trigger="data-trigger">
        <i class="fas fa-angle-down" aria-hidden="true"></i>
      </button>
    </div>
    <div [ngClass]="{'hidden': !isDropdownOpen}" style="position: absolute;z-index: 1000;" tabindex="0">
      <div class="br-item" tabindex="-1" *ngFor="let option of dropdownOptions"
        (click)="onDropdownChange(option.value)">
        <div class="br-radio">
          <input [id]="option.id" type="radio" name="actions" [value]="option.value"
            [checked]="selectedCampus === option.value" />
          <label [for]="option.id">{{ option.label }}</label>
        </div>
      </div>
    </div>
  </div>
</file>

<file path="src/app/core/components/select-filter/select-filter.component.ts">
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild} from '@angular/core';
import { option } from '../../models/Option';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-select-filter',
  imports: [CommonModule],
  templateUrl: './select-filter.component.html',
  styleUrl: './select-filter.component.css'
})
export class SelectFilterComponent {
    @Input()  placeholder: string = 'Selecione o Campus para filtrar';
    @Input() dropdownOptions: Array<option> = [];
    @Output() selectedOption = new EventEmitter<option>();
  
      // Select configuration
      @ViewChild('dropdownList') dropdownList!: ElementRef;
      isDropdownOpen: boolean = false;
      // Variáveis para o filtro e lista a ser mostrada
      selectedCampus: string = '';
      selectedLabel: string = this.placeholder;
    
  
    //lógica do dropdown
    toggleDropdown(): void {
      this.isDropdownOpen = !this.isDropdownOpen;
      if (this.isDropdownOpen) {
        this.dropdownList.nativeElement.style.display = 'absolute';
      } else {
        this.dropdownList.nativeElement.style.display = 'none';
      }
    }

  //Exibição da lista
  onDropdownChange(selectedValue: string): void {
    var selected = this.dropdownOptions.find(option => option.value === selectedValue) || this.dropdownOptions[0];
    this.selectedLabel = selected.label;
    this.selectedCampus = selected.value;
    this.selectedOption.emit(selected); 
    this.toggleDropdown();
  }

}
</file>

<file path="src/app/core/components/slider/slider.component.ts">
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormsModule } from '@angular/forms';
import {MatSliderModule} from '@angular/material/slider';

@Component({
  selector: 'app-slider',
  imports: [MatSliderModule, FormsModule],
  templateUrl: './slider.component.html',
  styleUrl: './slider.component.css'
})
export class SliderComponent {
  @Input() min: number = 0;
  @Input() max: number = 200;
  @Input() step: number = 10;
  @Input() title: string = "Titulo Slider";
  @Input() value: number = this.min;
  @Output() valueChange: EventEmitter<number> = new EventEmitter<number>();
  onSliderValueChange(event: Event): void {
    const target = event.target as HTMLInputElement;
    const newValue = Number(target.value);
    this.value = newValue; 
    this.valueChange.emit(this.value);
  }



}
</file>

<file path="src/app/core/shared/menu/menu.component.css">
button:hover{
    background-color: #2670E8;
    color: #ffffff;
    cursor: pointer;
}
</file>

<file path="src/app/core/shared/menu/menu.component.html">
<nav class="flex flex-col bg-white text-center p-0 m-0">
    <div class="border-b border-black">
        <button routerLink="reservas" class="w-full h-max p-2 text-left pl-4">
            Reservas
        </button>
    </div>
    <div class="border-b border-black">
        <button routerLink="minhas-reservas" class="w-full h-max p-2 text-left pl-4">
            Minhas Reservas
        </button>
    </div>
    <div class="border-b border-black">
        <button routerLink="configuracoes" class="w-full h-max p-2 text-left pl-4">
            Configurações
        </button>
    </div>
 </nav>
</file>

<file path="angular.json">
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "schedule-ufu": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/schedule-ufu",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "@angular/material/prebuilt-themes/azure-blue.css",
              "src/styles.css",
              "node_modules/@govbr-ds/core/dist/core.min.css",
              "node_modules/flatpickr/dist/flatpickr.min.css"
            ],
            "scripts": [
              "node_modules/@govbr-ds/core/dist/core.min.js"
            ]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "schedule-ufu:build:production"
            },
            "development": {
              "buildTarget": "schedule-ufu:build:development",
              "proxyConfig": "proxy.conf.json"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "@angular/material/prebuilt-themes/azure-blue.css",
              "src/styles.css"
            ],
            "scripts": [
                "node_modules/@govbr-ds/core/dist/core.min.js"
              ]
          }
        }
      }
    }
  },
  "cli": {
    "analytics": "1121ec25-cfa0-4dee-aa92-42544c2e1f3b"
  }
}
</file>

<file path="package.json">
{
  "name": "schedule-ufu",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^19.0.0",
    "@angular/cdk": "^19.1.2",
    "@angular/common": "^19.0.0",
    "@angular/compiler": "^19.0.0",
    "@angular/core": "^19.0.0",
    "@angular/forms": "^19.0.0",
    "@angular/material": "^19.1.2",
    "@angular/platform-browser": "^19.0.0",
    "@angular/platform-browser-dynamic": "^19.0.0",
    "@angular/router": "^19.0.0",
    "@govbr-ds/core": "^3.6.1",
    "@tailwindcss/postcss": "^4.1.2",
    "@tailwindcss/vite": "^4.1.2",
    "flatpickr": "^4.6.13",
    "ngx-mask": "^19.0.6",
    "postcss": "^8.5.3",
    "rxjs": "~7.8.0",
    "tailwindcss": "^4.1.2",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^19.0.6",
    "@angular/cli": "^19.0.6",
    "@angular/compiler-cli": "^19.0.0",
    "@types/jasmine": "~5.1.0",
    "jasmine-core": "~5.4.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.6.2"
  }
}
</file>

<file path="src/app/core/components/table/table.component.html">
<!-- Tabela  -->
<div title="{{tableName}}">
  <div class="table-header">
    <div class="top-bar">
      <h3 class="table-title">{{tableName}}</h3>
    </div>
  </div>
  <div class="tabela-horarios">
    <table>
      <thead>
        <th class="border-right text-center" scope="col">Dia</th>
        <th class="border-right text-center" scope="col">Horários</th>
        <th class="border-right text-center" scope="col">Ginásio</th>
        <th class="border-right text-center" scope="col">Campus</th>
        <th class="border-right text-center" scope="col">Responsável</th>
        <th class="border-right text-center" scope="col">Curso</th>
      </thead>
      <tbody>
        <tr *ngFor="let row of tableData">
          <td class="text-center">{{ row.data }}</td>
          <td class="text-center">{{ row.horario }}</td>
          <td class="text-center">{{ row.ginasio }}</td>
          <td class="text-center">{{ row.campus }}</td>
          <td class="text-center">{{ row.responsavel }}</td>
          <td class="text-center">{{ row.curso }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
</file>

<file path="src/index.html">
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>SCHEDULE-UFU</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="/assets/favicon.ico">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="node_modules/@govbr-ds/core/dist/core.min.css" />
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="flex flex-col h-max m-0 font-sans">
  <app-root></app-root> 
</body>
</html>
</file>

<file path="src/app/app.component.css">
.shadow-content{
    box-shadow: inset 0 0 3px #000;
}
</file>

<file path="src/app/app.module.ts">
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { ScheduleComponent } from './core/pages/schedule/schedule.component';
import { ConfigurationComponent } from './core/pages/configuration/configuration.component';
import { UserschdeulesComponent } from './core/pages/userschdeules/userschdeules.component';
import { RouterLink } from '@angular/router';
import { provideNgxMask } from 'ngx-mask';
import { ReactiveFormsModule } from '@angular/forms';



@NgModule({
    declarations: [],
    imports: [
        BrowserModule,
        AppComponent,
        ScheduleComponent,
        ConfigurationComponent,
        UserschdeulesComponent,
        RouterLink,
        ReactiveFormsModule,
    ],
    providers: [
        provideNgxMask()
    ],
})
export class AppModule { }
</file>

<file path="src/app/core/components/schedule-form/schedule-form.component.css">
.container {
    max-width: 100%;
    margin: 0 auto;
    padding: 0 15px;
    box-sizing: border-box;
}

.feedback {
    font-size: 0.875rem;
    margin-top: 5px;
    min-height: 20px;
    visibility: hidden;
}

.feedback.danger {
    visibility: visible;
}

.row {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
}

.col-sm-6,
.col-sm-12 {
    flex: 1 1 calc(50% - 15px);
    max-width: calc(100% - 15px);
}

.col-sm-12 {
    flex: 1 1 100%;
    max-width: 100%;
}

.d-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.br-label {
    margin-bottom: 8px;
}

.time-label {
    margin-bottom: 8px;
}

.form-check-label {
    margin-left: 4px;
}

.form-check-input {
    margin: 0;
}
</file>

<file path="src/app/core/pages/configuration/configuration.component.html">
<div class="flex flex-col justify-around">
    <h2 class="text-bold">Configurações</h2>
    <div class="br-tab small">
        <nav class="tab-nav">
          <ul>
            <li class="tab-item" [class.active]="ShowGeral.valueOf()"  title="Geral">
              <button type="button" (click)="onTabSelect('ShowGeral')"><span class="name">Geral</span></button>
            </li>
            <li class="tab-item" [class.active]="ShowEspaco.valueOf()"  title="Espaços Esportivos">
              <button type="button" (click)="onTabSelect('ShowEspaco')" ><span class="name">Espaços Esportivos</span></button>
            </li>
            <li class="tab-item" [class.active]="ShowPermissao.valueOf()"  title="Permissões">
              <button type="button" (click)="onTabSelect('ShowPermissao')" ><span class="name">Permissões</span></button>
            </li>
          </ul>
        </nav>
    </div>

        <div *ngIf="ShowGeral.valueOf()" class="flex flex-col">
            <h3>Agendamentos</h3>
            <app-slider [value]="360"  [min]="60" [max]="1440" [step]="60" title="Antecedência Agendamentos"></app-slider>
            <app-slider [value]="120" [min]="30" [max]="240" [step]="30" title="Limite Agendamentos"></app-slider>
      <!-- Datapicker -->
        <div class="flex justify-end gap-4">
            <div class="col-sm-6 col-md-4 col-lg-3">
              <app-datapicker></app-datapicker>
            </div>
        <!-- Dropdown/Select -->
        <div class="col-sm-6 col-md-4 col-lg-3">
          <app-select-filter [dropdownOptions]="dropdownOptionsCampus" (selectedOption)="onOptionSelected($event)"></app-select-filter>
        </div>
      </div>
      <!-- Tabela  -->
      <app-table class="mb-5" [tableName]="'Gestão Reservas'" [tableData]="filteredReserva"></app-table>

        </div>

        <div *ngIf="ShowEspaco.valueOf()" class="flex flex-col">
          <h3>Espaços Esportivos</h3>
            <div class="flex justify-end">
              <div class="mr-2">
                <button class="br-button primary" type="button" aria-label="Controle Reserva">
                Criar Ginásio</button>
              </div>
              <div class="mr-2">
                <button class="br-button primary" type="button" aria-label="Controle Reserva">
                Criar Campus</button>
              </div>

              <div class="col-sm-6 col-md-4 col-lg-3">
                <app-select-filter [placeholder]="'Selecione um tipo'" [dropdownOptions]="dropdownOptionsTypeUsers" (selectedOption)="onOptionSelected($event)"></app-select-filter>
              </div>
            </div>
  
          <!-- Tabela  -->
          <app-table-espacos class="mb-5" [tableName]="'Gestão Espaços Esportivos'" [tableData]="espacos"></app-table-espacos>
        </div>

        <div *ngIf="ShowPermissao.valueOf()"  class="flex flex-col">
          <h3>Permissões</h3>
          <!-- Dropdown/Select -->
          <div class="flex justify-end gap-4">
            <div class="col-sm-6 col-md-4 col-lg-3">
              <app-select-filter [placeholder]="'Selecione um tipo'" [dropdownOptions]="dropdownOptionsTypeUsers" (selectedOption)="onOptionSelected($event)"></app-select-filter>
            </div>
          </div>

        <!-- Tabela  -->
        <app-table-users class="mb-5" [tableName]="'Gestão Usuários'" [tableData]="users"></app-table-users>

        </div>
</div>
</file>

<file path="src/app/core/pages/userschdeules/userschdeules.component.html">
<div class="flex flex-col justify-around">
    <!-- Datapicker -->
    <div class="flex justify-end gap-4">
      <div class="col-sm-6 col-md-4 col-lg-3">
        <app-datapicker></app-datapicker>
      </div>
      <!-- Dropdown/Select -->
      <div class="col-sm-6 col-md-4 col-lg-3">
        <app-select-filter [dropdownOptions]="dropdownOptions" (selectedOption)="onOptionSelected($event)"></app-select-filter>
      </div>
    </div>
    <!-- Tabela  -->
    <app-table class="mb-5" [tableName]="'Minhas Reservas'" [tableData]="filteredReserva"></app-table>
    <script src="node_modules/@govbr-ds/core/dist/core.min.js"></script>
  </div>

  <div class="fixed h-full w-full inset-0 bg-black bg-opacity-50 z-[999]" *ngIf="isModalOpen"></div>
  <div class="w-2/3 max-h-[90vh] fixed top-5 transform bg-white p-5 shadow-md z-[1000] overflow-y-auto" *ngIf="isModalOpen">
  <button class="absolute top-2 right-2 bg-transparent border-none text-xl cursor-pointer" (click)="fecharModalScheduleForm()">X</button>
  <app-schedule-form></app-schedule-form>
</div>
</file>

<file path="src/app/core/routes/app.routes.ts">
import { Routes } from '@angular/router';
import { ScheduleComponent } from '../pages/schedule/schedule.component';
import { UserschdeulesComponent } from '../pages/userschdeules/userschdeules.component';
import { ConfigurationComponent } from '../pages/configuration/configuration.component';
import { EmailCodeSendComponent } from '../pages/email-code-send/email-code-send.component';
import { AuthLayoutComponent } from '../layouts/auth-layout/auth-layout.component';
import { ScheduleLayoutComponent } from '../layouts/schedule-layout/schedule-layout.component';
import { authGuard } from '../guards/auth.guard';
import { EmailValidatorComponent } from '../pages/email-validator/email-validator.component';


export const routes: Routes = [
  {
    path: 'auth',
    component: AuthLayoutComponent,
    children: [
      { path: 'login', component: EmailCodeSendComponent },
      { path: 'register', component: EmailValidatorComponent },
      { path: '', redirectTo: 'login', pathMatch: 'full' }
    ]
  },
  

  {
    path: '',
    component: ScheduleLayoutComponent,
    canActivate: [authGuard], 
    children: [
      { path: '', redirectTo: '/reservas', pathMatch: 'full' },
      { path: 'reservas', component: ScheduleComponent },
      { path: 'minhas-reservas', component: UserschdeulesComponent },
      { path: 'configuracoes', component: ConfigurationComponent }
    ]
  },
  
  { path: '**', redirectTo: '/auth/login' }
];
</file>

<file path="src/app/core/services/schedule/schedules.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from '../auth/auth.service';
import { NewSchedule } from '../../models/NewSchedule';
import { ScheduleModel } from '../../models/ScheduleModel';
import { DeleteSchedule } from '../../models/DeleteSchedule';
import { Ginasio } from '../../models/Ginasio';
@Injectable({
  providedIn: 'root'
})
export class SchedulesService {
  private baseApiUrl = 'http://localhost:3000/v1/schedule'; // Usar proxy

  constructor(private http: HttpClient, private authService: AuthService) { }

  // Buscar agendamentos por data e ginásio
  getSchedules(data: string, ginasio: string | null): Observable<ScheduleModel[]> {
    var requestParams: any = { data, ginasio };
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.get<any[]>(`${this.baseApiUrl}`, { params: requestParams, headers });
  }


  // Criar novo agendamento
  createSchedule(scheduleData: NewSchedule): Observable<any> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.post(`${this.baseApiUrl}/create`, scheduleData, { headers });
  }

  // Deletar agendamento
  deleteSchedule(deleteRequest: DeleteSchedule): Observable<any> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.post(`${this.baseApiUrl}/delete`, deleteRequest, { headers });
  }

  // Buscar agendamentos por usuário
  getUserSchedules(matricula: string): Observable<ScheduleModel[]> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.get<ScheduleModel[]>(`${this.baseApiUrl}/${matricula}`, { headers });
  }

 // Buscar ginásios disponíveis
  getAvailableGyms(): Observable<Ginasio[]> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });
    
    return this.http.get<Ginasio[]>(`${this.baseApiUrl}/ginasio`, { headers });
  }

}
</file>

<file path="src/app/core/shared/header/header.component.ts">
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-header',
  imports: [],
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent {
  @Input() user: string = 'Fulano de Tal';
  randomColor: string = this.getRandomColor();

  getRandomColor(): string {
    const colors = [
      'bg-blue-50',
      'bg-red-50',
      'bg-orange-50'
    ];
    const randomIndex = Math.floor(Math.random() * colors.length);
    return colors[randomIndex];
  }
}
</file>

<file path="src/styles.css">
/* You can add global styles to this file, and also import other style files */
@import "tailwindcss";
</file>

<file path="src/app/app.component.ts">
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [
    RouterOutlet
],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'schedule-ufu';
}
</file>

<file path="src/app/core/components/schedule-form/schedule-form.component.ts">
import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { DropdownnComponent } from "../dropdownn/dropdownn.component";
import { option } from '../../models/Option';

@Component({
    selector: 'app-schedule-form',
    templateUrl: './schedule-form.component.html',
    styleUrls: ['./schedule-form.component.css'],
    imports: [CommonModule, ReactiveFormsModule, DropdownnComponent]
})
export class ScheduleFormComponent implements OnInit {
    scheduleForm!: FormGroup;
    horarioRecorrente: boolean = false;

    constructor(private fb: FormBuilder) { }

    ngOnInit(): void {
        this.scheduleForm = this.fb.group({
            campus: ['', Validators.required],
            ginasio: ['', Validators.required],
            horario: ['', [Validators.required]],
            terminaEm: [''],
            dataTermino: [''],
            ocorrencias: [''],
            responsavel: ['', Validators.required],
            curso: ['', Validators.required],
            matricula: ['', Validators.required],
            telefone: [
                '',
                [Validators.required, Validators.pattern(/^\(\d{2}\) \d{5}-\d{4}$/)],
            ],
            quantidade: ['', [Validators.required, Validators.min(1)]],
        });

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });
    }

    onSubmit(): void {
        // TODO: Implementar lógica de envio do formulário
        if (this.scheduleForm.valid) {
            console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
        }
    }

    getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'horario') {
                return 'Use o formato: DD/MM/AAAA - HH:MM às HH:MM.';
            }
            if (controlName === 'telefone') {
                return 'Use o formato: (XX) XXXXX-XXXX.';
            }
        }
        if (control?.hasError('min')) {
            return 'O valor deve ser maior que 0.';
        }
        return '';
    }

    onCampusSelected(selected: option): void {
        this.scheduleForm.get('campus')?.setValue(selected.value);
    }

    onGinasioSelected(selected: option): void {
        this.scheduleForm.get('ginasio')?.setValue(selected.value);
    }

    onHorarioRecorrente() {
        this.horarioRecorrente = !this.horarioRecorrente;
    }

    //dropdown options
    CampusOptions: Array<option> = [
        { id: 'santa-monica', value: 'Santa Mônica', label: 'Santa Mônica' },
        { id: 'faefi', value: 'FAEFI', label: 'FAEFI' },
    ];

    GinasioOptions: Array<option> = [
        { id: 'g1', value: 'G1', label: 'G1' },
        { id: 'g2', value: 'G2', label: 'G2' },
    ];
}
</file>

<file path="src/app/core/components/table/table.component.ts">
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';
import { ScheduleModel } from '../../models/ScheduleModel';

@Component({
  selector: 'app-table',
  imports: [CommonModule],
  templateUrl: './table.component.html',
  styleUrl: './table.component.css'
})
export class TableComponent {
  @Input() tableName: string = 'Tabela';
  @Input() tableData: ScheduleModel[] = [];

  constructor(private scheduleService: ScheduleTimeService) { }

}
</file>

<file path="src/app/core/shared/footer/footer.component.html">
<div class="flex justify-center items-center fixed bottom-0 left-0 h-1/10 w-full bg-[#071D41] text-white">
    <footer class="flex justify-center items-center" aria-label="Site Footer">
        <span class="text-muted" role="contentinfo">{{title}}</span>
    </footer>
</div>
</file>

<file path="src/app/core/pages/configuration/configuration.component.ts">
import { CommonModule } from '@angular/common';
import { Component, viewChild, viewChildren } from '@angular/core';
import { TableComponent } from '../../components/table/table.component';
import { DatapickerComponent } from '../../components/datapicker/datapicker.component';
import { SelectFilterComponent } from '../../components/select-filter/select-filter.component';
import { option } from '../../models/Option';
import { Action } from 'rxjs/internal/scheduler/Action';
import { SliderComponent } from "../../components/slider/slider.component";
import { TableUsersComponent } from "../../components/table-users/table-users.component";
import { User } from '../../models/User';
import { TableEspacosComponent } from "../../components/table-espacos/table-espacos.component";
import { Ginasio } from '../../models/Ginasio';
import { ScheduleModel } from '../../models/ScheduleModel';

@Component({
  selector: 'app-configuration',
  imports: [CommonModule, TableComponent, DatapickerComponent, SelectFilterComponent, SliderComponent, TableUsersComponent, TableEspacosComponent],
  templateUrl: './configuration.component.html',
  styleUrl: './configuration.component.css'
})
export class ConfigurationComponent {
  ShowGeral: boolean = true;
  ShowEspaco: boolean = false;
  ShowPermissao: boolean = false;

  espacos: Ginasio[] = [
  ];

  users: User[] = [
  ];

  reserva: ScheduleModel[] = [
  ];

  filteredReserva: ScheduleModel[] = [];
  selectedCampus: string = '';
  selectedLabel: string = '';
  
  dropdownOptionsCampus: Array<option> = [
    { id: 'todos', value: '', label: 'Todos' },
    { id: 'santa-monica', value: 'Santa Mônica', label: 'Santa Mônica' },
    { id: 'faefi', value: 'FAEFI', label: 'FAEFI' }
  ];

  dropdownOptionsTypeUsers: Array<option> = [
    { id: 'todos', value: '', label: 'Todos' },
    { id: 'admin', value: 'Administrador', label: 'Administrador' },
    { id: 'estudante', value: 'Estudante', label: 'Estudante' },
    { id: 'professor', value: 'Professor', label: 'Professor' },
    
  ];
  
  ngOnInit(): void {
    this.filteredReserva = this.reserva;
  }
  
  onOptionSelected(option: { value: string; label: string }): void {
    this.selectedCampus = option.value;
    this.selectedLabel = option.label;
    this.filterTable();
  }
  
  filterTable(): void {
    if (this.selectedCampus) {
      this.filteredReserva = this.reserva.filter(row => row.campus === this.selectedCampus);
    } else {
      this.filteredReserva = this.reserva;
    }
  }

  onTabSelect(active: string): void {
    switch (active) {
      case 'ShowPermissao':
        this.ShowGeral = false;
        this.ShowEspaco = false;
        this.ShowPermissao = true;
        break;
      case 'ShowEspaco':
        this.ShowGeral = false;
        this.ShowEspaco = true;
        this.ShowPermissao = false;
        break;
      default:
        this.ShowGeral = true;
        this.ShowEspaco = false;
        this.ShowPermissao = false;
        break;
    }
  }
}
</file>

<file path="src/app/core/pages/schedule/schedule.component.css">
@import url("https://cdngovbr-ds.estaleiro.serpro.gov.br/design-system/fonts/rawline/css/rawline.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.min.css");



/* CSS do Desing System do GOV */

.flatpickr-calendar {
  --flatpicker-padding: var(--spacing-scale-2x);
  --datetimepicker-day-size: 24px;
  --datetimepicker-arrows: 32px;
  box-shadow: var(--surface-shadow-md);
}

.flatpickr-calendar.arrowTop::before,
.flatpickr-calendar.arrowTop::after {
  border-color: transparent;
}

.flatpickr-calendar.open {
  z-index: var(--z-index-layer-2);
}

.flatpickr-calendar .flatpickr-months {
  align-items: center;
  display: flex;
  padding: var(--flatpicker-padding) var(--flatpicker-padding) 0;
}

.flatpickr-calendar .flatpickr-months .flatpickr-prev-month,
.flatpickr-calendar .flatpickr-months .flatpickr-next-month {
  height: auto;
  padding: 0;
  position: static;
}

.flatpickr-calendar .flatpickr-months .flatpickr-prev-month.flatpickr-disabled,
.flatpickr-calendar .flatpickr-months .flatpickr-next-month.flatpickr-disabled {
  cursor: not-allowed;
  opacity: var(--disabled);
  display: block;
}

.flatpickr-calendar .flatpickr-months .flatpickr-prev-month.flatpickr-disabled *,
.flatpickr-calendar .flatpickr-months .flatpickr-next-month.flatpickr-disabled * {
  pointer-events: none;
}

.flatpickr-calendar .flatpickr-months .flatpickr-month {
  flex: 1;
  height: auto;
  overflow: visible;
}

.flatpickr-calendar .flatpickr-months .flatpickr-current-month {
  display: flex;
  height: auto;
  padding: 0 var(--flatpicker-padding);
  position: static;
  width: 100%;
}

.flatpickr-calendar .flatpickr-months .flatpickr-monthDropdown-months {
  border-radius: var(--surface-rounder-sm);
  color: var(--interactive);
  font-size: var(--font-size-scale-up-01);
  font-weight: var(--font-weight-semi-bold);
  margin: 0;
  padding: 0;
}

.flatpickr-calendar .flatpickr-months .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month {
  color: var(--color);
}

.flatpickr-calendar .flatpickr-months .flatpickr-monthDropdown-months:hover {
  background: transparent;
}

.flatpickr-calendar .flatpickr-months .numInputWrapper {
  flex: 1;
  margin-left: var(--flatpicker-padding);
  width: auto;
}

.flatpickr-calendar .flatpickr-months .numInputWrapper input.cur-year {
  border: var(--surface-width-sm) solid var(--border-color);
  border-radius: var(--surface-rounder-sm);
  color: var(--color);
  font-size: var(--font-size-scale-base);
  font-weight: var(--font-weight-semi-bold);
  padding: 0 var(--spacing-scale-base);
}

.flatpickr-calendar .flatpickr-months .numInputWrapper span.arrowUp,
.flatpickr-calendar .flatpickr-months .numInputWrapper span.arrowDown {
  display: none;
}

.flatpickr-calendar .flatpickr-weekdaycontainer {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  padding: 0 var(--flatpicker-padding);
}

.flatpickr-calendar span.flatpickr-weekday {
  color: var(--color);
  font-size: var(--font-size);
  font-weight: var(--font-weight-medium);
}

.flatpickr-calendar .dayContainer {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  padding: 0 var(--flatpicker-padding) var(--flatpicker-padding);
}

.flatpickr-calendar .flatpickr-day {
  color: var(--interactive);
  font-weight: var(--font-weight-semi-bold);
  height: var(--datetimepicker-day-size);
  line-height: var(--font-line-height-medium);
  margin: calc(var(--flatpicker-padding) * 0.25) auto;
  max-width: var(--datetimepicker-day-size);
  width: var(--datetimepicker-day-size);
}

.flatpickr-calendar .flatpickr-day:focus {
  outline: none;
}

.flatpickr-calendar .flatpickr-day.focus-visible,
.flatpickr-calendar .flatpickr-day:focus-visible {
  outline-color: var(--focus);
  outline-offset: var(--focus-offset);
  outline-style: var(--focus-style);
  outline-width: var(--focus-width);
}

.flatpickr-calendar .flatpickr-day.focus-visible {
  --focus-offset: 0;
  background: transparent;
  border-color: transparent;
}

.flatpickr-calendar .flatpickr-day:hover {
  background: var(--hover-effect);
}

.flatpickr-calendar .flatpickr-day.prevMonthDay,
.flatpickr-calendar .flatpickr-day.nextMonthDay {
  font-weight: var(--font-weight-medium);
  opacity: 0.6;
}

.flatpickr-calendar .flatpickr-day.today {
  background: var(--orange-vivid-5);
  border-color: transparent;
  color: var(--red-warm-vivid-50);
}

.flatpickr-calendar .flatpickr-day.flatpickr-disabled {
  cursor: not-allowed;
  opacity: var(--disabled);
  color: var(--color);
}

.flatpickr-calendar .flatpickr-day.flatpickr-disabled * {
  pointer-events: none;
}

.flatpickr-calendar .flatpickr-day.flatpickr-disabled:hover {
  background: transparent;
}

.flatpickr-calendar .flatpickr-day.inRange {
  --interactive-rgb: var(--blue-warm-vivid-50-rgb);
  --hover: var(--hover-dark);
  background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover)), rgba(var(--interactive-rgb), var(--hover)));
  border-color: transparent;
  box-shadow: none;
  color: var(--color-dark);
  opacity: 1;
}

.flatpickr-calendar .flatpickr-day.selected,
.flatpickr-calendar .flatpickr-day.startRange,
.flatpickr-calendar .flatpickr-day.endRange {
  background: var(--selected);
  border-color: transparent;
  color: var(--color-dark);
  opacity: 1;
}

.flatpickr-calendar .flatpickr-time {
  display: flex;
  justify-content: center;
  margin: 0 var(--flatpicker-padding);
  max-height: none;
}

.flatpickr-calendar .flatpickr-time input {
  --input-background: var(--bg-color);
  --input-border-color: var(--color-secondary-06);
  --input-border-width: 1px;
  --input-border-style: solid;
  --input-padding: 0 var(--spacing-scale-half);
  --input-radius: var(--surface-rounder-sm);
  background: var(--input-background);
  border: var(--input-border-width) var(--input-border-style) var(--input-border-color);
  border-radius: var(--input-radius);
  color: var(--text-color);
  display: block;
  font-size: var(--font-size-scale-up-01);
  font-weight: var(--font-weight-medium);
  height: var(--input-size);
  padding: var(--input-padding);
  width: 100%;
  margin: calc(var(--flatpicker-padding) * 0.25) 0;
}

.flatpickr-calendar .flatpickr-time input:not(:disabled):hover {
  background-image: linear-gradient(rgba(var(--color-rgb), var(--hover)), rgba(var(--color-rgb), var(--hover)));
}

.flatpickr-calendar .flatpickr-time input:focus,
.flatpickr-calendar .flatpickr-time input:focus-visible,
.flatpickr-calendar .flatpickr-time input.focus-visible {
  border-color: var(--focus) !important;
  box-shadow: 0 0 0 var(--surface-width-md) var(--focus);
  outline: none;
}

.flatpickr-calendar .flatpickr-time input.has-icon {
  padding-right: var(--spacing-scale-5x);
}

.flatpickr-calendar .flatpickr-time input[type=password]::-ms-reveal,
.flatpickr-calendar .flatpickr-time input[type=password]::-ms-clear {
  display: none;
}

.flatpickr-calendar .flatpickr-time .numInputWrapper {
  align-items: center;
  display: flex;
  flex: 0 1 90px;
  flex-flow: column;
  height: auto;
  padding: calc(var(--flatpicker-padding) * 0.5) var(--flatpicker-padding);
}

.flatpickr-calendar .flatpickr-time .numInputWrapper:hover {
  background: transparent;
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span {
  align-items: center;
  border: 0;
  border-radius: 50px;
  color: var(--interactive);
  display: flex;
  height: var(--datetimepicker-arrows);
  justify-content: center;
  opacity: 1;
  padding: 0;
  position: static;
  width: var(--datetimepicker-arrows);
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span:not(:disabled):hover {
  background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover)), rgba(var(--interactive-rgb), var(--hover)));
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span::after {
  border: none;
  position: static;
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span.arrowUp {
  order: -1;
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span.arrowUp::after {
  transform: rotate(225deg) translate(-1px, -1px);
}

.flatpickr-calendar.hasTime .flatpickr-time {
  border-color: var(--border-color);
  height: auto;
}

.flatpickr-calendar.hasTime.noCalendar .flatpickr-time {
  border-color: transparent;
}

.br-datetimepicker.inverted .br-input,
.br-datetimepicker.inverted .br-input label,
.br-datetimepicker.dark-mode .br-input,
.br-datetimepicker.dark-mode .br-input label {
  --color: var(--color-dark);
  --focus-color: var(--focus-color-dark);
}

.br-datetimepicker input[disabled] {
  cursor: not-allowed;
}

button.close-button {
  background-color: transparent;
  border: none;
  margin-right: 4px;
  color: var(--interactive);
  font-size: 1.5rem;
  font-weight: bold;
  cursor: pointer;
  transition: color 0.3s ease;
}

button.close-button:hover {
  color: red;
}

button.close-button:focus {
  outline: 2px solid var(--focus);
  outline-offset: 2px;
}
</file>

<file path="src/app/core/pages/schedule/schedule.component.ts">
import { Component, AfterViewInit, ElementRef, ViewChild, Renderer2 } from '@angular/core';;
import { CommonModule } from '@angular/common';
import { TableComponent } from "../../components/table/table.component";
import { SelectFilterComponent } from "../../components/select-filter/select-filter.component";
import { option } from '../../models/Option';
import { DatapickerComponent } from "../../components/datapicker/datapicker.component";
import { ScheduleFormComponent } from '../../components/schedule-form/schedule-form.component';
import { ReactiveFormsModule } from '@angular/forms';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';
import { SchedulesService } from '../../services/schedule/schedules.service';
import { ScheduleModel } from '../../models/ScheduleModel';
import { Ginasio } from '../../models/Ginasio';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';

@Component({
  selector: 'app-schedule',
  imports: [CommonModule, TableComponent, SelectFilterComponent, DatapickerComponent, ScheduleFormComponent, ReactiveFormsModule],
  templateUrl: './schedule.component.html',
  styleUrls: ['./schedule.component.css']
})
export class ScheduleComponent {
  Ginasios: Ginasio[] = [];
  isModalOpen: boolean = false;
  selectedDate: string = ''; // Data selecionada no datapicker
  selectedGym: string | null = null; // Ginásio selecionado

  @ViewChild('modalForm', { static: false }) modalForm!: ElementRef;
  @ViewChild('modalOverlay', { static: false }) modalOverlay!: ElementRef;

  constructor(private renderer: Renderer2, private scheduleTimeService: ScheduleTimeService, private ScheduleService: SchedulesService, private LayoutService: LayoutSchedulesService) { 
    this.Ginasios = this.LayoutService.getGinasios();
    this.selectedDate = new Date().toISOString().split('T')[0]; // Formato YYYY-MM-DD
    this.scheduleTimeService.horarioDisponivelClicadoEmitter.subscribe(() => {
      this.abrirModalScheduleForm();
    });
  }

  // Variáveis para o filtro e lista a ser mostrada
  selectedLabel: string = "Selecione o Ginásio para filtrar";
  agendamentos: ScheduleModel[] = []; // Lista de reservas vindas da API
  dropdownOptions: Array<option> = []; // Opções do dropdown

  

  ngOnInit(): void {
    this.Ginasios.map(ginasio => {
      this.dropdownOptions.push({
        id: ginasio.nome,
        value: ginasio.nome,
        label: ginasio.nome
      });
    });
    this.loadSchedules(); // Carregar agendamentos ao inicializar
  }

  // Método para capturar a data selecionada no datapicker
  onDateSelected(date: string): void {
    this.selectedDate = date;
    console.log('Data selecionada:', date);
    this.loadSchedules(); // Recarregar agendamentos quando a data mudar
  }

  // Carregar agendamentos baseado na data e ginásio selecionados
  loadSchedules(): void {
    if (this.selectedDate) {
      this.ScheduleService.getSchedules(this.selectedDate, this.selectedGym).subscribe({
        next: (schedules) => {
          console.log('Agendamentos carregados:', schedules);
          this.agendamentos = schedules;
        },
        error: (error) => {
          console.error('Erro ao carregar agendamentos:', error);
        }
      });
    }
  }

  //Exibição da lista
  onOptionSelected(option: option) {
    this.selectedGym = option.value;
    this.selectedLabel = option.label;
    this.loadSchedules(); 
  }

  abrirModalScheduleForm(): void {
    this.isModalOpen = true;

    if (this.modalForm?.nativeElement) {
      this.renderer.setStyle(this.modalForm.nativeElement, 'display', 'block');
    }

    if (this.modalOverlay?.nativeElement) {
      this.renderer.setStyle(this.modalOverlay.nativeElement, 'display', 'block');
    }
  }

  fecharModalScheduleForm(): void {
    this.isModalOpen = false;
    this.renderer.setStyle(this.modalForm.nativeElement, 'display', 'none');
    this.renderer.setStyle(this.modalOverlay.nativeElement, 'display', 'none');
  }

}
</file>

<file path="src/app/core/pages/userschdeules/userschdeules.component.ts">
import { Component, ElementRef, OnInit, ViewChild, Renderer2, Inject, Input } from '@angular/core';
import { TableComponent } from '../../components/table/table.component';
import { DatapickerComponent } from '../../components/datapicker/datapicker.component';
import { SelectFilterComponent } from '../../components/select-filter/select-filter.component';
import { CommonModule } from '@angular/common';
import { option } from '../../models/Option';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';
import { ScheduleFormComponent } from "../../components/schedule-form/schedule-form.component";
import { ScheduleModel } from '../../models/ScheduleModel';
import { SchedulesService } from '../../services/schedule/schedules.service';
import { AuthService } from '../../services/auth/auth.service';
import { Ginasio } from '../../models/Ginasio';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { UserData } from '../../models/UserData';

@Component({
  selector: 'app-userschdeules',
  templateUrl: './userschdeules.component.html',
  styleUrl: './userschdeules.component.css',
  imports: [CommonModule, TableComponent, DatapickerComponent, SelectFilterComponent, ScheduleFormComponent]
})
export class UserschdeulesComponent implements OnInit {
    isModalOpen: boolean = false;
    Ginasios: Ginasio[] = [];
    user: UserData | null = null;

    @ViewChild('modalForm', { static: false }) modalForm!: ElementRef;
    @ViewChild('modalOverlay', { static: false }) modalOverlay!: ElementRef;

      constructor(
        private renderer: Renderer2, 
        @Inject(ScheduleTimeService) private scheduleTimeService: ScheduleTimeService, 
        @Inject(SchedulesService) private ScheduleService: SchedulesService, 
        @Inject(AuthService) private authService: AuthService,
        @Inject(LayoutSchedulesService) private LayoutService: LayoutSchedulesService
      ) {
        this.Ginasios = this.LayoutService.getGinasios();
        this.user = this.authService.getUser();
        this.scheduleTimeService.horarioDisponivelClicadoEmitter.subscribe(() => {
          this.abrirModalScheduleForm();
        });
      }



  filteredReserva: ScheduleModel[] = [];
  selectedGinasio: string = '';
  selectedLabel: string = "Selecione o Ginasio para filtrar";
  agendamentos: ScheduleModel[] = []; // Lista de reservas vindas da API
  dropdownOptions: Array<option> = [
  ];

  ngOnInit(): void { 
    this.Ginasios.map(ginasio => {
      this.dropdownOptions.push({
        id: ginasio.nome,
        value: ginasio.nome,
        label: ginasio.nome
      });
    });
    this.loadSchedules(); // Carregar agendamentos ao inicializar
    this.filterTable(); // Filtrar tabela inicialmente
   }

  onOptionSelected(option: { value: string; label: string }): void {
    this.selectedGinasio = option.value;
    this.selectedLabel = option.label;
    this.filterTable();
  }

  filterTable(): void {
    if (this.selectedGinasio) {
      this.filteredReserva = this.agendamentos.filter(row => row.campus === this.selectedGinasio);
    } else {
      this.filteredReserva = this.agendamentos;
    }
  }

    loadSchedules(): void {
      if (this.user && this.user.matricula) {
        this.ScheduleService.getUserSchedules(this.user.matricula).subscribe({
          next: (schedules) => {
            console.log('Agendamentos carregados:', schedules);
            this.agendamentos = schedules;
            this.filterTable();
          },
          error: (error) => {
            console.error('Erro ao carregar agendamentos:', error);
          }
        });
      } else {
        alert("Login não realizado ou usuário não definido.");
        console.error('Usuário ou matrícula não definida.');
      }
    }

  
  abrirModalScheduleForm(): void {
    this.isModalOpen = true;

    if (this.modalForm?.nativeElement) {
      this.renderer.setStyle(this.modalForm.nativeElement, 'display', 'block');
    }

    if (this.modalOverlay?.nativeElement) {
      this.renderer.setStyle(this.modalOverlay.nativeElement, 'display', 'block');
    }
  }

  fecharModalScheduleForm(): void {
    this.isModalOpen = false;
    this.renderer.setStyle(this.modalForm.nativeElement, 'display', 'none');
    this.renderer.setStyle(this.modalOverlay.nativeElement, 'display', 'none');
  }
}
</file>

<file path="src/app/app.component.html">
<router-outlet></router-outlet>
</file>

<file path="src/app/core/pages/schedule/schedule.component.html">
<div class="flex flex-col justify-around">
  <!-- Datapicker -->
  <div class="flex justify-end gap-4">
    <div class="col-sm-6 col-md-4 col-lg-3">
      <app-datapicker [selectedDate]="selectedDate" (dateSelected)="onDateSelected($event)"></app-datapicker>
    </div>
    <!-- Dropdown/Select -->
    <div class="col-sm-6 col-md-4 col-lg-3">
      <app-select-filter [dropdownOptions]="dropdownOptions"
        (selectedOption)="onOptionSelected($event)"></app-select-filter>
    </div>
  </div>
  <!-- Tabela  -->
  <app-table class="mb-5" [tableName]="'Agendamentos'" [tableData]="agendamentos"></app-table>
  <script src="node_modules/@govbr-ds/core/dist/core.min.js"></script>
</div>

<div class="fixed h-full w-full inset-0 bg-black bg-opacity-50 z-[999]" *ngIf="isModalOpen"></div>
<div class="w-2/3 max-h-[90vh] fixed top-5 transform bg-white p-5 shadow-md z-[1000] overflow-y-auto"
  *ngIf="isModalOpen">
  <button class="absolute top-2 right-2 close-button" (click)="fecharModalScheduleForm()">X</button>
  <app-schedule-form></app-schedule-form>
</div>
</file>

<file path="src/app/core/shared/header/header.component.css">
/* CSS do Desing System do GOV */

.br-avatar {
  --avatar-size: var(--avatar-small);
  --avatar-icon-size: var(--avatar-icon-small);
  --avatar-text-size: var(--avatar-text-small);
  --avatar-small: 40px;
  --avatar-icon-small: var(--icon-size-2x);
  --avatar-icon-medium: var(--icon-size-5x);
  --avatar-icon-large: var(--icon-size-8x);
  --avatar-text-small: 18px;
  --avatar-text-medium: var(--font-size-scale-up-07);
  --avatar-text-large: var(--font-size-scale-up-11);
  align-items: center;
  border-color: #000;
  display: inline-flex;
  font-size: var(--avatar-text-size);
  font-weight: var(--font-weight-bold);
  justify-content: center;
  line-height: var(--avatar-size);
  vertical-align: middle;
}

.br-avatar .content {
  align-items: center;
  border-radius: 100%;
  display: inline-flex;
  font-size: var(--avatar-text-size);
  height: var(--avatar-size);
  justify-content: center;
  overflow: hidden;
  text-align: center;
  text-transform: uppercase;
  vertical-align: inherit;
  width: var(--avatar-size);
}

.br-avatar .content img {
  height: var(--avatar-size);
  vertical-align: inherit;
  width: var(--avatar-size);
}

.br-avatar .content .svg-inline--fa,
.br-avatar .content .fa,
.br-avatar .content .fab,
.br-avatar .content .fad,
.br-avatar .content .fal,
.br-avatar .content .far,
.br-avatar .content .fas {
  --icon-size: var(--avatar-icon-size);
  margin-top: 0.25em;
}

.br-avatar.is-small,
.br-avatar.small,
.br-avatar[small] {
  --avatar-size: var(--avatar-small);
  --avatar-icon-size: var(--avatar-icon-small);
  --avatar-text-size: var(--avatar-text-small);
}

.br-avatar.is-medium,
.br-avatar.medium,
.br-avatar[medium] {
  --avatar-size: var(--avatar-medium);
  --avatar-icon-size: var(--avatar-icon-medium);
  --avatar-text-size: var(--avatar-text-medium);
}

.br-avatar.is-large,
.br-avatar.large,
.br-avatar[large] {
  --avatar-size: var(--avatar-large);
  --avatar-icon-size: var(--avatar-icon-large);
  --avatar-text-size: var(--avatar-text-large);
}

.br-avatar-action {
  background: transparent;
  border: 0;
}

.br-avatar-action:not(:disabled):hover {
  background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover)), rgba(var(--interactive-rgb), var(--hover)));
}

.br-avatar-action:focus {
  outline: none;
}

.br-avatar-action.focus-visible,
.br-avatar-action:focus-visible {
  outline-color: var(--focus);
  outline-offset: var(--focus-offset);
  outline-style: var(--focus-style);
  outline-width: var(--focus-width);
}

.br-avatar[data-toggle=dropdown]:focus {
  outline: none;
}

.br-avatar[data-toggle=dropdown].focus-visible,
.br-avatar[data-toggle=dropdown]:focus-visible {
  outline-color: var(--focus);
  outline-offset: var(--focus-offset);
  outline-style: var(--focus-style);
  outline-width: var(--focus-width);
}

.br-avatar .image,
.br-avatar .letter {
  align-items: center;
  background-color: var(--blue-10);
  border-radius: 50%;
  color: var(--blue-warm-20);
  display: inline-flex;
  font-size: var(--avatar-text-size);
  height: var(--avatar-size);
  justify-content: center;
  overflow: hidden;
  text-align: center;
  text-transform: uppercase;
  vertical-align: inherit;
  width: var(--avatar-size);
}

.br-avatar .image img,
.br-avatar .letter img {
  height: var(--avatar-size);
  vertical-align: inherit;
  width: var(--avatar-size);
}

.br-avatar .image .svg-inline--fa,
.br-avatar .image .fa,
.br-avatar .image .fab,
.br-avatar .image .fad,
.br-avatar .image .fal,
.br-avatar .image .far,
.br-avatar .image .fas,
.br-avatar .letter .svg-inline--fa,
.br-avatar .letter .fa,
.br-avatar .letter .fab,
.br-avatar .letter .fad,
.br-avatar .letter .fal,
.br-avatar .letter .far,
.br-avatar .letter .fas {
  --icon-size: var(--avatar-icon-size);
  margin-top: 0.25em;
}

.ufu-image {
  content: url("../../../../../assets/image-logo.png");
  background-size: cover;
  max-width: 5%;
}

/*# sourceMappingURL=avatar.css.map*/
</file>

<file path="src/app/core/components/schedule-form/schedule-form.component.html">
<div class="container mt-4">
    <h2>Reserva de horário</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 1: Campus e Ginásio -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <app-dropdownn field="Campus (Obrigatório)" [dropdownOptions]="CampusOptions"
                    (selectedOption)="onCampusSelected($event)"></app-dropdownn>
            </div>
            <div class="col-sm-6 mb-3">
                <app-dropdownn field="Ginásio (Obrigatório)" [dropdownOptions]="GinasioOptions"
                    (selectedOption)="onGinasioSelected($event)"></app-dropdownn>
            </div>
        </div>

        <!-- Linha 2: Horário -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-datetimepicker" data-mode="single" data-type="datetime-local">
                    <div class="br-input has-icon"
                        [class.invalid]="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched">
                        <label for="dateandtime-input">Horário</label>
                        <input id="dateandtime-input" type="datetime-local" formControlName="horario" />
                    </div>
                    <div *ngIf="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('horario') }}
                    </div>
                </div>
                <div class="form-check mt-2">
                    <input type="checkbox" id="horarioRepetido" class="form-check-input"
                        (click)="onHorarioRecorrente()" />
                    <label for="horarioRepetido" class="form-check-label">Horário Semanal Recorrente</label>
                </div>

                <!-- Campos adicionais para recorrência -->
                <div *ngIf="horarioRecorrente" class="mt-3">
                    <label class="br-label">Termina em</label>
                    <div class="row">
                        <!-- Opção "Nunca" -->
                        <div class="col-sm-12 mb-2" style="margin-top: 14px;">
                            <div class="br-radio">
                                <input type="radio" id="terminaNunca" name="terminaEm" value="nunca"
                                    formControlName="terminaEm" class="br-radio-input" />
                                <label for="terminaNunca" class="br-radio-label">Nunca</label>
                            </div>
                        </div>

                        <!-- Opção "Em" -->
                        <div class="col-sm-12 mb-2">
                            <div class="br-radio">
                                <input type="radio" id="terminaEm" name="terminaEm" value="data"
                                    formControlName="terminaEm" class="br-radio-input" />
                                <label for="terminaEm" class="br-radio-label">Em</label>
                            </div>
                            <!-- Date picker para a opção "Em" -->
                            <div *ngIf="scheduleForm.get('terminaEm')?.value === 'data'" class="mt-2">
                                <div class="br-input">
                                    <label for="dataTermino">Selecione a data de término: </label>
                                    <input id="dataTermino" type="date" formControlName="dataTermino" />
                                </div>
                            </div>
                        </div>

                        <!-- Opção "Após" -->
                        <div class="col-sm-12 mb-2">
                            <div class="br-radio">
                                <input type="radio" id="terminaApos" name="terminaEm" value="ocorrencias"
                                    formControlName="terminaEm" class="br-radio-input" />
                                <label for="terminaApos" class="br-radio-label">Após</label>
                            </div>
                            <!-- Campo de quantidade para a opção "Após" -->
                            <div *ngIf="scheduleForm.get('terminaEm')?.value === 'ocorrencias'" class="mt-2">
                                <div class="br-input">
                                    <label for="quantidadeOcorrencias">Quantidade de ocorrências</label>
                                    <input id="quantidadeOcorrencias" type="number"
                                        formControlName="quantidadeOcorrencias" placeholder="Ex.: 5" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Linha 3: Responsável -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input large input-button"
                    [class.invalid]="scheduleForm.get('responsavel')?.invalid && scheduleForm.get('responsavel')?.touched">
                    <label for="input-search-responsavel">Responsável (Obrigatório)</label>
                    <input id="input-search-responsavel" type="search" placeholder="Digite o nome do responsável"
                        formControlName="responsavel" />
                    <button class="br-button" type="button" aria-label="Buscar">
                        <i class="fas fa-search" aria-hidden="true"></i>
                    </button>
                </div>
                <div *ngIf="scheduleForm.get('responsavel')?.invalid && scheduleForm.get('responsavel')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('responsavel') }}
                </div>
            </div>
        </div>

        <!-- Linha 4: Curso e Matrícula -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="curso">Curso</label>
                    <input id="curso" type="text" formControlName="curso"
                        placeholder="Preenchido automaticamente ao selecionar o responsável" />
                </div>
                <div *ngIf="scheduleForm.get('curso')?.invalid && scheduleForm.get('curso')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('curso') }}
                </div>
            </div>
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="matricula">Matrícula</label>
                    <input id="matricula" type="text" formControlName="matricula"
                        placeholder="Preenchido automaticamente ao selecionar o responsável"
                        [class.invalid]="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('matricula') }}
                </div>
            </div>
        </div>

        <!-- Linha 5: Telefone -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input"
                    [class.invalid]="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched">
                    <label for="telefone">Telefone</label>
                    <input id="telefone" type="text" formControlName="telefone" placeholder="Digite o telefone" />
                    <div *ngIf="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('telefone') }}
                    </div>
                </div>
            </div>
        </div>

        <!-- Linha 6: Quantidade de Pessoas -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input"
                    [class.invalid]="scheduleForm.get('quantidade')?.invalid && scheduleForm.get('quantidade')?.touched">
                    <label for="quantidade">Quantidade de Pessoas (Obrigatório)</label>
                    <input id="quantidade" type="number" formControlName="quantidade" placeholder="Ex.: 11" />
                    <div *ngIf="scheduleForm.get('quantidade')?.invalid && scheduleForm.get('quantidade')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('quantidade') }}
                    </div>
                </div>
            </div>
        </div>

        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-between gap-3">
                <button type="button" class="br-button danger" style="background-color: red; color: white;">Cancelar
                    reserva</button>
                <div>
                    <button type="button" class="br-button secondary">Cancelar</button>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Reservar
                        horário</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/shared/header/header.component.html">
<div class="flex justify-between items-center bg-white pl-4 m-0 h-20">
    <div class="flex items-center">
        <img class="ufu-image m-4" alt="Logo UFU">
        <div class="divisor"> | </div>
        <h2 class="pl-2">Centro Esportivo Universitário UFU</h2>
    </div>
    <div class="flex items-center mr-2">
        <span class="br-avatar small mr-3" title="{{ user }}">
            <span class="{{ randomColor }} content bg-white">{{ user.charAt(0) }}</span>
        </span>
    </div>
</div>
</file>

</files>
</file>

<file path="src/app/app.component.spec.ts">
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'schedule-ufu' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('schedule-ufu');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, schedule-ufu');
  });
});
</file>

<file path="src/app/core/components/adm-form/adm-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AdmFormComponent } from './adm-form.component';

describe('AdmFormComponent', () => {
  let component: AdmFormComponent;
  let fixture: ComponentFixture<AdmFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AdmFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(AdmFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/datapicker/datapicker.component.html">
<div class="br-datetimepicker" data-mode="single" data-type="text">
    <div class="br-input has-icon">
      <input id="simples-input" type="text" placeholder="exemplo: 02/02/2024" data-input="data-input" />
      <button class="br-button circle small" type="button" aria-label="Abrir Timepicker" data-toggle="data-toggle"
        id="simples-input-btn" tabindex="-1" aria-hidden="true">
        <i class="fas fa-calendar-alt" aria-hidden="true"></i>
      </button>
    </div>
  </div>
</file>

<file path="src/app/core/components/datapicker/datapicker.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DatapickerComponent } from './datapicker.component';

describe('DatapickerComponent', () => {
  let component: DatapickerComponent;
  let fixture: ComponentFixture<DatapickerComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DatapickerComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DatapickerComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/delete-schedule-form/delete-schedule-form.component.css">
.container {
    max-width: 100%;
    margin: 0 auto;
    padding: 0 15px;
    box-sizing: border-box;
}

.feedback {
    font-size: 0.875rem;
    margin-top: 5px;
    min-height: 20px;
    visibility: hidden;
}

.feedback.danger {
    visibility: visible;
}

.row {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
}

.col-sm-6,
.col-sm-12 {
    flex: 1 1 calc(50% - 15px);
    max-width: calc(100% - 15px);
}

.col-sm-12 {
    flex: 1 1 100%;
    max-width: 100%;
}

.d-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.br-label {
    margin-bottom: 8px;
}

.time-label {
    margin-bottom: 8px;
}

.form-check-label {
    margin-left: 4px;
}

.form-check-input {
    margin: 0;
}
</file>

<file path="src/app/core/components/delete-schedule-form/delete-schedule-form.component.html">
<div class="container mt-4">
    <h2>Excluir horário</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 1: Campus e Ginásio -->
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="matricula">Matrícula</label>
                    <input id="matricula" type="text" formControlName="matricula"
                        placeholder="Matrícula do responsável" [class.invalid]="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('matricula') }}
                </div>
            </div>
            <div class="col-sm-6 mb-3">
                <app-dropdownn field="Ginásio (Obrigatório)" [dropdownOptions]="GinasioOptions"
                    (selectedOption)="onGinasioSelected($event)"></app-dropdownn>
            </div>

        <!-- Linha 2: Horário -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-datetimepicker" data-mode="single" data-type="datetime-local">
                    <div class="br-input has-icon"
                        [class.invalid]="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched">
                        <label for="dateandtime-input">Horário</label>
                        <input id="dateandtime-input" type="datetime-local" formControlName="horario" />
                    </div>
                    <div *ngIf="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('horario') }}
                    </div>
                </div>
            
            </div>
        </div>
        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-end gap-3">
                <div>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Excluir
                        horário</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/components/delete-schedule-form/delete-schedule-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DeleteScheduleFormComponent } from './delete-schedule-form.component';

describe('DeleteScheduleFormComponent', () => {
  let component: DeleteScheduleFormComponent;
  let fixture: ComponentFixture<DeleteScheduleFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DeleteScheduleFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DeleteScheduleFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/dropdownn/dropdownn.component.html">
<div class="br-select">
    <div class="br-input">
    <label for="select-ginasio">{{field}}</label>
      <input id="select-simple" type="text" [value]="selectedLabel" placeholder="{placeholder}"
        readonly />
      <button class="br-button" type="button" aria-label="Exibir lista" (click)="toggleDropdown()" tabindex="-1"
        data-trigger="data-trigger">
        <i class="fas fa-angle-down" aria-hidden="true"></i>
      </button>
    </div>
    <div [ngClass]="{'hidden': !isDropdownOpen}" style="position: absolute;z-index: 1000;" tabindex="0">
      <div class="br-item" tabindex="-1" *ngFor="let option of dropdownOptions"
        (click)="onDropdownChange(option.value)">
        <div class="br-radio">
          <input [id]="option.id" type="radio" name="actions" [value]="option.value"
            [checked]="selectedCampus === option.value" />
          <label [for]="option.id">{{ option.label }}</label>
        </div>
      </div>
    </div>
  </div>
</file>

<file path="src/app/core/components/dropdownn/dropdownn.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DropdownnComponent } from './dropdownn.component';

describe('DropdownnComponent', () => {
  let component: DropdownnComponent;
  let fixture: ComponentFixture<DropdownnComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DropdownnComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DropdownnComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/generic-modal/generic-modal.component.css">
.modal-overlay {
  transition: opacity 0.3s ease;
  backdrop-filter: blur(2px);
}

.modal-content {
  animation: modalFadeIn 0.3s ease;
}

@keyframes modalFadeIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

.close-button {
  transition: all 0.2s ease;
}

.close-button:hover {
  background-color: #f1f5f9;
  transform: scale(1.1);
}

.close-button:focus {
  outline: 2px solid #3b82f6;
  outline-offset: 2px;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .modal-content {
    margin: 1rem;
    max-width: calc(100vw - 2rem);
    max-height: calc(100vh - 2rem);
  }
}

/* Ensure modal appears above everything */
.modal-container {
  z-index: 9999;
}

/* Smooth scrolling for modal content */
.modal-body {
  scroll-behavior: smooth;
}
</file>

<file path="src/app/core/components/generic-modal/generic-modal.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { GenericModalComponent } from './generic-modal.component';

describe('GenericModalComponent', () => {
  let component: GenericModalComponent;
  let fixture: ComponentFixture<GenericModalComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [GenericModalComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(GenericModalComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/ginasio-form-delete/ginasio-form-delete.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { GinasioFormDeleteComponent } from './ginasio-form-delete.component';

describe('GinasioFormDeleteComponent', () => {
  let component: GinasioFormDeleteComponent;
  let fixture: ComponentFixture<GinasioFormDeleteComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [GinasioFormDeleteComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(GinasioFormDeleteComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/ginasio-form/ginasio-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { GinasioFormComponent } from './ginasio-form.component';

describe('GinasioFormComponent', () => {
  let component: GinasioFormComponent;
  let fixture: ComponentFixture<GinasioFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [GinasioFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(GinasioFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/restricao-form-delete/restricao-form-delete.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RestricaoFormDeleteComponent } from './restricao-form-delete.component';

describe('RestricaoFormDeleteComponent', () => {
  let component: RestricaoFormDeleteComponent;
  let fixture: ComponentFixture<RestricaoFormDeleteComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RestricaoFormDeleteComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(RestricaoFormDeleteComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/restricao-form/restricao-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RestricaoFormComponent } from './restricao-form.component';

describe('RestricaoFormComponent', () => {
  let component: RestricaoFormComponent;
  let fixture: ComponentFixture<RestricaoFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RestricaoFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(RestricaoFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/select-filter/select-filter.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SelectFilterComponent } from './select-filter.component';

describe('SelectFilterComponent', () => {
  let component: SelectFilterComponent;
  let fixture: ComponentFixture<SelectFilterComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SelectFilterComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SelectFilterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/slider/slider.component.css">
mat-slider {
    width: 300px;
  }
</file>

<file path="src/app/core/components/slider/slider.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SliderComponent } from './slider.component';

describe('SliderComponent', () => {
  let component: SliderComponent;
  let fixture: ComponentFixture<SliderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [SliderComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(SliderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/table-espacos/table-espacos.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TableEspacosComponent } from './table-espacos.component';

describe('TableEspacosComponent', () => {
  let component: TableEspacosComponent;
  let fixture: ComponentFixture<TableEspacosComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TableEspacosComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TableEspacosComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/table-restricao/table-restricao.component.html">
<!-- Tabela  -->
<div title="{{tableName}}">
    <div class="table-header">
      <div class="top-bar">
        <h3 class="table-title">{{tableName}}</h3>
      </div>
    </div>
    <div class="tabela-horarios">
      <table>
        <thead>
          <th class="border-right text-center" scope="col">Nome</th>
          <th class="border-right text-center" scope="col">Dia</th>
          <th class="border-right text-center" scope="col">Descrição</th>
        </thead>
        <tbody>
          <tr *ngFor="let row of tableData">
            <td class="text-center">{{ row.ginasio }}</td>
            <td class="text-center">{{ row.data }}</td>
            <td class="text-center">{{ row.descricao }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</file>

<file path="src/app/core/components/table-restricao/table-restricao.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TableRestricaoComponent } from './table-restricao.component';

describe('TableRestricaoComponent', () => {
  let component: TableRestricaoComponent;
  let fixture: ComponentFixture<TableRestricaoComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TableRestricaoComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TableRestricaoComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/table-restricao/table-restricao.component.ts">
import { Component, Input } from '@angular/core';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service'
import { Restricao } from '../../models/Restricao';
import { CommonModule } from '@angular/common';
@Component({
  selector: 'app-table-restricao',
  imports: [CommonModule],
  templateUrl: './table-restricao.component.html',
  styleUrl: './table-restricao.component.css',
})
export class TableRestricaoComponent {
  @Input() tableName: string = 'Tabela';
  @Input() tableData: Restricao[] = [];

  constructor(private scheduleService: ScheduleTimeService) { }
  onDisponivelClick(row: Restricao): void {
      this.scheduleService.abrirModalScheduleForm();
  }

}
</file>

<file path="src/app/core/components/table-users/table-users.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TableUsersComponent } from './table-users.component';

describe('TableUsersComponent', () => {
  let component: TableUsersComponent;
  let fixture: ComponentFixture<TableUsersComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TableUsersComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TableUsersComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/table/table.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TableComponent } from './table.component';

describe('TableComponent', () => {
  let component: TableComponent;
  let fixture: ComponentFixture<TableComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [TableComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(TableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/user-schedule-delete/user-schedule-delete.component.css">
.container {
    max-width: 100%;
    margin: 0 auto;
    padding: 0 15px;
    box-sizing: border-box;
}

.feedback {
    font-size: 0.875rem;
    margin-top: 5px;
    min-height: 20px;
    visibility: hidden;
}

.feedback.danger {
    visibility: visible;
}

.row {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
}

.col-sm-6,
.col-sm-12 {
    flex: 1 1 calc(50% - 15px);
    max-width: calc(100% - 15px);
}

.col-sm-12 {
    flex: 1 1 100%;
    max-width: 100%;
}

.d-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.br-label {
    margin-bottom: 8px;
}

.time-label {
    margin-bottom: 8px;
}

.form-check-label {
    margin-left: 4px;
}

.form-check-input {
    margin: 0;
}
</file>

<file path="src/app/core/components/user-schedule-delete/user-schedule-delete.component.html">
<div class="container mt-4">
    <h2>Excluir horário</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 1: Campus e Ginásio -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <app-dropdownn field="Ginásio (Obrigatório)" [dropdownOptions]="GinasioOptions"
                    (selectedOption)="onGinasioSelected($event)"></app-dropdownn>
            </div>
        </div>

        <!-- Linha 2: Horário -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-datetimepicker" data-mode="single" data-type="datetime-local">
                    <div class="br-input has-icon"
                        [class.invalid]="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched">
                        <label for="dateandtime-input">Horário</label>
                        <input id="dateandtime-input" type="datetime-local" formControlName="horario" />
                    </div>
                    <div *ngIf="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('horario') }}
                    </div>
                </div>
            
            </div>
        </div>
        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-end gap-3">
                <div>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Excluir
                        horário</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/components/user-schedule-delete/user-schedule-delete.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserScheduleDeleteComponent } from './user-schedule-delete.component';

describe('UserScheduleDeleteComponent', () => {
  let component: UserScheduleDeleteComponent;
  let fixture: ComponentFixture<UserScheduleDeleteComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [UserScheduleDeleteComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UserScheduleDeleteComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/components/user-schedule-form/user-schedule-form.component.css">
.container {
    max-width: 100%;
    margin: 0 auto;
    padding: 0 15px;
    box-sizing: border-box;
}

.feedback {
    font-size: 0.875rem;
    margin-top: 5px;
    min-height: 20px;
    visibility: hidden;
}

.feedback.danger {
    visibility: visible;
}

.row {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
}

.col-sm-6,
.col-sm-12 {
    flex: 1 1 calc(50% - 15px);
    max-width: calc(100% - 15px);
}

.col-sm-12 {
    flex: 1 1 100%;
    max-width: 100%;
}

.d-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.br-label {
    margin-bottom: 8px;
}

.time-label {
    margin-bottom: 8px;
}

.form-check-label {
    margin-left: 4px;
}

.form-check-input {
    margin: 0;
}
</file>

<file path="src/app/core/components/user-schedule-form/user-schedule-form.component.html">
<div class="container mt-4">
    <h2>Reserva de horário</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 2: Horário -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-datetimepicker" data-mode="single" data-type="datetime-local">
                    <div class="br-input has-icon"
                        [class.invalid]="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched">
                        <label for="dateandtime-input">Horário</label>
                        <input id="dateandtime-input" type="datetime-local" formControlName="horario"  />
                    </div>
                    <div *ngIf="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('horario') }}
                    </div>
                </div>
                <div class="form-check mt-2">
                    <input type="checkbox" id="horarioRepetido" class="form-check-input"
                        (click)="onHorarioRecorrente()" disabled />
                    <label for="horarioRepetido" class="form-check-label">Horário Semanal Recorrente</label>
                </div>

                <!-- Campos adicionais para recorrência -->
                <div *ngIf="horarioRecorrente" class="mt-3">
                    <label class="br-label">Termina em</label>
                    <div class="row">
                        <!-- Opção "Nunca" -->
                        <div class="col-sm-12 mb-2" style="margin-top: 14px;">
                            <div class="br-radio">
                                <input type="radio" id="terminaNunca" name="terminaEm" value="nunca"
                                    formControlName="terminaEm" class="br-radio-input" />
                                <label for="terminaNunca" class="br-radio-label">Nunca</label>
                            </div>
                        </div>

                        <!-- Opção "Em" -->
                        <div class="col-sm-12 mb-2">
                            <div class="br-radio">
                                <input type="radio" id="terminaEm" name="terminaEm" value="data"
                                    formControlName="terminaEm" class="br-radio-input" />
                                <label for="terminaEm" class="br-radio-label">Em</label>
                            </div>
                            <!-- Date picker para a opção "Em" -->
                            <div *ngIf="scheduleForm.get('terminaEm')?.value === 'data'" class="mt-2">
                                <div class="br-input">
                                    <label for="dataTermino">Selecione a data de término: </label>
                                    <input id="dataTermino" type="date" formControlName="dataTermino" />
                                </div>
                            </div>
                        </div>

                        <!-- Opção "Após" -->
                        <div class="col-sm-12 mb-2">
                            <div class="br-radio">
                                <input type="radio" id="terminaApos" name="terminaEm" value="ocorrencias"
                                    formControlName="terminaEm" class="br-radio-input" />
                                <label for="terminaApos" class="br-radio-label">Após</label>
                            </div>
                            <!-- Campo de quantidade para a opção "Após" -->
                            <div *ngIf="scheduleForm.get('terminaEm')?.value === 'ocorrencias'" class="mt-2">
                                <div class="br-input">
                                    <label for="quantidadeOcorrencias">Quantidade de ocorrências</label>
                                    <input id="quantidadeOcorrencias" type="number"
                                        formControlName="quantidadeOcorrencias" placeholder="Ex.: 5" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Linha 4: Curso e Matrícula -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="curso">Curso</label>
                    <input id="curso" type="text" formControlName="curso"
                        placeholder="Preenchido automaticamente ao selecionar o responsável" />
                </div>
                <div *ngIf="scheduleForm.get('curso')?.invalid && scheduleForm.get('curso')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('curso') }}
                </div>
            </div>
            <div class="col-sm-6 mb-3">
                <app-dropdownn field="Ginásio (Obrigatório)" [dropdownOptions]="GinasioOptions"
                    (selectedOption)="onGinasioSelected($event)"></app-dropdownn>
            </div>

        </div>
        <!-- Linha 6: Quantidade de Pessoas -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input"
                    [class.invalid]="scheduleForm.get('quantidade')?.invalid && scheduleForm.get('quantidade')?.touched">
                    <label for="quantidade">Quantidade de Pessoas (Obrigatório)</label>
                    <input id="quantidade" type="number" formControlName="quantidade" placeholder="Ex.: 11" />
                    <div *ngIf="scheduleForm.get('quantidade')?.invalid && scheduleForm.get('quantidade')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('quantidade') }}
                    </div>
                </div>
            </div>
        </div>

        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-end gap-3">
                <div>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Reservar
                        horário</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/components/user-schedule-form/user-schedule-form.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserScheduleFormComponent } from './user-schedule-form.component';

describe('UserScheduleFormComponent', () => {
  let component: UserScheduleFormComponent;
  let fixture: ComponentFixture<UserScheduleFormComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [UserScheduleFormComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UserScheduleFormComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/guards/auth.guard.spec.ts">
import { TestBed } from '@angular/core/testing';
import { CanActivateFn } from '@angular/router';

import { authGuard } from './auth.guard';

describe('authGuard', () => {
  const executeGuard: CanActivateFn = (...guardParameters) => 
      TestBed.runInInjectionContext(() => authGuard(...guardParameters));

  beforeEach(() => {
    TestBed.configureTestingModule({});
  });

  it('should be created', () => {
    expect(executeGuard).toBeTruthy();
  });
});
</file>

<file path="src/app/core/layouts/auth-layout/auth-layout.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { AuthLayoutComponent } from './auth-layout.component';

describe('AuthLayoutComponent', () => {
  let component: AuthLayoutComponent;
  let fixture: ComponentFixture<AuthLayoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AuthLayoutComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(AuthLayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/layouts/auth-layout/auth-layout.component.ts">
import { Component } from '@angular/core';
import { HeaderComponent } from '../../shared/header/header.component';
import { FooterComponent } from '../../shared/footer/footer.component';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-auth-layout',
  imports: [RouterOutlet, FooterComponent, HeaderComponent],
  templateUrl: './auth-layout.component.html',
  styleUrl: './auth-layout.component.css'
})
export class AuthLayoutComponent {

}
</file>

<file path="src/app/core/layouts/schedule-layout/schedule-layout.component.css">
.shadow-content{
    box-shadow: inset 0 0 3px #000;
}
</file>

<file path="src/app/core/layouts/schedule-layout/schedule-layout.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ScheduleLayoutComponent } from './schedule-layout.component';

describe('ScheduleLayoutComponent', () => {
  let component: ScheduleLayoutComponent;
  let fixture: ComponentFixture<ScheduleLayoutComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ScheduleLayoutComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ScheduleLayoutComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/models/CreateGinasioRequest.ts">
export interface CreateGinasio {
  nome: string;
  campus: string;
  startTime: string; // Time em Java -> string no formato "HH:mm:ss"
  endTime: string; // Time em Java -> string no formato "HH:mm:ss"
}
</file>

<file path="src/app/core/models/Option.ts">
export interface option {
    id: string;
    value: string;
    label: string;
  }
</file>

<file path="src/app/core/models/Restricao.ts">
export interface Restricao {
  ginasio: string;
  data: string; // Date em Java -> string no formato "YYYY-MM-DD" no frontend
  descricao: string;
}
</file>

<file path="src/app/core/models/RestricaoRequest.ts">
export interface RestricaoRequest {
  ginasio: string;
  data: string; // LocalDate em Java -> string no formato "YYYY-MM-DD"
  descricao?: string; // Opcional, já que não tem @NotNull no backend
}
</file>

<file path="src/app/core/models/ScheduleModel.ts">
export interface ScheduleModel {
  horario: string; // Time em Java -> string no formato "HH:mm"
  data: string; // Date em Java -> string no formato "YYYY-MM-DD"
  ginasio: string;
  responsavel: string;
  curso: string;
  campus: string;
  matriculaAluno: string;
  email: string;
}
</file>

<file path="src/app/core/models/UserData.ts">
export interface UserData {
    matricula: string;
    nome: string;
    email: string;
    telefone: string;
    codigo: string;
}
</file>

<file path="src/app/core/pages/configuration/configuration.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ConfigurationComponent } from './configuration.component';

describe('ConfigurationComponent', () => {
  let component: ConfigurationComponent;
  let fixture: ComponentFixture<ConfigurationComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ConfigurationComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ConfigurationComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/pages/email-code-send/email-code-send.component.html">
<div class="flex h-full m-0 items-center justify-center">
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" class="h-full w-1/3 flex flex-col gap-4">
        <div class="row">
            <div class="col-sm-6 mb-3">
            <div class="br-input"
                [class.invalid]="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched">
                <label for="email">Email</label>
                <input id="email" type="email" formControlName="email" placeholder="Digite o seu email @ufu.br" />
                <div *ngIf="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('email') }}
                </div>
            </div>
            </div>
        </div>
                
        <div class="w-full">
            <button type="submit" 
                    [disabled]="scheduleForm.invalid" 
                    class="br-button primary">
                Enviar código de validação
            </button>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/pages/email-code-send/email-code-send.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { EmailCodeSendComponent } from './email-code-send.component';

describe('EmailCodeSendComponent', () => {
  let component: EmailCodeSendComponent;
  let fixture: ComponentFixture<EmailCodeSendComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [EmailCodeSendComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(EmailCodeSendComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/pages/email-validator/email-validator.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { EmailValidatorComponent } from './email-validator.component';

describe('EmailValidatorComponent', () => {
  let component: EmailValidatorComponent;
  let fixture: ComponentFixture<EmailValidatorComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [EmailValidatorComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(EmailValidatorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/pages/schedule/schedule.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ScheduleComponent } from './schedule.component';

describe('ScheduleComponent', () => {
  let component: ScheduleComponent;
  let fixture: ComponentFixture<ScheduleComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [ScheduleComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(ScheduleComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/pages/userschdeules/userschdeules.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { UserschdeulesComponent } from './userschdeules.component';

describe('UserschdeulesComponent', () => {
  let component: UserschdeulesComponent;
  let fixture: ComponentFixture<UserschdeulesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [UserschdeulesComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(UserschdeulesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/adm/adm.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { AdmService } from './adm.service';

describe('AdmService', () => {
  let service: AdmService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AdmService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/auth/auth.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(AuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/services/layout/layout-schedules.service.spec.ts">
/* tslint:disable:no-unused-variable */

import { TestBed, inject } from '@angular/core/testing';
import { LayoutSchedulesService } from './layout-schedules.service';

describe('Service: LayoutSchedules', () => {
  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [LayoutSchedulesService]
    });
  });

  it('should ...', inject([LayoutSchedulesService], (service: LayoutSchedulesService) => {
    expect(service).toBeTruthy();
  }));
});
</file>

<file path="src/app/core/services/schedule/schedule-time.service.ts">
import { Injectable, EventEmitter } from '@angular/core';

@Injectable({
    providedIn: 'root',
})
export class ScheduleTimeService {
    horarioDisponivelClicadoEmitter = new EventEmitter<void>();

    abrirModalScheduleForm(): void {
        this.horarioDisponivelClicadoEmitter.emit();
    }
}
</file>

<file path="src/app/core/services/schedule/schedules.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { SchedulesService } from './schedules.service';

describe('SchedulesService', () => {
  let service: SchedulesService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(SchedulesService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/core/shared/header/header.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeaderComponent } from './header.component';

describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HeaderComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/shared/menu/menu.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { MenuComponent } from './menu.component';

describe('SidebarComponent', () => {
  let component: MenuComponent;
  let fixture: ComponentFixture<MenuComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [MenuComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(MenuComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/main.ts">
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));
</file>

<file path="tsconfig.app.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}
</file>

<file path="tsconfig.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "outDir": "./dist/out-tsc",
    "strict": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "skipLibCheck": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "moduleResolution": "bundler",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022"
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}
</file>

<file path="tsconfig.spec.json">
/* To learn more about Typescript configuration file: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html. */
/* To learn more about Angular compiler options: https://angular.dev/reference/configs/angular-compiler-options. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
</file>

<file path="src/app/core/components/adm-form/adm-form.component.html">
<div class="container mt-4">
    <h2>Criar Administrador</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 1: Campus e Ginásio -->
                 <div class="row">
            <div class="col-sm-6 mb-3">
            <div class="br-input"
                [class.invalid]="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched">
                <label for="email">Email</label>
                <input id="email" type="email" formControlName="email" placeholder="Digite o seu email @ufu.br" />
                <div *ngIf="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('email') }}
                </div>
            </div>
            </div>
        </div>

         <!-- Linha 2: Nome -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input large input-button"
                    [class.invalid]="scheduleForm.get('nome')?.invalid && scheduleForm.get('nome')?.touched">
                    <label for="input-search-responsavel">Nome Completo</label>
                    <input id="input-search-responsavel" type="search" placeholder="Digite o seu nome completo"
                        formControlName="nome" />
                </div>
                <div *ngIf="scheduleForm.get('nome')?.invalid && scheduleForm.get('nome')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('nome') }}
                </div>
            </div>
        </div>

        <!-- Linha 3: Matrícula -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="matricula">Matrícula</label>
                    <input id="matricula" type="text" formControlName="matricula"
                        placeholder="Preenchido automaticamente ao selecionar o responsável"
                        [class.invalid]="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('matricula') }}
                </div>
            </div>
        </div>

        <!-- Linha 4: Telefone -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input"
                    [class.invalid]="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched">
                    <label for="telefone">Telefone</label>
                    <input id="telefone" type="text" formControlName="telefone" placeholder="Digite o telefone" />
                    <div *ngIf="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('telefone') }}
                    </div>
                </div>
            </div>
        </div>

        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-end gap-3">
                <div>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Criar Administrador</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/components/adm-form/adm-form.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Output } from '@angular/core';
import { ReactiveFormsModule, FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AdmService } from '../../services/adm/adm.service';
import { UserData } from '../../models/UserData';

@Component({
  selector: 'app-adm-form',
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './adm-form.component.html',
  styleUrl: './adm-form.component.css'
})
export class AdmFormComponent {
        scheduleForm!: FormGroup;
    @Output() send = new EventEmitter<boolean>();

    constructor(private fb: FormBuilder, private admService: AdmService) { }

        ngOnInit(): void {
        this.scheduleForm = this.fb.group({
                email: ['', [Validators.required, 
                    Validators.email,
                    Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]*\.?ufu\.br$/)
                ]
            ],
            nome: ['', Validators.required],
            matricula: ['', 
                [Validators.required, Validators.pattern(/^\d{5}[A-Za-z]{3}\d{3}$/)]],
            telefone: [
                '',
                [Validators.required, Validators.pattern(/^\(\d{2}\) \d{5}-\d{4}$/)],
            ]

        });
     }

    onSubmit(): void {
        this.admService.generateAdm(
            this.buildUserAdm()
        ).subscribe({
            next: () => {
                this.send.emit(true);
                console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            },
            error: (err) => {
                this.send.emit(false);
                let errorMessage = 'Erro inesperado ao enviar formulário.';
                if (err.error && typeof err.error === 'string') {
                    errorMessage = err.error;
                } else if (err.error && err.error.message) {
                    errorMessage = err.error.message;
                } else if (err.message) {
                    errorMessage = err.message;
                } else if (err.status) {
                    errorMessage = `Erro ${err.status}: ${err.statusText || 'Erro no servidor'}`;
                }
                
                alert('Erro ao enviar formulário: ' + errorMessage);
                console.error('Erro ao enviar formulário:', err);
            }
        });
      }

      buildUserAdm(): UserData {
        const formValue = this.scheduleForm.value;
        const userData : UserData = {
            email: formValue.email,
            nome: formValue.nome,
            matricula: formValue.matricula,
            telefone: formValue.telefone,
            codigo: '' 
        };
        return userData;
      }

      getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'matricula') {
                return 'Use sua matrícula no formato: 00000XXX000';
            }
            if (controlName === 'telefone') {
                return 'Use o formato: (XX) XXXXX-XXXX.';
            }
        }
        return '';
    }

}
</file>

<file path="src/app/core/components/datapicker/datapicker.component.ts">
import { AfterViewInit, Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import flatpickr from 'flatpickr';

@Component({
  selector: 'app-datapicker',
  imports: [],
  templateUrl: './datapicker.component.html',
  styleUrl: './datapicker.component.css'
})
export class DatapickerComponent implements AfterViewInit, OnChanges {
  @Input() selectedDate: string = ''; 
  @Output() dateSelected = new EventEmitter<string>(); 

  private flatpickrInstance: any;

  ngAfterViewInit(): void {
    this.initializeFlatpickr();
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['selectedDate'] && this.flatpickrInstance) {
      this.flatpickrInstance.setDate(this.selectedDate);
    }
  }

  private initializeFlatpickr(): void {
    this.flatpickrInstance = flatpickr('#simples-input', {
      dateFormat: 'Y-m-d', // Formato correto do flatpickr para YYYY-MM-DD
      defaultDate: this.selectedDate || new Date(), // Data padrão: selectedDate ou data atual
      onChange: (selectedDates: Date[], dateStr: string) => {
        this.dateSelected.emit(dateStr);
      }
    });
  }
}
</file>

<file path="src/app/core/components/dropdownn/dropdownn.component.ts">
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild} from '@angular/core';
import { option } from '../../models/Option';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-dropdownn',
   imports: [CommonModule],
  templateUrl: './dropdownn.component.html',
  styleUrl: './dropdownn.component.css'
})
export class DropdownnComponent {
      @Input() field: string = 'Campo';
      @Input() placeholder: string = 'Selecione alguma opção';
      @Input() dropdownOptions: Array<option> = [];
      @Output() selectedOption = new EventEmitter<option>();

            // Select configuration
            @ViewChild('dropdownList') dropdownList!: ElementRef;
            isDropdownOpen: boolean = false;
            // Variáveis para o filtro e lista a ser mostrada
            selectedCampus: string = '';
            selectedLabel: string = this.placeholder;
          
        
          //lógica do dropdown
          toggleDropdown(): void {
            this.isDropdownOpen = !this.isDropdownOpen;
            if (this.isDropdownOpen) {
              this.dropdownList.nativeElement.style.display = 'absolute';
            } else {
              this.dropdownList.nativeElement.style.display = 'none';
            }
          }
      
        //Exibição da lista
        onDropdownChange(selectedValue: string): void {
          let selected: option = this.dropdownOptions.find(option => option.value === selectedValue) ||  { id: '', value: '', label: '' };
          this.selectedLabel = selected.label;
          this.selectedCampus = selected.value;
          this.selectedOption.emit(selected);
          this.toggleDropdown();
        }

}
</file>

<file path="src/app/core/components/ginasio-form-delete/ginasio-form-delete.component.html">
<div class="container mt-4">
    <h2>Excluir Ginásio</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 1: Campus e Ginásio -->
         <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="nomeGinasio">Ginásio</label>
                    <input id="nomeGinasio" type="text" formControlName="nomeGinasio"
                        placeholder="Nome do ginásio" [class.invalid]="scheduleForm.get('nomeGinasio')?.invalid && scheduleForm.get('nomeGinasio')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('nomeGinasio')?.invalid && scheduleForm.get('nomeGinasio')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('nomeGinasio') }}
                </div>
            </div>
         </div>
        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-end gap-3">
                <div>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Excluir Ginásio</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/components/ginasio-form-delete/ginasio-form-delete.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Output } from '@angular/core';
import { ReactiveFormsModule, FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AdmService } from '../../services/adm/adm.service';

@Component({
  selector: 'app-ginasio-form-delete',
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './ginasio-form-delete.component.html',
  styleUrl: './ginasio-form-delete.component.css'
})
export class GinasioFormDeleteComponent {
      scheduleForm!: FormGroup;
    @Output() send = new EventEmitter<boolean>();

    constructor(private fb: FormBuilder, private admService: AdmService) { }

        ngOnInit(): void {
        this.scheduleForm = this.fb.group({
            nomeGinasio: ['', Validators.required]
        });
        }

        onSubmit(): void {
       const formValue = this.scheduleForm.value;
        this.admService.deleteGinasio(
            formValue.nomeGinasio
        ).subscribe({
            next: () => {
                this.send.emit(true);
                console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            },
            error: (err) => {
                this.send.emit(false);
                let errorMessage = 'Erro inesperado ao enviar formulário.';
                if (err.error && typeof err.error === 'string') {
                    errorMessage = err.error;
                } else if (err.error && err.error.message) {
                    errorMessage = err.error.message;
                } else if (err.message) {
                    errorMessage = err.message;
                } else if (err.status) {
                    errorMessage = `Erro ${err.status}: ${err.statusText || 'Erro no servidor'}`;
                }
                
                alert('Erro ao enviar formulário: ' + errorMessage);
                console.error('Erro ao enviar formulário:', err);
            }
        });
      }


      getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        return '';
    }

}
</file>

<file path="src/app/core/components/ginasio-form/ginasio-form.component.html">
<div class="container mt-4">
    <h2>Criar Ginásio</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 1: Campus e Ginásio -->
         <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="nomeGinasio">Ginásio</label>
                    <input id="nomeGinasio" type="text" formControlName="nomeGinasio"
                        placeholder="Nome do ginásio" [class.invalid]="scheduleForm.get('nomeGinasio')?.invalid && scheduleForm.get('nomeGinasio')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('nomeGinasio')?.invalid && scheduleForm.get('nomeGinasio')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('nomeGinasio') }}
                </div>
            </div>
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="campus">Campus</label>
                    <input id="campus" type="text" formControlName="campus"
                        placeholder="Nome do campus" [class.invalid]="scheduleForm.get('campus')?.invalid && scheduleForm.get('campus')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('campus')?.invalid && scheduleForm.get('campus')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('campus') }}
                </div>
            </div>
         </div>
        <!-- Linha 2 e 3: Horário -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-datetimepicker" data-mode="single" data-type="time">
                    <div class="br-input has-icon"
                        [class.invalid]="scheduleForm.get('horarioAbertura')?.invalid && scheduleForm.get('horarioAbertura')?.touched">
                        <label for="dateandtime-input">Horário de Abertura</label>
                        <input id="dateandtime-input" type="time" formControlName="horarioAbertura" />
                    </div>
                    <div *ngIf="scheduleForm.get('horarioAbertura')?.invalid && scheduleForm.get('horarioAbertura')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('horarioAbertura') }}
                    </div>
                </div>
                <div class="br-datetimepicker" data-mode="single" data-type="time">
                    <div class="br-input has-icon"
                        [class.invalid]="scheduleForm.get('horarioFechamento')?.invalid && scheduleForm.get('horarioFechamento')?.touched">
                        <label for="dateandtime-input">Horário de Fechamento</label>
                        <input id="dateandtime-input" type="time" formControlName="horarioFechamento" />
                    </div>
                    <div *ngIf="scheduleForm.get('horarioFechamento')?.invalid && scheduleForm.get('horarioFechamento')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('horarioFechamento') }}
                    </div>
                </div>
            </div>
        </div>
        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-end gap-3">
                <div>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Criar
                        Ginásio</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/components/restricao-form-delete/restricao-form-delete.component.html">
<div class="container mt-4">
    <h2>Deletar Restrição</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 1: Campus e Ginásio -->
            <div class="col-sm-6 mb-3">
                <app-dropdownn field="Ginásio (Obrigatório)" [dropdownOptions]="GinasioOptions"
                    (selectedOption)="onGinasioSelected($event)"></app-dropdownn>
            </div>

        <!-- Linha 2: Horário -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-datetimepicker" data-mode="single" data-type="date">
                    <div class="br-input has-icon"
                        [class.invalid]="scheduleForm.get('data')?.invalid && scheduleForm.get('data')?.touched">
                        <label for="dateandtime-input">Data</label>
                        <input id="dateandtime-input" type="date" formControlName="data"/>
                    </div>
                    <div *ngIf="scheduleForm.get('data')?.invalid && scheduleForm.get('data')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('data') }}
                    </div>
                </div>
            
            </div>
        </div>
        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-end gap-3">
                <div>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Apagar Restrição</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/components/restricao-form-delete/restricao-form-delete.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Output } from '@angular/core';
import { ReactiveFormsModule, FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AdmService } from '../../services/adm/adm.service';
import { Ginasio } from '../../models/Ginasio';
import { option } from '../../models/Option';
import { RestricaoRequest } from '../../models/RestricaoRequest';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { DropdownnComponent } from '../dropdownn/dropdownn.component';

@Component({
  selector: 'app-restricao-form-delete',
  imports: [CommonModule, ReactiveFormsModule, DropdownnComponent],
  templateUrl: './restricao-form-delete.component.html',
  styleUrl: './restricao-form-delete.component.css'
})
export class RestricaoFormDeleteComponent  {
      scheduleForm!: FormGroup;
      Ginasios: Ginasio[] = [];
      GinasioOptions: Array<option> = [];
    @Output() send = new EventEmitter<boolean>();

    constructor(private fb: FormBuilder, private admService: AdmService,  private layoutService : LayoutSchedulesService) { }
        ngOnInit(): void {
        this.Ginasios = this.layoutService.getGinasios();
        this.setupGinasioOptions();
        
        this.scheduleForm = this.fb.group({
            data: ['', [Validators.required]],
            ginasio: ['', Validators.required]
        });

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });
        
        // ✅ Observar mudanças nos ginásios
        this.layoutService.ginasios$.subscribe(ginasios => {
            this.Ginasios = ginasios;
            this.setupGinasioOptions();
            console.log('Ginásios atualizados via Observable (DeleteScheduleForm):', ginasios);
        });
    }

    private setupGinasioOptions(): void {
        this.GinasioOptions = this.Ginasios.map(ginasio => ({
            id: ginasio.nome,
            value: ginasio.nome,
            label: `${ginasio.nome} (${ginasio.campus})`
        }));
    }

    onGinasioSelected(selected: option): void {
        this.scheduleForm.get('ginasio')?.setValue(selected.value);
    }

        onSubmit(): void {
        this.admService.deleteRestricao(
            this.buildRestricaoRequest()
        ).subscribe({
            next: () => {
                this.send.emit(true);
                console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            },
            error: (err) => {
                this.send.emit(false);
                let errorMessage = 'Erro inesperado ao enviar formulário.';
                if (err.error && typeof err.error === 'string') {
                    errorMessage = err.error;
                } else if (err.error && err.error.message) {
                    errorMessage = err.error.message;
                } else if (err.message) {
                    errorMessage = err.message;
                } else if (err.status) {
                    errorMessage = `Erro ${err.status}: ${err.statusText || 'Erro no servidor'}`;
                }
                
                alert('Erro ao enviar formulário: ' + errorMessage);
                console.error('Erro ao enviar formulário:', err);
            }
        });
      }


        getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'data') {
                return 'Selecione uma data válida.';
            }
            if (controlName === 'telefone') {
                return 'Use o formato: (XX) XXXXX-XXXX.';
            }
            if (controlName === 'email') {
                return 'Use um email válido da UFU: nome@ufu.br';
            }
        }
        if (control?.hasError('min')) {
            return 'O valor deve ser maior que 0.';
        }
        return '';
    }

    buildRestricaoRequest(): RestricaoRequest {
        const formValue = this.scheduleForm.value;
        return {
            ginasio: formValue.ginasio,
            data: formValue.data,
            descricao: '' // Descrição não é necessária para exclusão
        };
    }

}
</file>

<file path="src/app/core/components/restricao-form/restricao-form.component.html">
<div class="container mt-4">
    <h2>Criar Restrição</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 1: Campus e Ginásio -->
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="desc">Descrição</label>
                    <input id="desc" type="text" formControlName="desc"
                        placeholder="Descrição da restrição" [class.invalid]="scheduleForm.get('desc')?.invalid && scheduleForm.get('desc')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('desc')?.invalid && scheduleForm.get('desc')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('desc') }}
                </div>
            </div>
            <div class="col-sm-6 mb-3">
                <app-dropdownn field="Ginásio (Obrigatório)" [dropdownOptions]="GinasioOptions"
                    (selectedOption)="onGinasioSelected($event)"></app-dropdownn>
            </div>

        <!-- Linha 2: Horário -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-datetimepicker" data-mode="single" data-type="date">
                    <div class="br-input has-icon"
                        [class.invalid]="scheduleForm.get('data')?.invalid && scheduleForm.get('data')?.touched">
                        <label for="dateandtime-input">Data</label>
                        <input id="dateandtime-input" type="date" formControlName="data"/>
                    </div>
                    <div *ngIf="scheduleForm.get('data')?.invalid && scheduleForm.get('data')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('data') }}
                    </div>
                </div>
            
            </div>
        </div>
        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-end gap-3">
                <div>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Criar Restrição</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/components/restricao-form/restricao-form.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Output } from '@angular/core';
import { ReactiveFormsModule, FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AdmService } from '../../services/adm/adm.service';
import { RestricaoRequest } from '../../models/RestricaoRequest';
import { DropdownnComponent } from '../dropdownn/dropdownn.component';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { Ginasio } from '../../models/Ginasio';
import { option } from '../../models/Option';

@Component({
  selector: 'app-restricao-form',
  imports: [CommonModule, ReactiveFormsModule, DropdownnComponent],
  templateUrl: './restricao-form.component.html',
  styleUrl: './restricao-form.component.css'
})
export class RestricaoFormComponent {
      scheduleForm!: FormGroup;
      Ginasios: Ginasio[] = [];
      GinasioOptions: Array<option> = [];
    @Output() send = new EventEmitter<boolean>();

    constructor(private fb: FormBuilder, private admService: AdmService,  private layoutService : LayoutSchedulesService) { }
        ngOnInit(): void {
        this.Ginasios = this.layoutService.getGinasios();
        this.setupGinasioOptions();
        
        this.scheduleForm = this.fb.group({
            desc: [''],
            data: ['', [Validators.required]],
            ginasio: ['', Validators.required]
        });

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });
        
        // ✅ Observar mudanças nos ginásios
        this.layoutService.ginasios$.subscribe(ginasios => {
            this.Ginasios = ginasios;
            this.setupGinasioOptions();
            console.log('Ginásios atualizados via Observable (DeleteScheduleForm):', ginasios);
        });
    }

    private setupGinasioOptions(): void {
        this.GinasioOptions = this.Ginasios.map(ginasio => ({
            id: ginasio.nome,
            value: ginasio.nome,
            label: `${ginasio.nome} (${ginasio.campus})`
        }));
    }

    onGinasioSelected(selected: option): void {
        this.scheduleForm.get('ginasio')?.setValue(selected.value);
    }

        onSubmit(): void {
        this.admService.createRestricao(
            this.buildRestricaoRequest()
        ).subscribe({
            next: () => {
                this.send.emit(true);
                console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            },
            error: (err) => {
                this.send.emit(false);
                let errorMessage = 'Erro inesperado ao enviar formulário.';
                if (err.error && typeof err.error === 'string') {
                    errorMessage = err.error;
                } else if (err.error && err.error.message) {
                    errorMessage = err.error.message;
                } else if (err.message) {
                    errorMessage = err.message;
                } else if (err.status) {
                    errorMessage = `Erro ${err.status}: ${err.statusText || 'Erro no servidor'}`;
                }
                
                alert('Erro ao enviar formulário: ' + errorMessage);
                console.error('Erro ao enviar formulário:', err);
            }
        });
      }


        getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'data') {
                return 'Selecione uma data válida.';
            }
            if (controlName === 'telefone') {
                return 'Use o formato: (XX) XXXXX-XXXX.';
            }
            if (controlName === 'email') {
                return 'Use um email válido da UFU: nome@ufu.br';
            }
        }
        if (control?.hasError('min')) {
            return 'O valor deve ser maior que 0.';
        }
        return '';
    }

    buildRestricaoRequest(): RestricaoRequest {
        const formValue = this.scheduleForm.value;
        return {
            ginasio: formValue.ginasio,
            data: formValue.data,
            descricao: formValue.desc
        };
    }

}
</file>

<file path="src/app/core/components/slider/slider.component.html">
<div class="flex flex-col justify-around m-2">
    <div class="example-label-container">
      <label id="example-name-label" class="example-name-label">{{title}}</label>
      <label class="example-value-label ml-2 p-2 border 3px">{{slider.value}} minutos</label>
    </div>
    <mat-slider
        class="example-margin"
        [max]="max"
        [min]="min" 
        [step]="step"
        (input)="onSliderValueChange($event)">
      <input matSliderThumb [(ngModel)]="value" #slider>
    </mat-slider>
</div>
</file>

<file path="src/app/core/components/table-users/table-users.component.ts">
import { Component, Input } from '@angular/core';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';
import { User } from '../../models/User';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-table-users',
  imports: [CommonModule],
  templateUrl: './table-users.component.html',
  styleUrl: './table-users.component.css'
})
export class TableUsersComponent {
  @Input() tableName: string = 'Tabela';
  @Input() tableData: User[] = [];

  constructor(private scheduleService: ScheduleTimeService) { }
  onDisponivelClick(row: User): void {
      this.scheduleService.abrirModalScheduleForm();
  }
}
</file>

<file path="src/app/core/components/table/table.component.css">
.tabela-horarios {
  max-height: 67vh;
  overflow-y: auto;
  overflow-x: auto;
  box-sizing: border-box;
}
</file>

<file path="src/app/core/components/user-schedule-delete/user-schedule-delete.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Output } from '@angular/core';
import { ReactiveFormsModule, FormGroup, FormBuilder, Validators } from '@angular/forms';
import { DeleteSchedule } from '../../models/DeleteSchedule';
import { Ginasio } from '../../models/Ginasio';
import { option } from '../../models/Option';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { SchedulesService } from '../../services/schedule/schedules.service';
import { DropdownnComponent } from '../dropdownn/dropdownn.component';
import { UserData } from '../../models/UserData';

@Component({
  selector: 'app-user-schedule-delete',
  imports: [CommonModule, ReactiveFormsModule, DropdownnComponent],
  templateUrl: './user-schedule-delete.component.html',
  styleUrl: './user-schedule-delete.component.css'
})
export class UserScheduleDeleteComponent {
    scheduleForm!: FormGroup;
    horarioRecorrente: boolean = false;
    Ginasios: Ginasio[] = [];
    GinasioOptions: Array<option> = [];
    @Output() send = new EventEmitter<boolean>();

    constructor(private fb: FormBuilder, private schedulesService: SchedulesService, private layoutService : LayoutSchedulesService) { }

        ngOnInit(): void {
        this.Ginasios = this.layoutService.getGinasios();
        this.GinasioOptions = this.Ginasios.map(ginasio => ({
            id: ginasio.nome,
            value: ginasio.nome,
            label: `${ginasio.nome} (${ginasio.campus})`
        }));
        this.scheduleForm = this.fb.group({
            ginasio: ['', Validators.required],
            horario: ['', [Validators.required]]
        });

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });
    }

    onSubmit(): void {
        this.schedulesService.deleteSchedule(
            this.createDeleteScheduleForm()
        ).subscribe({
            next: () => {
                this.send.emit(true);
                console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            },
            error: (err) => {
                this.send.emit(false);
                let errorMessage = 'Erro inesperado ao enviar formulário.';
                if (err.error && typeof err.error === 'string') {
                    errorMessage = err.error;
                } else if (err.error && err.error.message) {
                    errorMessage = err.error.message;
                } else if (err.message) {
                    errorMessage = err.message;
                } else if (err.status) {
                    errorMessage = `Erro ${err.status}: ${err.statusText || 'Erro no servidor'}`;
                }
                
                alert('Erro ao enviar formulário: ' + errorMessage);
                console.error('Erro ao enviar formulário:', err);
            }
        });

        this.scheduleForm.get('horario')?.valueChanges.subscribe(value => {
          if (value) {
            const date = new Date(value);
            // Zera os minutos e segundos da data
            date.setMinutes(0);
            date.setSeconds(0);
            
            // Atualiza o valor do form control, forçando a hora cheia
            // O { emitEvent: false } é crucial para evitar loops infinitos
            this.scheduleForm.get('horario')?.setValue(this.toIsoString(date), { emitEvent: false });
          }
        });
    }

    
    private toIsoString(date: Date): string {
      const pad = (num: number): string => (num < 10 ? '0' : '') + num;
      return date.getFullYear() +
          '-' + pad(date.getMonth() + 1) +
          '-' + pad(date.getDate()) +
          'T' + pad(date.getHours()) +
          ':' + pad(date.getMinutes());
    }

    getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'horario') {
                return 'Selecione uma data e horário válidos.';
            }
        }
        if (control?.hasError('min')) {
            return 'O valor deve ser maior que 0.';
        }
        return '';
    }


    onGinasioSelected(selected: option): void {
        this.scheduleForm.get('ginasio')?.setValue(selected.value);
    }

    private createDeleteScheduleForm(): DeleteSchedule {
    const formValue = this.scheduleForm.value;
    const user : UserData | null = this.layoutService.getUser();
    
    
    // Parse datetime-local format (YYYY-MM-DDTHH:mm) to separate date and time
    const datetimeValue = formValue.horario; // e.g., "2025-07-27T14:30"
    
    if (!datetimeValue || !datetimeValue.includes('T')) {
        throw new Error('Formato de data/hora inválido');
    }
    
    const [dateString, timeString] = datetimeValue.split('T'); // ["2025-07-27", "14:30"]
    
    // Add seconds to time format for Java Time parsing (HH:mm:ss)
    const timeWithSeconds = timeString.includes(':') ? `${timeString}:00` : timeString;

    // Retornar o objeto DeleteSchedule com os valores formatados
    const deleteSchedule: DeleteSchedule = {
        horario: timeWithSeconds,
        data: dateString,
        ginasio: formValue.ginasio,
        matriculaAluno: user?.matricula || ''
    };
    return deleteSchedule;
  }
}
</file>

<file path="src/app/core/components/user-schedule-form/user-schedule-form.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { ReactiveFormsModule, FormGroup, FormBuilder, Validators } from '@angular/forms';
import { Ginasio } from '../../models/Ginasio';
import { NewSchedule } from '../../models/NewSchedule';
import { option } from '../../models/Option';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { SchedulesService } from '../../services/schedule/schedules.service';
import { DropdownnComponent } from '../dropdownn/dropdownn.component';
import { UserData } from '../../models/UserData';

@Component({
  selector: 'app-user-schedule-form',
  imports: [CommonModule, ReactiveFormsModule, DropdownnComponent],
  templateUrl: './user-schedule-form.component.html',
  styleUrl: './user-schedule-form.component.css'
})
export class UserScheduleFormComponent implements OnInit {
    scheduleForm!: FormGroup;
    horarioRecorrente: boolean = false;
    Ginasios: Ginasio[] = [];
    GinasioOptions: Array<option> = [];
    @Output() send = new EventEmitter<boolean>();

    constructor(private fb: FormBuilder, private schedulesService: SchedulesService, private layoutService : LayoutSchedulesService) { }

    ngOnInit(): void {
        this.Ginasios = this.layoutService.getGinasios();
        this.setupGinasioOptions();
        
        this.scheduleForm = this.fb.group({
            ginasio: ['', Validators.required],
            horario: ['', [Validators.required]],
            terminaEm: [''],
            dataTermino: [''],
            ocorrencias: [''],
            curso: ['', Validators.required],
            quantidade: ['', [Validators.required, Validators.min(1)]],
        });
        

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });
        
        // ✅ Observar mudanças nos ginásios
        this.layoutService.ginasios$.subscribe(ginasios => {
            this.Ginasios = ginasios;
            this.setupGinasioOptions();
            console.log('Ginásios atualizados via Observable (UserScheduleForm):', ginasios);
        });

        this.scheduleForm.get('horario')?.valueChanges.subscribe(value => {
          if (value) {
            const date = new Date(value);
            // Zera os minutos e segundos da data
            date.setMinutes(0);
            date.setSeconds(0);
            
            // Atualiza o valor do form control, forçando a hora cheia
            // O { emitEvent: false } é crucial para evitar loops infinitos
            this.scheduleForm.get('horario')?.setValue(this.toIsoString(date), { emitEvent: false });
          }
        });
    }

    private setupGinasioOptions(): void {
        this.GinasioOptions = this.Ginasios.map(ginasio => ({
            id: ginasio.nome,
            value: ginasio.nome,
            label: `${ginasio.nome} (${ginasio.campus})`
        }));
    }
  
    onSubmit(): void {
        this.schedulesService.createSchedule(
            this.createNewScheduleFromForm()
        ).subscribe({
            next: () => {
                this.send.emit(true);
                console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            },
            error: (err) => {
                this.send.emit(false);
                let errorMessage = 'Erro inesperado ao enviar formulário.';
                if (err.error && typeof err.error === 'string') {
                    errorMessage = err.error;
                } else if (err.error && err.error.message) {
                    errorMessage = err.error.message;
                } else if (err.message) {
                    errorMessage = err.message;
                } else if (err.status) {
                    errorMessage = `Erro ${err.status}: ${err.statusText || 'Erro no servidor'}`;
                }
                
                alert('Erro ao enviar formulário: ' + errorMessage);
                console.error('Erro ao enviar formulário:', err);
            }
        });
    }

    getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'horario') {
                return 'Selecione uma data e horário válidos.';
            }
        }
        if (control?.hasError('min')) {
            return 'O valor deve ser maior que 0.';
        }
        return '';
    }

    onCampusSelected(selected: option): void {
        this.scheduleForm.get('campus')?.setValue(selected.value);
    }

    onGinasioSelected(selected: option): void {
        this.scheduleForm.get('ginasio')?.setValue(selected.value);
    }

    onHorarioRecorrente() {
        this.horarioRecorrente = !this.horarioRecorrente;
    }

    private toIsoString(date: Date): string {
      const pad = (num: number): string => (num < 10 ? '0' : '') + num;
      return date.getFullYear() +
          '-' + pad(date.getMonth() + 1) +
          '-' + pad(date.getDate()) +
          'T' + pad(date.getHours()) +
          ':' + pad(date.getMinutes());
    }

    private createNewScheduleFromForm(): NewSchedule {
    const formValue = this.scheduleForm.value;
    const user : UserData | null = this.layoutService.getUser();
    
    // Parse datetime-local format (YYYY-MM-DDTHH:mm) to separate date and time
    const datetimeValue = formValue.horario; // e.g., "2025-07-27T14:30"
    
    if (!datetimeValue || !datetimeValue.includes('T')) {
        throw new Error('Formato de data/hora inválido');
    }
    
    const [dateString, timeString] = datetimeValue.split('T'); // ["2025-07-27", "14:30"]
    
    // Add seconds to time format for Java Time parsing (HH:mm:ss)
    const timeWithSeconds = timeString.includes(':') ? `${timeString}:00` : timeString;
    
    return {
        horario: timeWithSeconds, // "HH:mm:ss" format for Java Time
        data: dateString, // "YYYY-MM-DD" format for Java LocalDate
        ginasio: formValue.ginasio,
        responsavel: user?.nome ?? '',
        curso: formValue.curso,
        campus: this.Ginasios.filter(ginasio => ginasio.nome === formValue.ginasio).map(ginasio => ginasio.campus)[0],
        matriculaAluno: user?.matricula ?? '',
        telefone: user?.telefone ?? '',
        email: user?.email ?? '',
        quantidadePessoas: parseInt(formValue.quantidade) || 1
    };
}
}
</file>

<file path="src/app/core/guards/auth.guard.ts">
import { CanActivateFn, Router } from '@angular/router';
import { inject } from '@angular/core';
import { AuthService } from '../services/auth/auth.service';

export const authGuard: CanActivateFn = (route, state) => {
  const authService = inject(AuthService);
  const router = inject(Router);

  const token = authService.getToken();
  if (authService.isAuthenticated() && token && authService.validateAuth(token)) {
    return true;
  }
  router.navigate(['/auth/login']);
  return false;
};
</file>

<file path="src/app/core/layouts/auth-layout/auth-layout.component.html">
<app-header></app-header>
    <div class="flex-1 p-5 shadow-content h-max ">
      <router-outlet></router-outlet>
    </div>
<app-footer [title]="'©2022 - 2024 | Acesso UFU (v0.14.2) | Desenvolvido pelo CTIC | Universidade Federal de Uberlândia'"></app-footer>
</file>

<file path="src/app/core/models/DeleteSchedule.ts">
export interface DeleteSchedule {
  horario: string; // Time em Java -> string no formato "HH:mm:ss"
  data: string; // LocalDate em Java -> string no formato "YYYY-MM-DD"
  ginasio: string;
  matriculaAluno: string;
}
</file>

<file path="src/app/core/models/FormType.ts">
export enum FormType {
  CREATE_SCHEDULE = 'CREATE_SCHEDULE',
  DELETE_SCHEDULE = 'DELETE_SCHEDULE',
  CREATE_GINASIO = 'CREATE_GINASIO',
  DELETE_GINASIO = 'DELETE_GINASIO',
  CREATE_RESTRICAO = 'CREATE_RESTRICAO',
  DELETE_RESTRICAO = 'DELETE_RESTRICAO',
  CREATE_ADMINISTRATOR = 'CREATE_ADMINISTRATOR'
}

export interface ModalConfig {
  type: FormType;
  title: string;
  isOpen: boolean;
}
</file>

<file path="src/app/core/models/Ginasio.ts">
export interface Ginasio {
    nome: any;
    campus: string;
    startTime: string;
    endTime: string;
  }
</file>

<file path="src/app/core/models/NewSchedule.ts">
export interface NewSchedule {
  horario: string; // Time em Java -> string no formato "HH:mm:ss"
  data: string; // LocalDate em Java -> string no formato "YYYY-MM-DD"
  ginasio: string;
  responsavel: string;
  curso: string;
  campus: string; //CampusEnum
  matriculaAluno: string;
  telefone: string;
  email: string;
  quantidadePessoas: number;
}
</file>

<file path="src/app/core/models/User.ts">
export interface User {
  matricula: string;
  nome: string;
  email: string;
  telefone: string;
  acess: String; // AcessEnum
}
</file>

<file path="src/app/core/services/auth/auth.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { Router } from '@angular/router';
import { UserData } from '../../models/UserData';
import { User } from '../../models/User';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private baseApiUrl = 'http://localhost:3000/v1/auth';
  private tokenKey = 'auth-token';
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);
  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();

  constructor(
    private http: HttpClient,
    private router: Router
  ) {{
      this.checkToken();
      const t: string | null = this.getToken();
      if (this.isAuthenticated() && t != null) {
        this.validateAuth(t).subscribe({
          next: (user) => {
            console.log('userLoggedIn:', user);
            localStorage.setItem('userLoggedIn', JSON.stringify(user));
          },
          error: () => {
            this.logout();
          }
        });
      }
  }}

  private checkToken(): void {
    const token = localStorage.getItem(this.tokenKey);
    if (token && this.isValidToken(token)) {
      this.isAuthenticatedSubject.next(true);
    } else {
      this.logout();
    }
  }

  private isValidToken(token: string): boolean {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const currentTime = Math.floor(Date.now() / 1000);
      return payload.exp > currentTime;
    } catch {
      return false;
    }
  }

  sendEmailCode(email: string): Observable<any> {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });

    return this.http.post(`${this.baseApiUrl}/email/send/${email}`, { headers });
  }

  verifyEmailCode(email: string, code: string): Observable<any> {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });
  

    return this.http.post(`${this.baseApiUrl}/email/validate`, { email, code }, { headers });
  }

  gerenateAuth(userData: UserData): Observable<any> {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });

    return this.http.post(`${this.baseApiUrl}`, userData, { 
      headers,
      responseType: 'text' // Aceita resposta em texto (token)
    });
  }

  validateAuth(token : string): Observable<User> {
    const TokenRequest = {
      'token': token
    }
    const headers = new HttpHeaders({
      'Content-Type': 'application/json'
    });

    return this.http.post<User>(`${this.baseApiUrl}/validate`, TokenRequest, { headers });
  }

  

  saveToken(token: string): void {
    localStorage.setItem(this.tokenKey, token);
    this.isAuthenticatedSubject.next(true);
  }


  logout(): void {
    localStorage.removeItem(this.tokenKey);
    localStorage.removeItem('user');
    this.isAuthenticatedSubject.next(false);
    this.router.navigate(['/auth/login']);
  }

  // Obter token
  getToken(): string | null {
    return localStorage.getItem(this.tokenKey);
  }

  // Verificar se está autenticado
  isAuthenticated(): boolean {
    const token = this.getToken();
    return token ? this.isValidToken(token) : false;
  }

  // Obter dados do usuário
  getUser(): UserData | null {
    const user = localStorage.getItem('user');
    return user ? JSON.parse(user) : null;
  }

  // Salvar dados do usuário
  saveUser(user: UserData): void {
    localStorage.setItem('user', JSON.stringify(user));
  }

  getUserLoggedIn(): User | null {
    const userLoggedIn = localStorage.getItem('userLoggedIn');
    return userLoggedIn ? JSON.parse(userLoggedIn) : null;
  }
}
</file>

<file path="src/app/core/shared/footer/footer.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { FooterComponent } from './footer.component';

describe('FooterComponent', () => {
  let component: FooterComponent;
  let fixture: ComponentFixture<FooterComponent>;
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [FooterComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(FooterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/core/shared/footer/footer.component.ts">
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-footer',
  imports: [],
  templateUrl: './footer.component.html',
  styleUrl: './footer.component.css'
})
export class FooterComponent {
   @Input() title: string = '2025 | Acesso UFU  | Desenvolvido pelo CTIC | Universidade Federal de Uberlândia.';

}
</file>

<file path="src/app/core/shared/menu/menu.component.ts">
import { CommonModule } from '@angular/common';
import { Component, Input } from '@angular/core';
import { RouterLink } from '@angular/router';
@Component({
  selector: 'app-menu',
  imports: [RouterLink,CommonModule],
  templateUrl: './menu.component.html',
  styleUrls: ['./menu.component.css']
})
export class MenuComponent {
  @Input() isAdm: boolean = true;

}
</file>

<file path="README.md">
# Schedule UFU - Documentação do Projeto

## Visão Geral

O **Schedule UFU** é um sistema web para gerenciamento de reservas de espaços esportivos da Universidade Federal de Uberlândia. O projeto foi desenvolvido em Angular, utilizando Tailwind CSS e o Design System do GOVBR, com foco em usabilidade, organização e escalabilidade.

---

## Funcionalidades Implementadas

### Autenticação e Autorização

#### Tela de Login (email-code-send)
- Envio de código de verificação por email
- Validação de email institucional (@ufu.br)
- Redirecionamento para registro ou sistema principal

#### Tela de Registro (email-validator)
- Validação de código enviado por email
- Cadastro de dados pessoais (nome, matrícula, telefone)
- Geração automática de token de autenticação
- Validação de formulário com mensagens de erro personalizadas

#### Sistema de Autenticação
- Gerenciamento de tokens JWT
- Proteção de rotas com AuthGuard
- Armazenamento seguro de dados do usuário
- Logout automático com redirecionamento

### Tela Principal de Reservas (schedule)

#### Visualização de Agendamentos
- Tabela com agendamentos do dia selecionado
- Filtro por ginásio específico
- Exibição de informações: data, horário, ginásio, campus, responsável, curso

#### Filtros e Navegação
- Seletor de data (datepicker) para consulta de agendamentos
- Dropdown para filtrar por ginásio específico
- Atualização automática da tabela conforme filtros aplicados

#### Criação de Reservas
- Botão "Criar Reserva" para abrir modal de agendamento
- Integração com formulário de agendamento completo

### Formulário de Agendamento (schedule-form)

#### Dados Básicos da Reserva
- Seleção de ginásio via dropdown
- Seleção de data e horário (datetime-local)
- Validação automática para horários exatos (sem minutos)

#### Informações do Responsável
- Email institucional obrigatório (@ufu.br)
- Nome do responsável
- Curso/departamento
- Matrícula do aluno
- Telefone com máscara de formatação
- Quantidade de pessoas

#### Agendamento Recorrente
- Opção para ativar recorrência
- Configuração de término (data específica ou número de ocorrências)
- Validação de campos condicionais

#### Validações do Formulário
- Validação em tempo real com mensagens de erro
- Campos obrigatórios marcados visualmente
- Validação de formato de email, telefone e matrícula
- Prevenção de envio com dados inválidos

### Tela Minhas Reservas (userschedules)

#### Visualização de Reservas Pessoais
- Listagem de todas as reservas do usuário logado
- Informações detalhadas de cada agendamento
- Filtro por ginásio para facilitar localização

#### Gerenciamento de Reservas
- Botão "Excluir Reserva" para cancelamento
- Modal de confirmação para exclusão
- Atualização automática da lista após ações

### Formulário de Exclusão de Reserva (delete-schedule-form)

#### Seleção da Reserva para Exclusão
- Dropdown com ginásios disponíveis
- Seleção de data e horário específicos
- Validação de dados antes da exclusão

#### Confirmação de Exclusão
- Validação de formulário completo
- Envio de dados para API de exclusão
- Feedback visual de sucesso ou erro

### Tela de Configurações (configuration)

#### Interface por Abas
- Aba "Geral": Visualização de agendamentos gerais
- Aba "Espaços Esportivos": Gestão de ginásios
- Aba "Permissões": Gerenciamento de usuários

#### Gestão de Agendamentos
- Visualização de todos os agendamentos do sistema
- Filtros por tipo e localização
- Opção de cancelamento de agendamentos (funcionalidade administrativa)

#### Gestão de Espaços Esportivos
- Listagem de todos os ginásios cadastrados
- Informações: nome, campus, horários de funcionamento
- Botões para criar e excluir ginásios

#### Gestão de Usuários e Permissões
- Listagem de usuários do sistema
- Filtro por tipo de usuário (Administrador, Estudante, Professor)
- Visualização de dados: nome, matrícula, email, nível de acesso

#### Gestão de Restrições
- Cadastro de restrições temporárias em ginásios
- Visualização de restrições ativas
- Informações: ginásio, data, descrição da restrição

### Componentes Reutilizáveis

#### Sistema de Dropdowns
- Dropdown customizado (dropdownn) para formulários
- Select-filter para filtros rápidos
- Suporte a opções dinâmicas e eventos personalizados

#### Tabelas Especializadas
- Tabela principal para agendamentos
- Tabela de usuários com ações administrativas
- Tabela de espaços esportivos
- Tabela de restrições

#### Seletores de Data e Hora
- Datepicker integrado com Flatpickr
- Datetime-local para formulários
- Validação automática de formatos

#### Interface do Usuário
- Header com identificação do usuário
- Menu lateral de navegação
- Footer institucional
- Modais responsivos para formulários

### Integrações com Backend

#### Serviços de Agendamento
- Criação de novos agendamentos
- Busca por data e ginásio específicos
- Busca de agendamentos por usuário
- Exclusão de reservas existentes

#### Serviços Administrativos
- Busca de todos os agendamentos (visão administrativa)
- Gestão de usuários do sistema
- Operações com ginásios (CRUD)
- Gestão de restrições temporárias

#### Serviços de Layout
- Carregamento de dados de ginásios
- Gerenciamento de sessão do usuário
- Cache de informações essenciais

### Validações e Tratamento de Erros

#### Validações de Formulário
- Email institucional obrigatório
- Formato de telefone brasileiro
- Campos obrigatórios com feedback visual
- Validação de horários e datas

#### Tratamento de Erros
- Mensagens de erro personalizadas
- Feedback visual para operações
- Tratamento de erros de rede
- Logs detalhados para debugging

#### Experiência do Usuário
- Estados de loading durante operações
- Confirmações para ações destrutivas
- Navegação intuitiva entre telas
- Responsividade para diferentes dispositivos

---

## Development server

To start a local development server, run:

```bash
ng serve
```

Once the server is running, open your browser and navigate to `http://localhost:4200/`. The application will automatically reload whenever you modify any of the source files.

## Code scaffolding

Angular CLI includes powerful code scaffolding tools. To generate a new component, run:

```bash
ng generate component component-name
```

For a complete list of available schematics (such as `components`, `directives`, or `pipes`), run:

```bash
ng generate --help
```

## Building

To build the project run:

```bash
ng build
```

This will compile your project and store the build artifacts in the `dist/` directory. By default, the production build optimizes your application for performance and speed.

## Running unit tests

To execute unit tests with the [Karma](https://karma-runner.github.io) test runner, use the following command:

```bash
ng test
```

## Running end-to-end tests

For end-to-end (e2e) testing, run:

```bash
ng e2e
```

Angular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.

## Additional Resources

For more information on using the Angular CLI, including detailed command references, visit the [Angular CLI Overview and Command Reference](https://angular.dev/tools/cli) page.

---

## Estrutura de Pastas

### src/app/core/components

Componentes reutilizáveis e especializados:

- **dropdownn/**: Dropdown customizado para seleção em formulários.
- **select-filter/**: Dropdown para filtros rápidos em tabelas/listas.
- **schedule-form/**: Formulário principal de agendamento, com suporte a recorrência.
- **table/**: Tabela para exibição de reservas, com botões de ação (reservar, editar).
- **table-users/**: Tabela para gestão de usuários (nome, matrícula, email, tipo, ações).
- **table-espacos/**: Tabela para gestão de espaços esportivos (nome, campus, horários, disponibilidade, ações).
- **datapicker/**: Componente para seleção de datas e horários.
- **slider/**: Componente de slider para seleção de valores numéricos (ex: antecedência de agendamento).

### src/app/core/models

Interfaces e tipos utilizados em toda a aplicação:

- **Option.ts**: Interface para opções de dropdowns.
- **Reserva.ts**: Interface para reservas/agendamentos.
- **User.ts**: Interface para usuários do sistema.
- **Ginasio.ts**: Interface para espaços esportivos.

### src/app/core/pages

Páginas principais do sistema:

- **schedule/**: Página principal de reservas, exibe tabela de horários e permite abrir o formulário de agendamento.
- **userschdeules/**: Página "Minhas Reservas", exibe reservas do usuário e permite edição/cancelamento.
- **configuration/**: Página de configurações administrativas (gestão de reservas, espaços, permissões).

### src/app/core/routes

- **app.routes.ts**: Definição das rotas principais do sistema.

### src/app/core/services

- **schedule-time.service.ts**: Serviço para comunicação entre componentes (ex: abrir modal de agendamento).

### src/app/core/shared

Componentes compartilhados entre páginas:

- **header/**: Cabeçalho do sistema, exibe logo, nome do sistema e usuário logado.
- **footer/**: Rodapé do sistema, exibe informações institucionais.
- **menu/**: Menu lateral de navegação entre páginas principais.

---

## Outras Pastas

### src/assets

- Imagens, ícones e arquivos estáticos.

### src/styles.css

- Estilos globais e importação do Tailwind CSS.

---

## Observações e Boas Práticas

- Cada componente Angular está organizado em sua própria pasta, contendo arquivos `.ts`, `.html`, `.css` e `.spec.ts` (testes).
- Os componentes são reutilizáveis e seguem o padrão de comunicação via `@Input` e `@Output` para integração entre eles.
- Serviços são utilizados para lógica compartilhada e comunicação entre componentes que não possuem relação direta de hierarquia.
- O projeto utiliza Tailwind CSS para estilização rápida e responsiva, além do Design System do GOVBR para padronização visual.
- O código segue boas práticas de modularização, separação de responsabilidades e uso de tipagem forte com TypeScript.

---

## Como Rodar o Projeto

1. Instale as dependências:

```bash
npm install
```

2. Inicie o servidor de desenvolvimento:

```bash
ng serve
```

3. Acesse em [http://localhost:4200](http://localhost:4200)

---

## Licença

Projeto acadêmico - Universidade Federal de Uberlândia.
</file>

<file path="src/app/app.config.ts">
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { routes } from './core/routes/app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient()
  ]
};
</file>

<file path="src/app/core/components/delete-schedule-form/delete-schedule-form.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Output } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { DropdownnComponent } from '../dropdownn/dropdownn.component';
import { Ginasio } from '../../models/Ginasio';
import { option } from '../../models/Option';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { SchedulesService } from '../../services/schedule/schedules.service';
import { DeleteSchedule } from '../../models/DeleteSchedule';

@Component({
  selector: 'app-delete-schedule-form',
  imports: [CommonModule, ReactiveFormsModule, DropdownnComponent],
  templateUrl: './delete-schedule-form.component.html',
  styleUrl: './delete-schedule-form.component.css'
})
export class DeleteScheduleFormComponent {
    scheduleForm!: FormGroup;
    horarioRecorrente: boolean = false;
    Ginasios: Ginasio[] = [];
    GinasioOptions: Array<option> = [];
    @Output() send = new EventEmitter<boolean>();

    constructor(private fb: FormBuilder, private schedulesService: SchedulesService, private layoutService : LayoutSchedulesService) { }

        ngOnInit(): void {
        this.Ginasios = this.layoutService.getGinasios();
        this.setupGinasioOptions();
        
        this.scheduleForm = this.fb.group({
            ginasio: ['', Validators.required],
            horario: ['', [Validators.required]],
            matricula: ['', Validators.required]
        });

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });
        
        // ✅ Observar mudanças nos ginásios
        this.layoutService.ginasios$.subscribe(ginasios => {
            this.Ginasios = ginasios;
            this.setupGinasioOptions();
            console.log('Ginásios atualizados via Observable (DeleteScheduleForm):', ginasios);
        });
    }

    private setupGinasioOptions(): void {
        this.GinasioOptions = this.Ginasios.map(ginasio => ({
            id: ginasio.nome,
            value: ginasio.nome,
            label: `${ginasio.nome} (${ginasio.campus})`
        }));
    }

    onSubmit(): void {
        this.schedulesService.deleteSchedule(
            this.createDeleteScheduleForm()
        ).subscribe({
            next: () => {
                this.send.emit(true);
                console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            },
            error: (err) => {
                this.send.emit(false);
                let errorMessage = 'Erro inesperado ao enviar formulário.';
                if (err.error && typeof err.error === 'string') {
                    errorMessage = err.error;
                } else if (err.error && err.error.message) {
                    errorMessage = err.error.message;
                } else if (err.message) {
                    errorMessage = err.message;
                } else if (err.status) {
                    errorMessage = `Erro ${err.status}: ${err.statusText || 'Erro no servidor'}`;
                }
                
                alert('Erro ao enviar formulário: ' + errorMessage);
                console.error('Erro ao enviar formulário:', err);
            }
        });

        this.scheduleForm.get('horario')?.valueChanges.subscribe(value => {
          if (value) {
            const date = new Date(value);
            // Zera os minutos e segundos da data
            date.setMinutes(0);
            date.setSeconds(0);
            
            // Atualiza o valor do form control, forçando a hora cheia
            // O { emitEvent: false } é crucial para evitar loops infinitos
            this.scheduleForm.get('horario')?.setValue(this.toIsoString(date), { emitEvent: false });
          }
        });
    }

        
    private toIsoString(date: Date): string {
      const pad = (num: number): string => (num < 10 ? '0' : '') + num;
      return date.getFullYear() +
          '-' + pad(date.getMonth() + 1) +
          '-' + pad(date.getDate()) +
          'T' + pad(date.getHours()) +
          ':' + pad(date.getMinutes());
    }

    getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'horario') {
                return 'Selecione uma data e horário válidos.';
            }
            if (controlName === 'telefone') {
                return 'Use o formato: (XX) XXXXX-XXXX.';
            }
            if (controlName === 'email') {
                return 'Use um email válido da UFU: nome@ufu.br';
            }
        }
        if (control?.hasError('min')) {
            return 'O valor deve ser maior que 0.';
        }
        return '';
    }


    onGinasioSelected(selected: option): void {
        this.scheduleForm.get('ginasio')?.setValue(selected.value);
    }

    private createDeleteScheduleForm(): DeleteSchedule {
    const formValue = this.scheduleForm.value;
    
    // Parse datetime-local format (YYYY-MM-DDTHH:mm) to separate date and time
    const datetimeValue = formValue.horario; // e.g., "2025-07-27T14:30"
    
    if (!datetimeValue || !datetimeValue.includes('T')) {
        throw new Error('Formato de data/hora inválido');
    }
    
    const [dateString, timeString] = datetimeValue.split('T'); // ["2025-07-27", "14:30"]
    
    // Add seconds to time format for Java Time parsing (HH:mm:ss)
    const timeWithSeconds = timeString.includes(':') ? `${timeString}:00` : timeString;

    // Retornar o objeto DeleteSchedule com os valores formatados
    const deleteSchedule: DeleteSchedule = {
        horario: timeWithSeconds,
        data: dateString,
        ginasio: formValue.ginasio,
        matriculaAluno: formValue.matricula
    };
    return deleteSchedule;
  }
}
</file>

<file path="src/app/core/components/ginasio-form/ginasio-form.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Output } from '@angular/core';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AdmService } from '../../services/adm/adm.service';
import { CreateGinasio } from '../../models/CreateGinasioRequest';

@Component({
  selector: 'app-ginasio-form',
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './ginasio-form.component.html',
  styleUrl: './ginasio-form.component.css'
})
export class GinasioFormComponent {
    scheduleForm!: FormGroup;
    @Output() send = new EventEmitter<boolean>();

    constructor(private fb: FormBuilder, private admService: AdmService) { }

    
    ngOnInit(): void {
        this.scheduleForm = this.fb.group({
            nomeGinasio: ['', Validators.required],
            campus: ['', [Validators.required]],
            horarioAbertura: ['', [Validators.required]],
            horarioFechamento: ['', [Validators.required]]
        });

        this.scheduleForm.get('horarioAbertura')?.valueChanges.subscribe(value => {
          if (value) {
            const timeWithFullHour = this.roundToFullHour(value);
            if (timeWithFullHour !== value) {
              this.scheduleForm.get('horarioAbertura')?.setValue(timeWithFullHour, { emitEvent: false });
            }
          }
        });

        this.scheduleForm.get('horarioFechamento')?.valueChanges.subscribe(value => {
          if (value) {
            const timeWithFullHour = this.roundToFullHour(value);
            if (timeWithFullHour !== value) {
              this.scheduleForm.get('horarioFechamento')?.setValue(timeWithFullHour, { emitEvent: false });
            }
          }
        });
      }

        onSubmit(): void {
        this.admService.createGinasio(
            this.buildGinasioCreateRequest()
        ).subscribe({
            next: () => {
                this.send.emit(true);
                console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            },
            error: (err) => {
                this.send.emit(false);
                let errorMessage = 'Erro inesperado ao enviar formulário.';
                if (err.error && typeof err.error === 'string') {
                    errorMessage = err.error;
                } else if (err.error && err.error.message) {
                    errorMessage = err.error.message;
                } else if (err.message) {
                    errorMessage = err.message;
                } else if (err.status) {
                    errorMessage = `Erro ${err.status}: ${err.statusText || 'Erro no servidor'}`;
                }
                
                alert('Erro ao enviar formulário: ' + errorMessage);
                console.error('Erro ao enviar formulário:', err);
            }
        });
      }


        getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'horarioAbertura' || controlName === 'horarioFechamento') {
                return 'Selecione horário válidos.';
            }
        }
        if (control?.hasError('min')) {
            return 'O valor deve ser maior que 0.';
        }
        return '';
    }

    private buildGinasioCreateRequest(): CreateGinasio {
    const formValue = this.scheduleForm.value;
    const datetimeValueStart = formValue.horarioAbertura; // e.g., "14:30"
    const datetimeValueEnd = formValue.horarioFechamento; // e.g., "15:30"
    const timeWithSecondsStart = this.formatTimeWithSeconds(datetimeValueStart);
    const timeWithSecondsEnd = this.formatTimeWithSeconds(datetimeValueEnd);

    return {
        nome: formValue.nomeGinasio,
        campus: formValue.campus,
        startTime: timeWithSecondsStart,
        endTime: timeWithSecondsEnd
    };
}

    private formatTimeWithSeconds(timeValue: string): string {
        if (!timeValue) return '';
        if (timeValue.split(':').length === 3) {
            return timeValue;
        }
        if (timeValue.split(':').length === 2) {
            return `${timeValue}:00`;
        }
        return timeValue;
    }

    // ✅ Novo método para arredondar para hora cheia em campos de time
    private roundToFullHour(timeValue: string): string {
        if (!timeValue || !timeValue.includes(':')) return timeValue;
        
        const [hours, minutes] = timeValue.split(':');
        // Força sempre minutos = 00 (hora cheia)
        return `${hours}:00`;
    }

}
</file>

<file path="src/app/core/components/slider/slider.component.ts">
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormsModule } from '@angular/forms';
import {MatSliderModule} from '@angular/material/slider';

@Component({
  selector: 'app-slider',
  imports: [MatSliderModule, FormsModule],
  templateUrl: './slider.component.html',
  styleUrl: './slider.component.css'
})
export class SliderComponent {
  @Input() min: number = 0;
  @Input() max: number = 200;
  @Input() step: number = 10;
  @Input() title: string = "Titulo Slider";
  @Input() value: number = this.min;
  @Output() valueChange: EventEmitter<number> = new EventEmitter<number>();
  onSliderValueChange(event: Event): void {
    const target = event.target as HTMLInputElement;
    const newValue = Number(target.value);
    this.value = newValue; 
    this.valueChange.emit(this.value);
  }



}
</file>

<file path="src/app/core/components/table-espacos/table-espacos.component.html">
<!-- Tabela  -->
<div title="{{tableName}}">
    <div class="table-header">
      <div class="top-bar">
        <h3 class="table-title">{{tableName}}</h3>
      </div>
    </div>
    <div class="tabela-horarios">
      <table>
        <thead>
          <th class="border-right text-center" scope="col">Nome</th>
          <th class="border-right text-center" scope="col">Campus</th>
          <th class="border-right text-center" scope="col">Funcionamento</th>
        </thead>
        <tbody>
          <tr *ngFor="let row of tableData">
            <td class="text-center">{{ row.nome }}</td>
            <td class="text-center">{{ row.campus }}</td>
            <td class="text-center">{{ row.startTime }} - {{ row.endTime }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</file>

<file path="src/app/core/components/table-espacos/table-espacos.component.ts">
import { Component, Input } from '@angular/core';
import { Ginasio } from '../../models/Ginasio';
import { CommonModule } from '@angular/common';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';

@Component({
  selector: 'app-table-espacos',
  imports: [CommonModule],
  templateUrl: './table-espacos.component.html',
  styleUrl: './table-espacos.component.css'
})
export class TableEspacosComponent {
    @Input() tableName: string = 'Tabela';
    @Input() tableData: Ginasio[] = [];


}
</file>

<file path="src/app/core/components/table-users/table-users.component.html">
<!-- Tabela  -->
<div title="{{tableName}}">
    <div class="table-header">
      <div class="top-bar">
        <h3 class="table-title">{{tableName}}</h3>
      </div>
    </div>
    <div class="tabela-horarios">
      <table>
        <thead>
          <th class="border-right text-center" scope="col">Nome</th>
          <th class="border-right text-center" scope="col">Matricula</th>
          <th class="border-right text-center" scope="col">Email</th>
          <th class="border-right text-center" scope="col">Acesso</th>
        </thead>
        <tbody>
          <tr *ngFor="let row of tableData">
            <td class="text-center">{{ row.nome }}</td>
            <td class="text-center">{{ row.matricula }}</td>
            <td class="text-center">{{ row.email }}</td>
            <td class="text-center">{{ row.acess }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</file>

<file path="src/app/core/layouts/schedule-layout/schedule-layout.component.html">
<app-header [user]="getUsername()"></app-header>
<div class="flex h-full m-0">
    <div class="w-1/4 h-max">
        <app-menu [isAdm]="getAccess()"></app-menu>
    </div>
    <div class="flex-1 p-5 shadow-content h-max ">
      <router-outlet></router-outlet>
    </div>
</div>
<app-footer [title]="'©2022 - 2024 | Acesso UFU (v0.14.2) | Desenvolvido pelo CTIC | Universidade Federal de Uberlândia'"></app-footer>
</file>

<file path="src/app/core/pages/email-code-send/email-code-send.component.ts">
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth/auth.service';

@Component({
  selector: 'app-email-code-send',
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './email-code-send.component.html',
  styleUrl: './email-code-send.component.css'
})
export class EmailCodeSendComponent implements OnInit {
    scheduleForm!: FormGroup;

    constructor(
        private fb: FormBuilder,
        private router: Router,
        private service : AuthService
    ) { }

    ngOnInit(): void {
        const savedEmail = localStorage.getItem('userEmail') || '';
        
        this.scheduleForm = this.fb.group({
            email: [
                savedEmail,
                [
                    Validators.required, 
                    Validators.email,
                    Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]*\.?ufu\.br$/)
                ]
            ]
        });

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });

        if (savedEmail) {
            console.log('Email recuperado do localStorage:', savedEmail);
        }
    }

    onSubmit(): void {
    if (this.scheduleForm.valid) {
        const email = this.scheduleForm.value.email;
        console.log('Formulário enviado com sucesso!', email);
        
        this.service.sendEmailCode(email).subscribe({
            next: (response) => {
                localStorage.removeItem('userEmail');
                localStorage.setItem('userEmail', email);
                console.log('Código enviado com sucesso!', response);
                console.log('Email salvo no localStorage:', email);
                this.router.navigate(['/auth/register']);
            },
            error: (error) => {
                alert('Erro ao enviar o código. Por favor, tente novamente.');
                console.error('Erro ao enviar o código:', error);
            }
        });
        
    } else {
        console.log('Formulário inválido');
        this.markFormGroupTouched();
    }
  }

    private markFormGroupTouched(): void {
        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsTouched();
        });
    }

    getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('email')) {
            return 'Email inválido.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'email') {
                return 'Use um email válido da UFU: nome@ufu.br';
            }
        }
        return '';
    }
}
</file>

<file path="src/app/core/pages/email-validator/email-validator.component.html">
<div class="flex h-full m-0 items-center justify-center">
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" class="h-full w-1/3 flex flex-col gap-4">
         <!-- Linha 2: Nome -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input large input-button"
                    [class.invalid]="scheduleForm.get('nome')?.invalid && scheduleForm.get('nome')?.touched">
                    <label for="input-search-responsavel">Nome Completo</label>
                    <input id="input-search-responsavel" type="search" placeholder="Digite o seu nome completo"
                        formControlName="nome" />
                </div>
                <div *ngIf="scheduleForm.get('nome')?.invalid && scheduleForm.get('nome')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('nome') }}
                </div>
            </div>
        </div>

        <!-- Linha 3: Matrícula -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="matricula">Matrícula</label>
                    <input id="matricula" type="text" formControlName="matricula"
                        placeholder="Preenchido automaticamente ao selecionar o responsável"
                        [class.invalid]="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('matricula') }}
                </div>
            </div>
        </div>

        <!-- Linha 4: Telefone -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input"
                    [class.invalid]="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched">
                    <label for="telefone">Telefone</label>
                    <input id="telefone" type="text" formControlName="telefone" placeholder="Digite o telefone" />
                    <div *ngIf="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('telefone') }}
                    </div>
                </div>
            </div>
            </div>

        <!-- Linha 5: Código Email -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="codigo">Código</label>
                    <input id="codigo" type="text" formControlName="codigo"
                        placeholder="Código númerico enviado para o email"
                        [class.invalid]="scheduleForm.get('codigo')?.invalid && scheduleForm.get('codigo')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('codigo')?.invalid && scheduleForm.get('codigo')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('codigo') }}
                </div>
            </div>
        </div>

        <!-- Linha 6: Botão de Envio -->
            
        <div class="w-full mb-10">
            <button type="submit" 
                    [disabled]="scheduleForm.invalid" 
                    class="br-button primary">
                Validar código de verificação
            </button>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/shared/menu/menu.component.css">
button:hover{
    background-color: #2670E8;
    color: #ffffff;
    cursor: pointer;
}
</file>

<file path="angular.json">
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "schedule-ufu": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/schedule-ufu",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "@angular/material/prebuilt-themes/azure-blue.css",
              "src/styles.css",
              "node_modules/@govbr-ds/core/dist/core.min.css",
              "node_modules/flatpickr/dist/flatpickr.min.css"
            ],
            "scripts": [
              "node_modules/@govbr-ds/core/dist/core.min.js"
            ]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kB",
                  "maximumError": "1MB"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "4kB",
                  "maximumError": "8kB"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "optimization": false,
              "extractLicenses": false,
              "sourceMap": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "buildTarget": "schedule-ufu:build:production"
            },
            "development": {
              "buildTarget": "schedule-ufu:build:development",
              "proxyConfig": "proxy.conf.json"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n"
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              {
                "glob": "**/*",
                "input": "public"
              }
            ],
            "styles": [
              "@angular/material/prebuilt-themes/azure-blue.css",
              "src/styles.css"
            ],
            "scripts": [
                "node_modules/@govbr-ds/core/dist/core.min.js"
              ]
          }
        }
      }
    }
  },
  "cli": {
    "analytics": "1121ec25-cfa0-4dee-aa92-42544c2e1f3b"
  }
}
</file>

<file path="package.json">
{
  "name": "schedule-ufu",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^19.0.0",
    "@angular/cdk": "^19.1.2",
    "@angular/common": "^19.0.0",
    "@angular/compiler": "^19.0.0",
    "@angular/core": "^19.0.0",
    "@angular/forms": "^19.0.0",
    "@angular/material": "^19.1.2",
    "@angular/platform-browser": "^19.0.0",
    "@angular/platform-browser-dynamic": "^19.0.0",
    "@angular/router": "^19.0.0",
    "@govbr-ds/core": "^3.6.1",
    "@tailwindcss/postcss": "^4.1.2",
    "@tailwindcss/vite": "^4.1.2",
    "flatpickr": "^4.6.13",
    "ngx-mask": "^19.0.6",
    "postcss": "^8.5.3",
    "rxjs": "~7.8.0",
    "tailwindcss": "^4.1.2",
    "tslib": "^2.3.0",
    "zone.js": "~0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^19.0.6",
    "@angular/cli": "^19.0.6",
    "@angular/compiler-cli": "^19.0.0",
    "@types/jasmine": "~5.1.0",
    "jasmine-core": "~5.4.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.1.0",
    "typescript": "~5.6.2"
  }
}
</file>

<file path="src/app/core/components/generic-modal/generic-modal.component.html">
<div class="modal-overlay fixed h-full w-full inset-0 bg-black bg-opacity-50 z-[9999]" 
     *ngIf="isOpen" 
     (click)="onOverlayClick()"></div>

<div class="fixed inset-0 flex items-center justify-center z-[10000] p-4"
     *ngIf="isOpen">
  <div class="bg-white p-6 shadow-lg rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto">
    
    <div class="flex justify-end items-center mb-4">
      <button class="text-gray-400 hover:text-gray-600 text-xl font-bold w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-100" 
              (click)="closeModal()"
              aria-label="Fechar modal">×</button>
    </div>
    
    <div [ngSwitch]="formType">
      <app-schedule-form 
        *ngSwitchCase="FormType.CREATE_SCHEDULE"
        (send)="onFormSubmit($event)">
      </app-schedule-form>
      
      <app-delete-schedule-form 
        *ngSwitchCase="FormType.DELETE_SCHEDULE"
        (send)="onFormSubmit($event)">
      </app-delete-schedule-form>
      

      <app-ginasio-form
        *ngSwitchCase="FormType.CREATE_GINASIO"
        (send)="onFormSubmit($event)">
      </app-ginasio-form>

      <app-ginasio-form-delete
        *ngSwitchCase="FormType.DELETE_GINASIO"
        (send)="onFormSubmit($event)">
      </app-ginasio-form-delete>

      
      <app-restricao-form
        *ngSwitchCase="FormType.CREATE_RESTRICAO"
        (send)="onFormSubmit($event)">
      </app-restricao-form>

      <app-restricao-form-delete
        *ngSwitchCase="FormType.DELETE_RESTRICAO"
        (send)="onFormSubmit($event)">
      </app-restricao-form-delete>

      
      <app-adm-form
        *ngSwitchCase="FormType.CREATE_ADMINISTRATOR"
        (send)="onFormSubmit($event)">
      </app-adm-form>

      <div *ngSwitchDefault class="p-4 text-center text-gray-500">
        <p>Formulário não implementado para: {{ formType }}</p>
        <button class="br-button secondary mt-4" (click)="closeModal()">Fechar</button>
      </div>
    </div>
    
  </div>
</div>
</file>

<file path="src/app/core/components/generic-modal/generic-modal.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, Input, Output, OnChanges, SimpleChanges } from '@angular/core';
import { FormType } from '../../models/FormType';
import { ScheduleFormComponent } from '../schedule-form/schedule-form.component';
import { DeleteScheduleFormComponent } from '../delete-schedule-form/delete-schedule-form.component';
import { GinasioFormComponent } from "../ginasio-form/ginasio-form.component";
import { GinasioFormDeleteComponent } from "../ginasio-form-delete/ginasio-form-delete.component";
import { RestricaoFormComponent } from "../restricao-form/restricao-form.component";
import { RestricaoFormDeleteComponent } from "../restricao-form-delete/restricao-form-delete.component";
import { AdmFormComponent } from "../adm-form/adm-form.component";

@Component({
  selector: 'app-generic-modal',
  imports: [CommonModule, ScheduleFormComponent, DeleteScheduleFormComponent, GinasioFormComponent, GinasioFormDeleteComponent, RestricaoFormComponent, RestricaoFormDeleteComponent, AdmFormComponent],
  templateUrl: './generic-modal.component.html',
  styleUrl: './generic-modal.component.css'
})
export class GenericModalComponent implements OnChanges {
  @Input() isOpen: boolean = false;
  @Input() formType: FormType = FormType.CREATE_SCHEDULE;
  @Input() title: string = '';
  @Output() close = new EventEmitter<void>();
  @Output() formSubmitted = new EventEmitter<boolean>();

  FormType = FormType; // Expose enum to template

  ngOnChanges(changes: SimpleChanges): void {
  }

  closeModal(): void {
    this.close.emit();
  }

  onOverlayClick(): void {
    this.closeModal();
  }

  onFormSubmit(success: boolean): void {
    this.formSubmitted.emit(success);
  }
}
</file>

<file path="src/app/core/components/select-filter/select-filter.component.html">
<div class="br-select">
    <div class="br-input">
      <input id="select-simple" type="text" [value]="selectedLabel" placeholder="{{placeholder}}"
        readonly />
      <button class="br-button" type="button" aria-label="Exibir lista" (click)="toggleDropdown()" tabindex="-1"
        data-trigger="data-trigger">
        <i class="fas fa-angle-down" aria-hidden="true"></i>
      </button>
    </div>
    <div [ngClass]="{'hidden': !isDropdownOpen}" style="position: absolute;z-index: 1000;" tabindex="0">
      <div class="br-item" tabindex="-1" *ngFor="let option of dropdownOptions"
        (click)="onDropdownChange(option.value)">
        <div class="br-radio">
          <input [id]="option.id" type="radio" name="actions" [value]="option.value"
            [checked]="selectedGinasio === option.value" />
          <label [for]="option.id">{{ option.label }}</label>
        </div>
      </div>
    </div>
  </div>
</file>

<file path="src/app/core/components/select-filter/select-filter.component.ts">
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild, OnInit, OnChanges, SimpleChanges} from '@angular/core';
import { option } from '../../models/Option';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-select-filter',
  imports: [CommonModule],
  templateUrl: './select-filter.component.html',
  styleUrl: './select-filter.component.css'
})
export class SelectFilterComponent implements OnInit, OnChanges {
    @Input() placeholder: string = 'Selecione o Ginásio para filtrar';
    @Input() dropdownOptions: Array<option> = [];
    @Output() selectedOption = new EventEmitter<option>();
  

    @ViewChild('dropdownList') dropdownList!: ElementRef;
    isDropdownOpen: boolean = false;
    selectedGinasio: string = '';
    selectedLabel: string = ''; 
    
    ngOnInit(): void {
        this.selectedLabel = this.placeholder;
    }

    ngOnChanges(changes: SimpleChanges): void {
        if (changes['placeholder'] && changes['placeholder'].currentValue) {
            this.selectedLabel = changes['placeholder'].currentValue;
        }
    }

    //lógica do dropdown
    toggleDropdown(): void {
        this.isDropdownOpen = !this.isDropdownOpen;
        if (this.isDropdownOpen) {
            this.dropdownList.nativeElement.style.display = 'absolute';
        } else {
            this.dropdownList.nativeElement.style.display = 'none';
        }
    }

    onDropdownChange(selectedValue: string): void {
        var selected = this.dropdownOptions.find(option => option.value === selectedValue) || this.dropdownOptions[0];
        this.selectedLabel = selected.label;
        this.selectedGinasio = selected.value;
        this.selectedOption.emit(selected); 
        this.toggleDropdown();
    }

    reset(): void {
        this.selectedLabel = this.placeholder;
        this.selectedGinasio = '';
        this.isDropdownOpen = false;
    }
}
</file>

<file path="src/app/core/layouts/schedule-layout/schedule-layout.component.ts">
import { Component } from '@angular/core';
import { Router, RouterOutlet } from '@angular/router';
import { HeaderComponent } from '../../shared/header/header.component';
import { FooterComponent } from '../../shared/footer/footer.component';
import { MenuComponent } from '../../shared/menu/menu.component';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { UserData } from '../../models/UserData';
import { User } from '../../models/User';

@Component({
  selector: 'app-schedule-layout',
  imports: [   
     RouterOutlet,
      HeaderComponent,
      FooterComponent,
      MenuComponent],
  templateUrl: './schedule-layout.component.html',
  styleUrl: './schedule-layout.component.css'
})
export class ScheduleLayoutComponent {
  private user: UserData | null = null;
  private userLoggedIn: User | null = null;

  constructor(private layoutService: LayoutSchedulesService, private router: Router) {
    this.userLoggedIn = this.layoutService.getUserLoggedIn();
    this.user = this.layoutService.getUser();
    if (this.user === null) {
      console.error('User not found');
      this.router.navigate(['/auth/login']);
    } else {
      console.log('User found:', this.user);
    }
   }

  getUsername(): string {
    return this.user ? this.user.nome : 'Guest';
  }

  getAccess(): boolean {
    console.log('User logged in:', this.userLoggedIn);
    return this.userLoggedIn?.acess === 'ADMIN';
  }
}
</file>

<file path="src/app/core/pages/email-validator/email-validator.component.ts">
import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth/auth.service';
import { UserData } from '../../models/UserData';

@Component({
  selector: 'app-email-validator',
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './email-validator.component.html',
  styleUrl: './email-validator.component.css'
})
export class EmailValidatorComponent  implements OnInit {
    scheduleForm!: FormGroup;
    

      constructor(
        private fb: FormBuilder,
        private router: Router,
        private service : AuthService
      ) { }

    ngOnInit(): void {
        this.scheduleForm = this.fb.group({
            nome: ['', Validators.required],
            matricula: ['', 
                [Validators.required, Validators.pattern(/^\d{5}[A-Za-z]{3}\d{3}$/)]],
            telefone: [
                '',
                [Validators.required, Validators.pattern(/^\(\d{2}\) \d{5}-\d{4}$/)],
            ],
            codigo: ['', Validators.required],

        });

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });
    }

    onSubmit(): void {
        if (this.scheduleForm.valid) {
            console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            const userEmail = localStorage.getItem('userEmail') || '';
            if(userEmail === '')  this.router.navigate(['/auth/login']);
            console.log('Email do usuário:', userEmail);

            this.service.verifyEmailCode(userEmail, this.scheduleForm.value.codigo).subscribe({
                next: (response) => {
                    console.log('Código validado com sucesso!', response);
                    this.generateAuth(userEmail);
                },
                error: (error) => {
                    alert('Erro ao validar o código. Por favor, tente novamente.');
                    console.error('Erro ao validar o código:', error);
                }
            });

        } else {
            console.log('Formulário inválido');
            this.markFormGroupTouched();
        }
    }

    private markFormGroupTouched(): void {
        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsTouched();
        });
    }

    private generateAuth(userEmail: string): void {
        const userData : UserData = {
            email: userEmail,
            nome: this.scheduleForm.value.nome,
            matricula: this.scheduleForm.value.matricula,
            telefone: this.scheduleForm.value.telefone,
            codigo: this.scheduleForm.value.codigo
        };
        
        this.service.gerenateAuth(userData).subscribe({
            next: (response) => {
                console.log('Token gerado com sucesso!', response);
                this.service.saveToken(response);
                this.service.saveUser(userData);
                this.router.navigate(['/reservas']);
            },
            error: (error) => {
                alert('Erro ao gerar token. Por favor, tente novamente.');
                console.error('Erro ao gerar o token:', error);
            }
        });
    }

    getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'matricula') {
                return 'Use sua matrícula no formato: 00000XXX000';
            }
            if (controlName === 'telefone') {
                return 'Use o formato: (XX) XXXXX-XXXX.';
            }
        }
        return '';
    }
}
</file>

<file path="src/app/core/services/adm/adm.service.ts">
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { AuthService } from '../auth/auth.service';
import { ScheduleModel } from '../../models/ScheduleModel';
import { Observable } from 'rxjs';
import { User } from '../../models/User';
import { Restricao } from '../../models/Restricao';
import { CreateGinasio } from '../../models/CreateGinasioRequest';
import { RestricaoRequest } from '../../models/RestricaoRequest';
import { UserData } from '../../models/UserData';

@Injectable({
  providedIn: 'root'
})
export class AdmService {
    private baseApiUrl = 'http://localhost:3000/v1/adm';

    constructor(private http: HttpClient, private authService: AuthService) { 
      authService.getToken();
    }

  // Buscar todos os agendamentos
  getAllSchedules(): Observable<ScheduleModel[]> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.get<ScheduleModel[]>(`${this.baseApiUrl}/schedule`, { headers });
  }

  // Buscar usuários
  getAllUsers(): Observable<User[]> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.get<User[]>(`${this.baseApiUrl}/users`, { headers });
  }

  getAllRestrictions(): Observable<Restricao[]> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.get<Restricao[]>(`${this.baseApiUrl}/restricao`, { headers });
  }

   // Apagar ginásio por id
  deleteGinasio(ginasio: string): Observable<void> {
    const Authorization = this.authService.getToken();
    console.log('Deletando ginásio:', ginasio);
    console.log('Authorization:', Authorization);
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });
    return this.http.post<void>(`${this.baseApiUrl}/ginasio/delete/${ginasio}`, {}, { headers });
  }

  createGinasio(ginasio: CreateGinasio): Observable<void> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });
    return this.http.post<void>(`${this.baseApiUrl}/ginasio`, ginasio, { headers });
  }

  createRestricao(restricao: RestricaoRequest): Observable<void> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });
    return this.http.post<void>(`${this.baseApiUrl}/restricao`, restricao, { headers });
  }

  deleteRestricao(restricao: RestricaoRequest): Observable<void> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });
    return this.http.post<void>(`${this.baseApiUrl}/restricao/delete`, restricao, { headers });
  }

    generateAdm(userData: UserData): Observable<any> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.post(`${this.baseApiUrl}/user`, userData, { 
      headers,
    });
  }

}
</file>

<file path="src/app/core/shared/menu/menu.component.html">
<nav class="flex flex-col bg-white text-center p-0 m-0">
    <div class="border-b border-black">
        <button routerLink="reservas" class="w-full h-max p-2 text-left pl-4">
            Reservas
        </button>
    </div>
    <div class="border-b border-black">
        <button routerLink="minhas-reservas" class="w-full h-max p-2 text-left pl-4">
            Minhas Reservas
        </button>
    </div>
    <div *ngIf="isAdm" class="border-b border-black">
        <button routerLink="configuracoes" class="w-full h-max p-2 text-left pl-4">
            Configurações
        </button>
    </div>
 </nav>
</file>

<file path="src/index.html">
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>SCHEDULE-UFU</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="/assets/favicon.ico">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="node_modules/@govbr-ds/core/dist/core.min.css" />
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="flex flex-col h-max m-0 font-sans">
  <app-root></app-root> 
</body>
</html>
</file>

<file path="src/app/app.component.css">
.shadow-content{
    box-shadow: inset 0 0 3px #000;
}
</file>

<file path="src/app/app.module.ts">
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { ScheduleComponent } from './core/pages/schedule/schedule.component';
import { ConfigurationComponent } from './core/pages/configuration/configuration.component';
import { UserschdeulesComponent } from './core/pages/userschdeules/userschdeules.component';
import { RouterLink } from '@angular/router';
import { provideNgxMask } from 'ngx-mask';
import { ReactiveFormsModule } from '@angular/forms';



@NgModule({
    declarations: [],
    imports: [
        BrowserModule,
        AppComponent,
        ScheduleComponent,
        ConfigurationComponent,
        UserschdeulesComponent,
        RouterLink,
        ReactiveFormsModule,
    ],
    providers: [
        provideNgxMask()
    ],
})
export class AppModule { }
</file>

<file path="src/app/core/components/schedule-form/schedule-form.component.css">
.container {
    max-width: 100%;
    margin: 0 auto;
    padding: 0 15px;
    box-sizing: border-box;
}

.feedback {
    font-size: 0.875rem;
    margin-top: 5px;
    min-height: 20px;
    visibility: hidden;
}

.feedback.danger {
    visibility: visible;
}

.row {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
}

.col-sm-6,
.col-sm-12 {
    flex: 1 1 calc(50% - 15px);
    max-width: calc(100% - 15px);
}

.col-sm-12 {
    flex: 1 1 100%;
    max-width: 100%;
}

.d-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.br-label {
    margin-bottom: 8px;
}

.time-label {
    margin-bottom: 8px;
}

.form-check-label {
    margin-left: 4px;
}

.form-check-input {
    margin: 0;
}
</file>

<file path="src/app/core/components/table/table.component.html">
<!-- Tabela  -->
<div title="{{tableName}}">
  <div class="table-header">
    <div class="top-bar">
      <h3 class="table-title">{{tableName}}</h3>
    </div>
  </div>
  <div class="tabela-horarios">
    <table>
      <thead>
        <th class="border-right text-center" scope="col">Dia</th>
        <th class="border-right text-center" scope="col">Horários</th>
        <th class="border-right text-center" scope="col">Ginásio</th>
        <th class="border-right text-center" scope="col">Campus</th>
        <th class="border-right text-center" scope="col">Responsável</th>
        <th class="border-right text-center" scope="col">Matrícula</th>
      </thead>
      <tbody>
        <tr *ngFor="let row of tableData">
          <td class="text-center">{{ row.data }}</td>
          <td class="text-center">{{ row.horario }}</td>
          <td class="text-center">{{ row.ginasio }}</td>
          <td class="text-center">{{ row.campus }}</td>
          <td class="text-center">{{ row.responsavel }}</td>
          <td class="text-center">{{ row.matriculaAluno }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
</file>

<file path="src/app/core/routes/app.routes.ts">
import { Routes } from '@angular/router';
import { ScheduleComponent } from '../pages/schedule/schedule.component';
import { UserschdeulesComponent } from '../pages/userschdeules/userschdeules.component';
import { ConfigurationComponent } from '../pages/configuration/configuration.component';
import { EmailCodeSendComponent } from '../pages/email-code-send/email-code-send.component';
import { AuthLayoutComponent } from '../layouts/auth-layout/auth-layout.component';
import { ScheduleLayoutComponent } from '../layouts/schedule-layout/schedule-layout.component';
import { authGuard } from '../guards/auth.guard';
import { EmailValidatorComponent } from '../pages/email-validator/email-validator.component';


export const routes: Routes = [
  {
    path: 'auth',
    component: AuthLayoutComponent,
    children: [
      { path: 'login', component: EmailCodeSendComponent },
      { path: 'register', component: EmailValidatorComponent },
      { path: '', redirectTo: 'login', pathMatch: 'full' }
    ]
  },
  

  {
    path: '',
    component: ScheduleLayoutComponent,
    canActivate: [authGuard], 
    children: [
      { path: '', redirectTo: '/reservas', pathMatch: 'full' },
      { path: 'reservas', component: ScheduleComponent },
      { path: 'minhas-reservas', component: UserschdeulesComponent },
      { path: 'configuracoes', component: ConfigurationComponent }
    ]
  },
  
  { path: '**', redirectTo: '/auth/login' }
];
</file>

<file path="src/app/core/services/layout/layout-schedules.service.ts">
import { Injectable } from '@angular/core';
import { SchedulesService } from '../schedule/schedules.service';
import { AuthService } from '../auth/auth.service';
import { Ginasio } from '../../models/Ginasio';
import { UserData } from '../../models/UserData';
import { User } from '../../models/User';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class LayoutSchedulesService {
  private Ginasios: Ginasio[] = [];
  private ginasiosSubject = new BehaviorSubject<Ginasio[]>([]);
  public ginasios$ = this.ginasiosSubject.asObservable();
  
  private user: UserData | null = null;
  private userLoggedIn: User | null = null;

constructor(private Auth: AuthService, private ScheduleService: SchedulesService) { 
    this.loadGinasios();
    this.loadUser();
    this.loadUserLoggedIn();
    
  }

  private loadGinasios(): void {
    this.ScheduleService.getAvailableGyms().subscribe({
      next: (ginasios) => {
        this.Ginasios = ginasios;
        this.ginasiosSubject.next(ginasios); // ✅ Notifica observadores
      },
      error: (error) => {
        console.error('Erro ao carregar ginásios:', error);
      }
    });
  }

  private loadUser(): void {
    const user = this.Auth.getUser();
    if (user != null) {
      this.user = user;
    } else {
      console.error('Usuário não encontrado');
    };
  }

  private loadUserLoggedIn(): void {
    const userLoggedIn = this.Auth.getUserLoggedIn();
    if (userLoggedIn != null) {
      this.userLoggedIn = userLoggedIn;
    } else {
      console.error('Usuário não encontrado');
    };
  }

  getGinasios(): Ginasio[] {
    return this.Ginasios;
  }

  // ✅ Método para recarregar ginásios
  reloadGinasios(): void {
    this.loadGinasios();
  }

  getUser(): UserData | null {
    return this.user;
  }

  getUserLoggedIn(): User | null {
      return this.userLoggedIn;
  }

}
</file>

<file path="src/app/core/shared/header/header.component.ts">
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-header',
  imports: [],
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent {
  @Input() user: string = 'Fulano de Tal';
  randomColor: string = this.getRandomColor();

  getRandomColor(): string {
    const colors = [
      'bg-blue-50',
      'bg-red-50',
      'bg-orange-50'
    ];
    const randomIndex = Math.floor(Math.random() * colors.length);
    return colors[randomIndex];
  }
}
</file>

<file path="src/styles.css">
/* You can add global styles to this file, and also import other style files */
@import "tailwindcss";
</file>

<file path="src/app/app.component.ts">
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [
    RouterOutlet
],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'schedule-ufu';
}
</file>

<file path="src/app/core/components/table/table.component.ts">
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';
import { ScheduleModel } from '../../models/ScheduleModel';

@Component({
  selector: 'app-table',
  imports: [CommonModule],
  templateUrl: './table.component.html',
  styleUrl: './table.component.css'
})
export class TableComponent {
  @Input() tableName: string = 'Tabela';
  @Input() tableData: ScheduleModel[] = [];

  constructor(private scheduleService: ScheduleTimeService) { }

}
</file>

<file path="src/app/core/shared/footer/footer.component.html">
<div class="flex justify-center items-center fixed bottom-0 left-0 h-1/10 w-full bg-[#071D41] text-white">
    <footer class="flex justify-center items-center" aria-label="Site Footer">
        <span class="text-muted" role="contentinfo">{{title}}</span>
    </footer>
</div>
</file>

<file path="src/app/core/pages/schedule/schedule.component.css">
@import url("https://cdngovbr-ds.estaleiro.serpro.gov.br/design-system/fonts/rawline/css/rawline.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.min.css");



/* CSS do Desing System do GOV */

.flatpickr-calendar {
  --flatpicker-padding: var(--spacing-scale-2x);
  --datetimepicker-day-size: 24px;
  --datetimepicker-arrows: 32px;
  box-shadow: var(--surface-shadow-md);
}

.flatpickr-calendar.arrowTop::before,
.flatpickr-calendar.arrowTop::after {
  border-color: transparent;
}

.flatpickr-calendar.open {
  z-index: var(--z-index-layer-2);
}

.flatpickr-calendar .flatpickr-months {
  align-items: center;
  display: flex;
  padding: var(--flatpicker-padding) var(--flatpicker-padding) 0;
}

.flatpickr-calendar .flatpickr-months .flatpickr-prev-month,
.flatpickr-calendar .flatpickr-months .flatpickr-next-month {
  height: auto;
  padding: 0;
  position: static;
}

.flatpickr-calendar .flatpickr-months .flatpickr-prev-month.flatpickr-disabled,
.flatpickr-calendar .flatpickr-months .flatpickr-next-month.flatpickr-disabled {
  cursor: not-allowed;
  opacity: var(--disabled);
  display: block;
}

.flatpickr-calendar .flatpickr-months .flatpickr-prev-month.flatpickr-disabled *,
.flatpickr-calendar .flatpickr-months .flatpickr-next-month.flatpickr-disabled * {
  pointer-events: none;
}

.flatpickr-calendar .flatpickr-months .flatpickr-month {
  flex: 1;
  height: auto;
  overflow: visible;
}

.flatpickr-calendar .flatpickr-months .flatpickr-current-month {
  display: flex;
  height: auto;
  padding: 0 var(--flatpicker-padding);
  position: static;
  width: 100%;
}

.flatpickr-calendar .flatpickr-months .flatpickr-monthDropdown-months {
  border-radius: var(--surface-rounder-sm);
  color: var(--interactive);
  font-size: var(--font-size-scale-up-01);
  font-weight: var(--font-weight-semi-bold);
  margin: 0;
  padding: 0;
}

.flatpickr-calendar .flatpickr-months .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month {
  color: var(--color);
}

.flatpickr-calendar .flatpickr-months .flatpickr-monthDropdown-months:hover {
  background: transparent;
}

.flatpickr-calendar .flatpickr-months .numInputWrapper {
  flex: 1;
  margin-left: var(--flatpicker-padding);
  width: auto;
}

.flatpickr-calendar .flatpickr-months .numInputWrapper input.cur-year {
  border: var(--surface-width-sm) solid var(--border-color);
  border-radius: var(--surface-rounder-sm);
  color: var(--color);
  font-size: var(--font-size-scale-base);
  font-weight: var(--font-weight-semi-bold);
  padding: 0 var(--spacing-scale-base);
}

.flatpickr-calendar .flatpickr-months .numInputWrapper span.arrowUp,
.flatpickr-calendar .flatpickr-months .numInputWrapper span.arrowDown {
  display: none;
}

.flatpickr-calendar .flatpickr-weekdaycontainer {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  padding: 0 var(--flatpicker-padding);
}

.flatpickr-calendar span.flatpickr-weekday {
  color: var(--color);
  font-size: var(--font-size);
  font-weight: var(--font-weight-medium);
}

.flatpickr-calendar .dayContainer {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  padding: 0 var(--flatpicker-padding) var(--flatpicker-padding);
}

.flatpickr-calendar .flatpickr-day {
  color: var(--interactive);
  font-weight: var(--font-weight-semi-bold);
  height: var(--datetimepicker-day-size);
  line-height: var(--font-line-height-medium);
  margin: calc(var(--flatpicker-padding) * 0.25) auto;
  max-width: var(--datetimepicker-day-size);
  width: var(--datetimepicker-day-size);
}

.flatpickr-calendar .flatpickr-day:focus {
  outline: none;
}

.flatpickr-calendar .flatpickr-day.focus-visible,
.flatpickr-calendar .flatpickr-day:focus-visible {
  outline-color: var(--focus);
  outline-offset: var(--focus-offset);
  outline-style: var(--focus-style);
  outline-width: var(--focus-width);
}

.flatpickr-calendar .flatpickr-day.focus-visible {
  --focus-offset: 0;
  background: transparent;
  border-color: transparent;
}

.flatpickr-calendar .flatpickr-day:hover {
  background: var(--hover-effect);
}

.flatpickr-calendar .flatpickr-day.prevMonthDay,
.flatpickr-calendar .flatpickr-day.nextMonthDay {
  font-weight: var(--font-weight-medium);
  opacity: 0.6;
}

.flatpickr-calendar .flatpickr-day.today {
  background: var(--orange-vivid-5);
  border-color: transparent;
  color: var(--red-warm-vivid-50);
}

.flatpickr-calendar .flatpickr-day.flatpickr-disabled {
  cursor: not-allowed;
  opacity: var(--disabled);
  color: var(--color);
}

.flatpickr-calendar .flatpickr-day.flatpickr-disabled * {
  pointer-events: none;
}

.flatpickr-calendar .flatpickr-day.flatpickr-disabled:hover {
  background: transparent;
}

.flatpickr-calendar .flatpickr-day.inRange {
  --interactive-rgb: var(--blue-warm-vivid-50-rgb);
  --hover: var(--hover-dark);
  background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover)), rgba(var(--interactive-rgb), var(--hover)));
  border-color: transparent;
  box-shadow: none;
  color: var(--color-dark);
  opacity: 1;
}

.flatpickr-calendar .flatpickr-day.selected,
.flatpickr-calendar .flatpickr-day.startRange,
.flatpickr-calendar .flatpickr-day.endRange {
  background: var(--selected);
  border-color: transparent;
  color: var(--color-dark);
  opacity: 1;
}

.flatpickr-calendar .flatpickr-time {
  display: flex;
  justify-content: center;
  margin: 0 var(--flatpicker-padding);
  max-height: none;
}

.flatpickr-calendar .flatpickr-time input {
  --input-background: var(--bg-color);
  --input-border-color: var(--color-secondary-06);
  --input-border-width: 1px;
  --input-border-style: solid;
  --input-padding: 0 var(--spacing-scale-half);
  --input-radius: var(--surface-rounder-sm);
  background: var(--input-background);
  border: var(--input-border-width) var(--input-border-style) var(--input-border-color);
  border-radius: var(--input-radius);
  color: var(--text-color);
  display: block;
  font-size: var(--font-size-scale-up-01);
  font-weight: var(--font-weight-medium);
  height: var(--input-size);
  padding: var(--input-padding);
  width: 100%;
  margin: calc(var(--flatpicker-padding) * 0.25) 0;
}

.flatpickr-calendar .flatpickr-time input:not(:disabled):hover {
  background-image: linear-gradient(rgba(var(--color-rgb), var(--hover)), rgba(var(--color-rgb), var(--hover)));
}

.flatpickr-calendar .flatpickr-time input:focus,
.flatpickr-calendar .flatpickr-time input:focus-visible,
.flatpickr-calendar .flatpickr-time input.focus-visible {
  border-color: var(--focus) !important;
  box-shadow: 0 0 0 var(--surface-width-md) var(--focus);
  outline: none;
}

.flatpickr-calendar .flatpickr-time input.has-icon {
  padding-right: var(--spacing-scale-5x);
}

.flatpickr-calendar .flatpickr-time input[type=password]::-ms-reveal,
.flatpickr-calendar .flatpickr-time input[type=password]::-ms-clear {
  display: none;
}

.flatpickr-calendar .flatpickr-time .numInputWrapper {
  align-items: center;
  display: flex;
  flex: 0 1 90px;
  flex-flow: column;
  height: auto;
  padding: calc(var(--flatpicker-padding) * 0.5) var(--flatpicker-padding);
}

.flatpickr-calendar .flatpickr-time .numInputWrapper:hover {
  background: transparent;
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span {
  align-items: center;
  border: 0;
  border-radius: 50px;
  color: var(--interactive);
  display: flex;
  height: var(--datetimepicker-arrows);
  justify-content: center;
  opacity: 1;
  padding: 0;
  position: static;
  width: var(--datetimepicker-arrows);
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span:not(:disabled):hover {
  background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover)), rgba(var(--interactive-rgb), var(--hover)));
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span::after {
  border: none;
  position: static;
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span.arrowUp {
  order: -1;
}

.flatpickr-calendar .flatpickr-time .numInputWrapper span.arrowUp::after {
  transform: rotate(225deg) translate(-1px, -1px);
}

.flatpickr-calendar.hasTime .flatpickr-time {
  border-color: var(--border-color);
  height: auto;
}

.flatpickr-calendar.hasTime.noCalendar .flatpickr-time {
  border-color: transparent;
}

.br-datetimepicker.inverted .br-input,
.br-datetimepicker.inverted .br-input label,
.br-datetimepicker.dark-mode .br-input,
.br-datetimepicker.dark-mode .br-input label {
  --color: var(--color-dark);
  --focus-color: var(--focus-color-dark);
}

.br-datetimepicker input[disabled] {
  cursor: not-allowed;
}

button.close-button {
  background-color: transparent;
  border: none;
  margin-right: 4px;
  color: var(--interactive);
  font-size: 1.5rem;
  font-weight: bold;
  cursor: pointer;
  transition: color 0.3s ease;
}

button.close-button:hover {
  color: red;
}

button.close-button:focus {
  outline: 2px solid var(--focus);
  outline-offset: 2px;
}
</file>

<file path="src/app/core/pages/userschdeules/userschdeules.component.html">
<div class="flex flex-col justify-around">
    <!-- Datapicker -->
    <div class="flex justify-end gap-4">
          <div class="col">
                   <button class="br-button danger" style="background-color: red; color: white;" type="button" aria-label="Controle Reserva"
              (click)="onDisponivelClick()" >Excluir Reserva</button>
    </div>
      <!-- Dropdown/Select -->
      <div class="col-sm-6 col-md-4 col-lg-3">
        <app-select-filter [dropdownOptions]="dropdownOptions" (selectedOption)="onOptionSelected($event)"></app-select-filter>
      </div>
    </div>
    <!-- Tabela  -->
    <app-table class="mb-5" [tableName]="'Meus Agendamentos'" [tableData]="filteredReserva"></app-table>
    <script src="node_modules/@govbr-ds/core/dist/core.min.js"></script>
  </div>

  <div class="fixed h-full w-full inset-0 bg-black bg-opacity-50 z-[999]" *ngIf="isModalOpen"></div>
  <div class="w-2/3 max-h-[90vh] fixed top-5 transform bg-white p-5 shadow-md z-[1000] overflow-y-auto" *ngIf="isModalOpen">
  <button class="absolute top-2 right-2 bg-transparent border-none text-xl cursor-pointer" (click)="fecharModalScheduleForm()">X</button>
  <app-user-schedule-delete (send)="onFormSubmit($event)"></app-user-schedule-delete>
</div>
</file>

<file path="src/app/app.component.html">
<router-outlet></router-outlet>
</file>

<file path="src/app/core/services/schedule/schedules.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from '../auth/auth.service';
import { NewSchedule } from '../../models/NewSchedule';
import { ScheduleModel } from '../../models/ScheduleModel';
import { DeleteSchedule } from '../../models/DeleteSchedule';
import { Ginasio } from '../../models/Ginasio';
@Injectable({
  providedIn: 'root'
})
export class SchedulesService {
  private baseApiUrl = 'http://localhost:3000/v1/schedule';

  constructor(private http: HttpClient, private authService: AuthService) { }

  // Buscar agendamentos por data e ginásio
  getSchedules(data: string, ginasio: string | null): Observable<ScheduleModel[]> {
    var requestParams: any;
    if(ginasio === null) {
      requestParams = { data };
    } else {
      requestParams = { data, ginasio };
    }
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.get<any[]>(`${this.baseApiUrl}`, { params: requestParams, headers });
  }


  // Criar novo agendamento
  createSchedule(scheduleData: NewSchedule): Observable<any> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.post(`${this.baseApiUrl}`, scheduleData, { headers });
  }

  // Deletar agendamento
  deleteSchedule(deleteRequest: DeleteSchedule): Observable<any> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });
    console.log('Deletando agendamento:', deleteRequest);
    return this.http.post(`${this.baseApiUrl}/delete`, deleteRequest, { headers });
  }

  // Buscar agendamentos por usuário
  getUserSchedules(matricula: string): Observable<ScheduleModel[]> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });

    return this.http.get<ScheduleModel[]>(`${this.baseApiUrl}/${matricula}`, { headers });
  }

 // Buscar ginásios disponíveis
  getAvailableGyms(): Observable<Ginasio[]> {
    const Authorization = this.authService.getToken();
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Authorization}`
    });
    
    return this.http.get<Ginasio[]>(`${this.baseApiUrl}/ginasio`, { headers });
  }

}
</file>

<file path="src/app/core/shared/header/header.component.css">
/* CSS do Desing System do GOV */

.br-avatar {
  --avatar-size: var(--avatar-small);
  --avatar-icon-size: var(--avatar-icon-small);
  --avatar-text-size: var(--avatar-text-small);
  --avatar-small: 40px;
  --avatar-icon-small: var(--icon-size-2x);
  --avatar-icon-medium: var(--icon-size-5x);
  --avatar-icon-large: var(--icon-size-8x);
  --avatar-text-small: 18px;
  --avatar-text-medium: var(--font-size-scale-up-07);
  --avatar-text-large: var(--font-size-scale-up-11);
  align-items: center;
  border-color: #000;
  display: inline-flex;
  font-size: var(--avatar-text-size);
  font-weight: var(--font-weight-bold);
  justify-content: center;
  line-height: var(--avatar-size);
  vertical-align: middle;
}

.br-avatar .content {
  align-items: center;
  border-radius: 100%;
  display: inline-flex;
  font-size: var(--avatar-text-size);
  height: var(--avatar-size);
  justify-content: center;
  overflow: hidden;
  text-align: center;
  text-transform: uppercase;
  vertical-align: inherit;
  width: var(--avatar-size);
}

.br-avatar .content img {
  height: var(--avatar-size);
  vertical-align: inherit;
  width: var(--avatar-size);
}

.br-avatar .content .svg-inline--fa,
.br-avatar .content .fa,
.br-avatar .content .fab,
.br-avatar .content .fad,
.br-avatar .content .fal,
.br-avatar .content .far,
.br-avatar .content .fas {
  --icon-size: var(--avatar-icon-size);
  margin-top: 0.25em;
}

.br-avatar.is-small,
.br-avatar.small,
.br-avatar[small] {
  --avatar-size: var(--avatar-small);
  --avatar-icon-size: var(--avatar-icon-small);
  --avatar-text-size: var(--avatar-text-small);
}

.br-avatar.is-medium,
.br-avatar.medium,
.br-avatar[medium] {
  --avatar-size: var(--avatar-medium);
  --avatar-icon-size: var(--avatar-icon-medium);
  --avatar-text-size: var(--avatar-text-medium);
}

.br-avatar.is-large,
.br-avatar.large,
.br-avatar[large] {
  --avatar-size: var(--avatar-large);
  --avatar-icon-size: var(--avatar-icon-large);
  --avatar-text-size: var(--avatar-text-large);
}

.br-avatar-action {
  background: transparent;
  border: 0;
}

.br-avatar-action:not(:disabled):hover {
  background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover)), rgba(var(--interactive-rgb), var(--hover)));
}

.br-avatar-action:focus {
  outline: none;
}

.br-avatar-action.focus-visible,
.br-avatar-action:focus-visible {
  outline-color: var(--focus);
  outline-offset: var(--focus-offset);
  outline-style: var(--focus-style);
  outline-width: var(--focus-width);
}

.br-avatar[data-toggle=dropdown]:focus {
  outline: none;
}

.br-avatar[data-toggle=dropdown].focus-visible,
.br-avatar[data-toggle=dropdown]:focus-visible {
  outline-color: var(--focus);
  outline-offset: var(--focus-offset);
  outline-style: var(--focus-style);
  outline-width: var(--focus-width);
}

.br-avatar .image,
.br-avatar .letter {
  align-items: center;
  background-color: var(--blue-10);
  border-radius: 50%;
  color: var(--blue-warm-20);
  display: inline-flex;
  font-size: var(--avatar-text-size);
  height: var(--avatar-size);
  justify-content: center;
  overflow: hidden;
  text-align: center;
  text-transform: uppercase;
  vertical-align: inherit;
  width: var(--avatar-size);
}

.br-avatar .image img,
.br-avatar .letter img {
  height: var(--avatar-size);
  vertical-align: inherit;
  width: var(--avatar-size);
}

.br-avatar .image .svg-inline--fa,
.br-avatar .image .fa,
.br-avatar .image .fab,
.br-avatar .image .fad,
.br-avatar .image .fal,
.br-avatar .image .far,
.br-avatar .image .fas,
.br-avatar .letter .svg-inline--fa,
.br-avatar .letter .fa,
.br-avatar .letter .fab,
.br-avatar .letter .fad,
.br-avatar .letter .fal,
.br-avatar .letter .far,
.br-avatar .letter .fas {
  --icon-size: var(--avatar-icon-size);
  margin-top: 0.25em;
}

.ufu-image {
  content: url("../../../../../assets/image-logo.png");
  background-size: cover;
  max-width: 5%;
}

/*# sourceMappingURL=avatar.css.map*/
</file>

<file path="src/app/core/shared/header/header.component.html">
<div class="flex justify-between items-center bg-white pl-4 m-0 h-20">
    <div class="flex items-center">
        <img class="ufu-image m-4" alt="Logo UFU">
        <div class="divisor"> | </div>
        <h2 class="pl-2">Centro Esportivo Universitário UFU</h2>
    </div>
    <div class="flex items-center mr-2">
        <span class="br-avatar small mr-3" title="{{ user }}">
            <span class="{{ randomColor }} content bg-white">{{ user.charAt(0) }}</span>
        </span>
    </div>
</div>
</file>

<file path="src/app/core/pages/userschdeules/userschdeules.component.ts">
import { Component, ElementRef, OnInit, ViewChild, Renderer2, Inject, Input } from '@angular/core';
import { TableComponent } from '../../components/table/table.component';
import { DatapickerComponent } from '../../components/datapicker/datapicker.component';
import { SelectFilterComponent } from '../../components/select-filter/select-filter.component';
import { CommonModule } from '@angular/common';
import { option } from '../../models/Option';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';
import { ScheduleModel } from '../../models/ScheduleModel';
import { SchedulesService } from '../../services/schedule/schedules.service';
import { AuthService } from '../../services/auth/auth.service';
import { Ginasio } from '../../models/Ginasio';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { UserData } from '../../models/UserData';
import { UserScheduleDeleteComponent } from '../../components/user-schedule-delete/user-schedule-delete.component';

@Component({
  selector: 'app-userschdeules',
  templateUrl: './userschdeules.component.html',
  styleUrl: './userschdeules.component.css',
  imports: [CommonModule, TableComponent, SelectFilterComponent, UserScheduleDeleteComponent]
})
export class UserschdeulesComponent implements OnInit {
    isModalOpen: boolean = false;
    Ginasios: Ginasio[] = [];
    user: UserData | null = null;

    @ViewChild('modalForm', { static: false }) modalForm!: ElementRef;
    @ViewChild('modalOverlay', { static: false }) modalOverlay!: ElementRef;

      constructor(
        private renderer: Renderer2, 
        @Inject(ScheduleTimeService) private scheduleTimeService: ScheduleTimeService, 
        @Inject(SchedulesService) private ScheduleService: SchedulesService, 
        @Inject(AuthService) private authService: AuthService,
        @Inject(LayoutSchedulesService) private LayoutService: LayoutSchedulesService
      ) {
        this.scheduleTimeService.horarioDisponivelClicadoEmitter.subscribe(() => {
          this.abrirModalScheduleForm();
        });
      }



  filteredReserva: ScheduleModel[] = [];
  selectedGinasio: string = '';
  selectedLabel: string = "Selecione o Ginasio para filtrar";
  agendamentos: ScheduleModel[] = []; // Lista de reservas vindas da API
  dropdownOptions: Array<option> = [
  ];

  ngOnInit(): void { 
    this.user = this.authService.getUser();
    this.loadGinasios(); // Carregar ginásios ao inicializar
    this.loadSchedules(); // Carregar agendamentos ao inicializar
    this.filterTable(); // Filtrar tabela inicialmente
    
    // ✅ Observar mudanças nos ginásios para atualização automática
    this.LayoutService.ginasios$.subscribe(ginasios => {
      this.Ginasios = ginasios;
      this.setupDropdownOptions();
      console.log('Ginásios atualizados via Observable (UserSchedules):', ginasios);
    });
   }

  private loadGinasios(): void {
    this.Ginasios = this.LayoutService.getGinasios();
    console.log('Ginasios carregados:', this.Ginasios);
    this.setupDropdownOptions();
  }


  private setupDropdownOptions(): void {
    this.dropdownOptions = this.Ginasios.map(ginasio => ({
      id: ginasio.nome,
      value: ginasio.nome,
      label: `${ginasio.nome} (${ginasio.campus})`
    }));
  }

  onDisponivelClick() {
      this.abrirModalScheduleForm();
  }

  onOptionSelected(option: { value: string; label: string }): void {
    this.selectedGinasio = option.value;
    this.selectedLabel = option.label;
    this.filterTable();
  }

  filterTable(): void {
    if (this.selectedGinasio) {
      this.filteredReserva = this.agendamentos.filter(row => row.ginasio === this.selectedGinasio);
    } else {
      this.filteredReserva = this.agendamentos;
    }
  }

    loadSchedules(): void {
      if (this.user && this.user.matricula) {
        this.ScheduleService.getUserSchedules(this.user.matricula).subscribe({
          next: (schedules) => {
            console.log('Agendamentos carregados:', schedules);
            this.agendamentos = schedules;
            this.filterTable();
          },
          error: (error) => {
            console.error('Erro ao carregar agendamentos:', error);
          }
        });
      } else {
        alert("Login não realizado ou usuário não definido.");
        console.error('Usuário ou matrícula não definida.');
      }
    }

  
  abrirModalScheduleForm(): void {
    this.isModalOpen = true;

    if (this.modalForm?.nativeElement) {
      this.renderer.setStyle(this.modalForm.nativeElement, 'display', 'block');
    }

    if (this.modalOverlay?.nativeElement) {
      this.renderer.setStyle(this.modalOverlay.nativeElement, 'display', 'block');
    }
  }

  fecharModalScheduleForm(): void {
    this.isModalOpen = false;
    this.renderer.setStyle(this.modalForm.nativeElement, 'display', 'none');
    this.renderer.setStyle(this.modalOverlay.nativeElement, 'display', 'none');
  }

    onFormSubmit(success: boolean): void {
    if (success) {
      this.loadSchedules();
      this.fecharModalScheduleForm();
    }
  }
}
</file>

<file path="src/app/core/components/schedule-form/schedule-form.component.ts">
import { CommonModule } from '@angular/common';
import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { DropdownnComponent } from "../dropdownn/dropdownn.component";
import { option } from '../../models/Option';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { SchedulesService } from '../../services/schedule/schedules.service';
import { NewSchedule } from '../../models/NewSchedule';
import { Ginasio } from '../../models/Ginasio';

@Component({
    selector: 'app-schedule-form',
    templateUrl: './schedule-form.component.html',
    styleUrls: ['./schedule-form.component.css'],
    imports: [CommonModule, ReactiveFormsModule, DropdownnComponent]
})
export class ScheduleFormComponent implements OnInit {
    scheduleForm!: FormGroup;
    horarioRecorrente: boolean = false;
    Ginasios: Ginasio[] = [];
    GinasioOptions: Array<option> = [];
    @Output() send = new EventEmitter<boolean>();

    constructor(private fb: FormBuilder, private schedulesService: SchedulesService, private layoutService : LayoutSchedulesService) { }

    ngOnInit(): void {
        this.Ginasios = this.layoutService.getGinasios();
        this.setupGinasioOptions();
        
        this.scheduleForm = this.fb.group({
            email: ['', [Validators.required, Validators.email, Validators.pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]*\.?ufu\.br$/)]],
            ginasio: ['', Validators.required],
            horario: ['', [Validators.required]],
            terminaEm: [''],
            dataTermino: [''],
            ocorrencias: [''],
            responsavel: ['', Validators.required],
            curso: ['', Validators.required],
            matricula: ['', Validators.required],
            telefone: [
                '',
                [Validators.required, Validators.pattern(/^\(\d{2}\) \d{5}-\d{4}$/)],
            ],
            quantidade: ['', [Validators.required, Validators.min(1)]],
        });
        

        Object.keys(this.scheduleForm.controls).forEach(controlName => {
            const control = this.scheduleForm.get(controlName);
            control?.markAsPristine();
            control?.markAsUntouched();
        });

        // ✅ Observar mudanças nos ginásios
        this.layoutService.ginasios$.subscribe(ginasios => {
            this.Ginasios = ginasios;
            this.setupGinasioOptions();
            console.log('Ginásios atualizados via Observable (ScheduleForm):', ginasios);
        });

        this.scheduleForm.get('horario')?.valueChanges.subscribe(value => {
          if (value) {
            const date = new Date(value);
            // Zera os minutos e segundos da data
            date.setMinutes(0);
            date.setSeconds(0);
            
            // Atualiza o valor do form control, forçando a hora cheia
            // O { emitEvent: false } é crucial para evitar loops infinitos
            this.scheduleForm.get('horario')?.setValue(this.toIsoString(date), { emitEvent: false });
          }
        });

    }

    private setupGinasioOptions(): void {
        this.GinasioOptions = this.Ginasios.map(ginasio => ({
            id: ginasio.nome,
            value: ginasio.nome,
            label: `${ginasio.nome} (${ginasio.campus})`
        }));
    }
  
    onSubmit(): void {
        this.schedulesService.createSchedule(
            this.createNewScheduleFromForm()
        ).subscribe({
            next: () => {
                this.send.emit(true);
                console.log('Formulário enviado com sucesso!', this.scheduleForm.value);
            },
            error: (err) => {
                this.send.emit(false);
                let errorMessage = 'Erro inesperado ao enviar formulário.';
                if (err.error && typeof err.error === 'string') {
                    errorMessage = err.error;
                } else if (err.error && err.error.message) {
                    errorMessage = err.error.message;
                } else if (err.message) {
                    errorMessage = err.message;
                } else if (err.status) {
                    errorMessage = `Erro ${err.status}: ${err.statusText || 'Erro no servidor'}`;
                }
                
                alert('Erro ao enviar formulário: ' + errorMessage);
                console.error('Erro ao enviar formulário:', err);
            }
        });
    }

    getErrorMessage(controlName: string): string {
        const control = this.scheduleForm.get(controlName);
        if (control?.hasError('required')) {
            return 'Campo obrigatório.';
        }
        if (control?.hasError('pattern')) {
            if (controlName === 'horario') {
                return 'Selecione uma data e horário válidos.';
            }
            if (controlName === 'telefone') {
                return 'Use o formato: (XX) XXXXX-XXXX.';
            }
            if (controlName === 'email') {
                return 'Use um email válido da UFU: nome@ufu.br';
            }
        }
        if (control?.hasError('min')) {
            return 'O valor deve ser maior que 0.';
        }
        return '';
    }

    onCampusSelected(selected: option): void {
        this.scheduleForm.get('campus')?.setValue(selected.value);
    }

    onGinasioSelected(selected: option): void {
        this.scheduleForm.get('ginasio')?.setValue(selected.value);
    }

    onHorarioRecorrente() {
        this.horarioRecorrente = !this.horarioRecorrente;
    }

    private toIsoString(date: Date): string {
      const pad = (num: number): string => (num < 10 ? '0' : '') + num;
      return date.getFullYear() +
          '-' + pad(date.getMonth() + 1) +
          '-' + pad(date.getDate()) +
          'T' + pad(date.getHours()) +
          ':' + pad(date.getMinutes());
    }

    private createNewScheduleFromForm(): NewSchedule {
    const formValue = this.scheduleForm.value;
    
    // Parse datetime-local format (YYYY-MM-DDTHH:mm) to separate date and time
    const datetimeValue = formValue.horario; // e.g., "2025-07-27T14:30"
    
    if (!datetimeValue || !datetimeValue.includes('T')) {
        throw new Error('Formato de data/hora inválido');
    }
    
    const [dateString, timeString] = datetimeValue.split('T'); // ["2025-07-27", "14:30"]
    
    // Add seconds to time format for Java Time parsing (HH:mm:ss)
    const timeWithSeconds = timeString.includes(':') ? `${timeString}:00` : timeString;
    
    return {
        horario: timeWithSeconds, // "HH:mm:ss" format for Java Time
        data: dateString, // "YYYY-MM-DD" format for Java LocalDate
        ginasio: formValue.ginasio,
        responsavel: formValue.responsavel,
        curso: formValue.curso,
        campus: this.Ginasios.filter(ginasio => ginasio.nome === formValue.ginasio).map(ginasio => ginasio.campus)[0],
        matriculaAluno: formValue.matricula,
        telefone: formValue.telefone,
        email: formValue.email,
        quantidadePessoas: parseInt(formValue.quantidade) || 1
    };
}
}
</file>

<file path="src/app/core/pages/configuration/configuration.component.html">
<div class="flex flex-col justify-around">
    <h2 class="text-bold">Configurações</h2>
    <div class="br-tab small">
        <nav class="tab-nav">
          <ul>
            <li class="tab-item" [class.active]="ShowGeral.valueOf()"  title="Geral">
              <button type="button" (click)="onTabSelect('ShowGeral')"><span class="name">Geral</span></button>
            </li>
            <li class="tab-item" [class.active]="ShowEspaco.valueOf()"  title="Espaços Esportivos">
              <button type="button" (click)="onTabSelect('ShowEspaco')" ><span class="name">Espaços Esportivos</span></button>
            </li>
            <li class="tab-item" [class.active]="ShowPermissao.valueOf()"  title="Permissões">
              <button type="button" (click)="onTabSelect('ShowPermissao')" ><span class="name">Permissões</span></button>
            </li>
          </ul>
        </nav>
    </div>

        <div *ngIf="ShowGeral.valueOf()" class="flex flex-col">
            <h3>Agendamentos</h3>
    <div class="slider-container disabled hidden">
        <app-slider [value]="360" [min]="60" [max]="1440" [step]="60" title="Antecedência Agendamentos"></app-slider>
        <small class="text-muted">Não priorizado para desenvolvimento</small>
    </div>
    
    <div class="slider-container disabled hidden">
        <app-slider [value]="120" [min]="30" [max]="240" [step]="30" title="Limite Agendamentos"></app-slider>
        <small class="text-muted">Não priorizado para desenvolvimento</small>
    </div>
      <!-- Datapicker -->
        <div class="flex justify-end gap-4 mt-8">
              <div class="mr-2">
                   <button class="br-button primary" type="button" aria-label="Controle Reserva"
              (click)="onCriarReservaClick()" >Criar Reserva</button>
            </div>
            <div class="mr-2">
                <button class="br-button danger" type="button" aria-label="Controle Cancelar Agendamento"
                (click)="onCancelarAgendamentoClick()">Cancelar Agendamento</button>
            </div>
        <!-- Dropdown/Select -->
        <div class="col-sm-6 col-md-4 col-lg-3">
          <app-select-filter [dropdownOptions]="dropdownOptionsGinasios" (selectedOption)="onOptionSelected($event)"></app-select-filter>
        </div>
      </div>
      <!-- Tabela  -->
      <app-table class="mb-5" [tableName]="'Gestão Agendamentos'" [tableData]="filteredReserva"></app-table>
      <div class="flex justify-end">
              <div class="mr-2">
                <button class="br-button primary" type="button" aria-label="Controle Criar Restrição"
                (click)="onCriarRestricaoClick()">
                Criar Restrição</button>
              </div>
              <div class="mr-2">
                <button class="br-button danger" type="button" aria-label="Controle Apagar Restrição"
                (click)="onApagarRestricaoClick()">
                Apagar Restrição</button>
              </div>
            </div>
      <app-table-restricao class="mb-5" [tableName]="'Gestão Restrições'" [tableData]="restricao"></app-table-restricao>

        </div>

        <div *ngIf="ShowEspaco.valueOf()" class="flex flex-col">
          <h3>Espaços Esportivos</h3>
            <div class="flex justify-end">
              <div class="mr-2">
                <button class="br-button primary" type="button" aria-label="Controle Criar Ginásio"
                (click)="onCriarGinasioClick()">
                Criar Ginásio</button>
              </div>
              <div class="mr-2">
                <button class="br-button danger" type="button" aria-label="Controle Apagar Ginásio"
                (click)="onApagarGinasioClick()">
                Apagar Ginásio</button>
              </div>
            </div>
  
          <!-- Tabela  -->
          <app-table-espacos class="mb-5" [tableName]="'Gestão Espaços Esportivos'" [tableData]="espacos"></app-table-espacos>
        </div>

        <div *ngIf="ShowPermissao.valueOf()"  class="flex flex-col">
          <h3>Permissões</h3>
          <div class="flex justify-end">
           <div class="mr-2">
              <button class="br-button primary" type="button" aria-label="Controle Criar Administrador"
              (click)="onCriarAdministradorClick()">
              Criar Administrador</button>
            </div>
          </div>
        <!-- Tabela  -->
        <app-table-users class="mb-5" [tableName]="'Gestão Usuários'" [tableData]="users"></app-table-users>

        </div>
</div>

<!-- Generic Modal -->
<app-generic-modal 
  [isOpen]="modalConfig.isOpen"
  [formType]="modalConfig.type"
  [title]="modalConfig.title"
  (close)="closeModal()"
  (formSubmitted)="onFormSubmit($event)">
</app-generic-modal>
</file>

<file path="src/app/core/pages/schedule/schedule.component.html">
<div class="flex flex-col justify-around">
  <!-- Datapicker -->
  <div class="flex justify-end gap-4">
    <div class="col">
                   <button class="br-button primary" type="button" aria-label="Controle Reserva"
              (click)="onDisponivelClick()" >Criar Reserva</button>
    </div>
    <div class="col-sm-6 col-md-4 col-lg-3">
      <app-datapicker [selectedDate]="selectedDate" (dateSelected)="onDateSelected($event)"></app-datapicker>
    </div>
    <!-- Dropdown/Select -->
    <div class="col-sm-6 col-md-4 col-lg-3">
      <app-select-filter [dropdownOptions]="dropdownOptions"
        (selectedOption)="onOptionSelected($event)"></app-select-filter>
    </div>
  </div>
  <!-- Tabela  -->
  <app-table class="mb-5" [tableName]="'Agendamentos'" [tableData]="agendamentos"></app-table>
  <script src="node_modules/@govbr-ds/core/dist/core.min.js"></script>
</div>

<div class="fixed h-full w-full inset-0 bg-black bg-opacity-50 z-[999]" *ngIf="isModalOpen"></div>
<div class="w-2/3 max-h-[90vh] fixed top-5 transform bg-white p-5 shadow-md z-[1000] overflow-y-auto"
  *ngIf="isModalOpen">
  <button class="absolute top-2 right-2 close-button" (click)="fecharModalScheduleForm()">X</button>
  <app-user-schedule-form (send)="onFormSubmit($event)"></app-user-schedule-form>
</div>
</file>

<file path="src/app/core/pages/schedule/schedule.component.ts">
import { Component, AfterViewInit, ElementRef, ViewChild, Renderer2 } from '@angular/core';;
import { CommonModule } from '@angular/common';
import { TableComponent } from "../../components/table/table.component";
import { SelectFilterComponent } from "../../components/select-filter/select-filter.component";
import { option } from '../../models/Option';
import { DatapickerComponent } from "../../components/datapicker/datapicker.component";
import { ReactiveFormsModule } from '@angular/forms';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';
import { SchedulesService } from '../../services/schedule/schedules.service';
import { ScheduleModel } from '../../models/ScheduleModel';
import { Ginasio } from '../../models/Ginasio';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { UserScheduleFormComponent } from '../../components/user-schedule-form/user-schedule-form.component';

@Component({
  selector: 'app-schedule',
  imports: [CommonModule, TableComponent, SelectFilterComponent, DatapickerComponent, UserScheduleFormComponent , ReactiveFormsModule],
  templateUrl: './schedule.component.html',
  styleUrls: ['./schedule.component.css']
})
export class ScheduleComponent {
  isModalOpen: boolean = false;
  selectedDate: string = ''; // Data selecionada no datapicker
  Ginasios: Ginasio[] = [];
  selectedGym: string | null = null; // Ginásio selecionado

  @ViewChild('modalForm', { static: false }) modalForm!: ElementRef;
  @ViewChild('modalOverlay', { static: false }) modalOverlay!: ElementRef;

  constructor(private renderer: Renderer2, private scheduleTimeService: ScheduleTimeService, private ScheduleService: SchedulesService, private LayoutService: LayoutSchedulesService) {
    this.selectedDate = new Date().toISOString().split('T')[0]; // Formato YYYY-MM-DD
    this.scheduleTimeService.horarioDisponivelClicadoEmitter.subscribe(() => {
      this.abrirModalScheduleForm();
    });
  }

  // Variáveis para o filtro e lista a ser mostrada
  selectedLabel: string = "Selecione o Ginásio para filtrar";
  agendamentos: ScheduleModel[] = []; // Lista de reservas vindas da API
  dropdownOptions: Array<option> = []; // Opções do dropdown

  

  ngOnInit(): void {
    this.loadGinasios(); // Carregar ginásios ao inicializar
    this.loadSchedules(); // Carregar agendamentos ao inicializar
    
    // ✅ Observar mudanças nos ginásios para atualização automática
    this.LayoutService.ginasios$.subscribe(ginasios => {
      this.Ginasios = ginasios;
      this.setupDropdownOptions();
      console.log('Ginásios atualizados via Observable (Schedule):', ginasios);
    });
  }

  private loadGinasios(): void {
    this.Ginasios = this.LayoutService.getGinasios();
    console.log('Ginasios carregados:', this.Ginasios);
    this.setupDropdownOptions();
  }

  private setupDropdownOptions(): void {
    this.dropdownOptions = this.Ginasios.map(ginasio => ({
      id: ginasio.nome,
      value: ginasio.nome,
      label: `${ginasio.nome} (${ginasio.campus})`
    }));
  }

  // Método para capturar a data selecionada no datapicker
  onDateSelected(date: string): void {
    this.selectedDate = date;
    console.log('Data selecionada:', date);
    this.loadSchedules(); // Recarregar agendamentos quando a data mudar
  }

  // Carregar agendamentos baseado na data e ginásio selecionados
  loadSchedules(): void {
    if (this.selectedDate) {
      this.ScheduleService.getSchedules(this.selectedDate, this.selectedGym).subscribe({
        next: (schedules) => {
          console.log('Agendamentos carregados:', schedules);
          this.agendamentos = schedules;
        },
        error: (error) => {
          console.error('Erro ao carregar agendamentos:', error);
        }
      });
    }
  }

  //Exibição da lista
  onOptionSelected(option: option) {
    this.selectedGym = option.value;
    this.selectedLabel = option.label;
    this.loadSchedules(); 
  }

    onDisponivelClick() {
      this.abrirModalScheduleForm();
    }

  abrirModalScheduleForm(): void {
    this.isModalOpen = true;

    if (this.modalForm?.nativeElement) {
      this.renderer.setStyle(this.modalForm.nativeElement, 'display', 'block');
    }

    if (this.modalOverlay?.nativeElement) {
      this.renderer.setStyle(this.modalOverlay.nativeElement, 'display', 'block');
    }
  }

  fecharModalScheduleForm(): void {
    this.isModalOpen = false;
    this.renderer.setStyle(this.modalForm.nativeElement, 'display', 'none');
    this.renderer.setStyle(this.modalOverlay.nativeElement, 'display', 'none');
  }

  onFormSubmit(success: boolean): void {
    if (success) {
      this.loadSchedules();
      this.fecharModalScheduleForm();
    }
  }

}
</file>

<file path="src/app/core/components/schedule-form/schedule-form.component.html">
<div class="container mt-4">
    <h2>Reserva de horário</h2>
    <form [formGroup]="scheduleForm" (ngSubmit)="onSubmit()" novalidate>
        <!-- Linha 1: Campus e Ginásio -->
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="email">Email</label>
                    <input id="email" type="text" formControlName="email"
                        placeholder="Email do responsável" 
                        [class.invalid]="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('email')?.invalid && scheduleForm.get('email')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('email') }}
                </div>
            </div>
            <div class="col-sm-6 mb-3">
                <app-dropdownn field="Ginásio (Obrigatório)" [dropdownOptions]="GinasioOptions"
                    (selectedOption)="onGinasioSelected($event)"></app-dropdownn>
            </div>

        <!-- Linha 2: Horário -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-datetimepicker" data-mode="single" data-type="datetime-local">
                    <div class="br-input has-icon"
                        [class.invalid]="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched">
                        <label for="dateandtime-input">Horário</label>
                        <input id="dateandtime-input" type="datetime-local" formControlName="horario"  />
                    </div>
                    <div *ngIf="scheduleForm.get('horario')?.invalid && scheduleForm.get('horario')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('horario') }}
                    </div>
                </div>
                <div class="form-check mt-2">
                    <input type="checkbox" id="horarioRepetido" class="form-check-input"
                        (click)="onHorarioRecorrente()" disabled />
                    <label for="horarioRepetido" class="form-check-label">Horário Semanal Recorrente</label>
                </div>

                <!-- Campos adicionais para recorrência -->
                <div *ngIf="horarioRecorrente" class="mt-3">
                    <label class="br-label">Termina em</label>
                    <div class="row">
                        <!-- Opção "Nunca" -->
                        <div class="col-sm-12 mb-2" style="margin-top: 14px;">
                            <div class="br-radio">
                                <input type="radio" id="terminaNunca" name="terminaEm" value="nunca"
                                    formControlName="terminaEm" class="br-radio-input" />
                                <label for="terminaNunca" class="br-radio-label">Nunca</label>
                            </div>
                        </div>

                        <!-- Opção "Em" -->
                        <div class="col-sm-12 mb-2">
                            <div class="br-radio">
                                <input type="radio" id="terminaEm" name="terminaEm" value="data"
                                    formControlName="terminaEm" class="br-radio-input" />
                                <label for="terminaEm" class="br-radio-label">Em</label>
                            </div>
                            <!-- Date picker para a opção "Em" -->
                            <div *ngIf="scheduleForm.get('terminaEm')?.value === 'data'" class="mt-2">
                                <div class="br-input">
                                    <label for="dataTermino">Selecione a data de término: </label>
                                    <input id="dataTermino" type="date" formControlName="dataTermino" />
                                </div>
                            </div>
                        </div>

                        <!-- Opção "Após" -->
                        <div class="col-sm-12 mb-2">
                            <div class="br-radio">
                                <input type="radio" id="terminaApos" name="terminaEm" value="ocorrencias"
                                    formControlName="terminaEm" class="br-radio-input" />
                                <label for="terminaApos" class="br-radio-label">Após</label>
                            </div>
                            <!-- Campo de quantidade para a opção "Após" -->
                            <div *ngIf="scheduleForm.get('terminaEm')?.value === 'ocorrencias'" class="mt-2">
                                <div class="br-input">
                                    <label for="quantidadeOcorrencias">Quantidade de ocorrências</label>
                                    <input id="quantidadeOcorrencias" type="number"
                                        formControlName="quantidadeOcorrencias" placeholder="Ex.: 5" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Linha 3: Responsável -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input large input-button"
                    [class.invalid]="scheduleForm.get('responsavel')?.invalid && scheduleForm.get('responsavel')?.touched">
                    <label for="input-search-responsavel">Responsável (Obrigatório)</label>
                    <input id="input-search-responsavel" type="search" placeholder="Digite o nome do responsável"
                        formControlName="responsavel" />
                    <button class="br-button" type="button" aria-label="Buscar">
                        <i class="fas fa-search" aria-hidden="true"></i>
                    </button>
                </div>
                <div *ngIf="scheduleForm.get('responsavel')?.invalid && scheduleForm.get('responsavel')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('responsavel') }}
                </div>
            </div>
        </div>

        <!-- Linha 4: Curso e Matrícula -->
        <div class="row">
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="curso">Curso</label>
                    <input id="curso" type="text" formControlName="curso"
                        placeholder="Preenchido automaticamente ao selecionar o responsável" />
                </div>
                <div *ngIf="scheduleForm.get('curso')?.invalid && scheduleForm.get('curso')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('curso') }}
                </div>
            </div>
            <div class="col-sm-6 mb-3">
                <div class="br-input">
                    <label for="matricula">Matrícula</label>
                    <input id="matricula" type="text" formControlName="matricula"
                        placeholder="Matrícula do responsável" [class.invalid]="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched" />
                </div>
                <div *ngIf="scheduleForm.get('matricula')?.invalid && scheduleForm.get('matricula')?.touched"
                    class="feedback danger">
                    {{ getErrorMessage('matricula') }}
                </div>
            </div>
        </div>

        <!-- Linha 5: Telefone -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input"
                    [class.invalid]="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched">
                    <label for="telefone">Telefone</label>
                    <input id="telefone" type="text" formControlName="telefone" placeholder="Digite o telefone" />
                    <div *ngIf="scheduleForm.get('telefone')?.invalid && scheduleForm.get('telefone')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('telefone') }}
                    </div>
                </div>
            </div>
        </div>

        <!-- Linha 6: Quantidade de Pessoas -->
        <div class="row">
            <div class="col-sm-12 mb-3">
                <div class="br-input"
                    [class.invalid]="scheduleForm.get('quantidade')?.invalid && scheduleForm.get('quantidade')?.touched">
                    <label for="quantidade">Quantidade de Pessoas (Obrigatório)</label>
                    <input id="quantidade" type="number" formControlName="quantidade" placeholder="Ex.: 11" />
                    <div *ngIf="scheduleForm.get('quantidade')?.invalid && scheduleForm.get('quantidade')?.touched"
                        class="feedback danger">
                        {{ getErrorMessage('quantidade') }}
                    </div>
                </div>
            </div>
        </div>

        <!-- Botões -->
        <div class="row mt-4">
            <div class="col-sm-12 d-flex justify-content-end gap-3">
                <div>
                    <button type="submit" class="br-button primary" [disabled]="scheduleForm.invalid">Reservar
                        horário</button>
                </div>
            </div>
        </div>
    </form>
</div>
</file>

<file path="src/app/core/pages/configuration/configuration.component.ts">
import { CommonModule } from '@angular/common';
import { Component, ElementRef, Inject, Renderer2, ViewChild, viewChild, viewChildren } from '@angular/core';
import { TableComponent } from '../../components/table/table.component';
import { DatapickerComponent } from '../../components/datapicker/datapicker.component';
import { SelectFilterComponent } from '../../components/select-filter/select-filter.component';
import { option } from '../../models/Option';
import { Action } from 'rxjs/internal/scheduler/Action';
import { SliderComponent } from "../../components/slider/slider.component";
import { TableUsersComponent } from "../../components/table-users/table-users.component";
import { User } from '../../models/User';
import { TableEspacosComponent } from "../../components/table-espacos/table-espacos.component";
import { Ginasio } from '../../models/Ginasio';
import { ScheduleModel } from '../../models/ScheduleModel';
import { AdmService } from '../../services/adm/adm.service';
import { LayoutSchedulesService } from '../../services/layout/layout-schedules.service';
import { Restricao } from '../../models/Restricao';
import { TableRestricaoComponent } from '../../components/table-restricao/table-restricao.component';
import { ScheduleTimeService } from '../../services/schedule/schedule-time.service';
import { GenericModalComponent } from "../../components/generic-modal/generic-modal.component";
import { FormType, ModalConfig } from '../../models/FormType';

@Component({
  selector: 'app-configuration',
  imports: [CommonModule, TableComponent, SelectFilterComponent, SliderComponent, TableUsersComponent, TableEspacosComponent, TableRestricaoComponent, GenericModalComponent],
  templateUrl: './configuration.component.html',
  styleUrl: './configuration.component.css'
})
export class ConfigurationComponent {
  // Modal control
  modalConfig: ModalConfig = {
    type: FormType.CREATE_SCHEDULE,
    title: '',
    isOpen: false
  };

  ShowGeral: boolean = true;
  ShowEspaco: boolean = false;
  ShowPermissao: boolean = false;

  constructor(@Inject(LayoutSchedulesService) private LayoutService: LayoutSchedulesService, @Inject(AdmService) private AdmService: AdmService, @Inject(ScheduleTimeService) private scheduleTimeService: ScheduleTimeService, @Inject(Renderer2) private renderer: Renderer2) {
      this.scheduleTimeService.horarioDisponivelClicadoEmitter.subscribe(() => {
      this.openModal(FormType.CREATE_SCHEDULE, 'Criar Reserva');
    });
  }

  espacos: Ginasio[] = [
  ];

  users: User[] = [
  ];

  reserva: ScheduleModel[] = [
  ];

  restricao : Restricao[] = [
  ];

  filteredReserva: ScheduleModel[] = [];
  selectedCampus: string = '';
  selectedLabel: string = '';
  
  dropdownOptionsGinasios: Array<option> = [

  ];

    dropdownOptionsTypeUsers: Array<option> = [
    { id: 'todos', value: '', label: 'Todos' },
    { id: 'admin', value: 'Administrador', label: 'Administrador' },
    { id: 'estudante', value: 'Estudante', label: 'Estudante' },
    { id: 'professor', value: 'Professor', label: 'Professor' },
  ];
  
  ngOnInit(): void {
    this.AdmService.getAllSchedules().subscribe({
      next: (data: ScheduleModel[]) => {
        console.log('Agendamentos carregados:', data);
        this.reserva = data;  
        this.filteredReserva = this.reserva;
      },
      error: (error: any) => {
        console.error('Erro ao carregar agendamentos:', error);
      }
    });
    this.AdmService.getAllRestrictions().subscribe({
      next: (data: Restricao[]) => {
        console.log('Restrições carregadas:', data);
        this.restricao = data;
      },
      error: (error: any) => {
        console.error('Erro ao carregar restrições:', error);
      }
    });
    this.AdmService.getAllUsers().subscribe({
      next: (data: User[]) => {
        console.log('Usuários carregados:', data);
        this.users = data;
      },
      error: (error: any) => {
        console.error('Erro ao carregar usuários:', error);
      }
    });
    this.loadGinasios(); 
    this.setupDropdownOptions();
    this.filterTable();
    
    // ✅ Observar mudanças nos ginásios para atualização automática
    this.LayoutService.ginasios$.subscribe(ginasios => {
      this.espacos = ginasios;
      this.setupDropdownOptions();
      console.log('Ginásios atualizados via Observable:', ginasios);
    });
  }

  onDisponivelClick() {
      this.openModal(FormType.CREATE_SCHEDULE, 'Criar Reserva');
    }


    private loadGinasios(): void {
    // ✅ Força o LayoutService a recarregar os ginásios da API
    this.LayoutService.reloadGinasios();
    // ✅ A atualização acontece automaticamente via Observable no ngOnInit
  }


  private setupDropdownOptions(): void {
    this.dropdownOptionsGinasios = this.espacos.map(ginasio => ({
      id: ginasio.nome,
      value: ginasio.nome,
      label: `${ginasio.nome} (${ginasio.campus})`
    }));
  }

  
  onOptionSelected(option: { value: string; label: string }): void {
    this.selectedCampus = option.value;
    this.selectedLabel = option.label;
    this.filterTable();
  }
  
  filterTable(): void {
    if (this.selectedCampus) {
      this.filteredReserva = this.reserva.filter(row => row.ginasio === this.selectedCampus);
    } else {
      this.filteredReserva = this.reserva;
    }
  }

  onTabSelect(active: string): void {
    switch (active) {
      case 'ShowPermissao':
        this.ShowGeral = false;
        this.ShowEspaco = false;
        this.ShowPermissao = true;
        break;
      case 'ShowEspaco':
        this.ShowGeral = false;
        this.ShowEspaco = true;
        this.ShowPermissao = false;
        break;
      default:
        this.ShowGeral = true;
        this.ShowEspaco = false;
        this.ShowPermissao = false;
        break;
    }
  }

  // Generic modal methods
  openModal(type: FormType, title: string): void {
    this.modalConfig = {
      type,
      title,
      isOpen: true
    };
  }

  closeModal(): void {
    this.modalConfig.isOpen = false;
  }

  onFormSubmit(success: boolean): void {
    if (success) {
      this.closeModal();
      
      // Refresh data based on form type
      switch (this.modalConfig.type) {
        case FormType.CREATE_SCHEDULE:
        case FormType.DELETE_SCHEDULE:
          this.refreshSchedules();
          break;
        case FormType.CREATE_GINASIO:
        case FormType.DELETE_GINASIO:
          this.loadGinasios();
          break;
        case FormType.CREATE_RESTRICAO:
        case FormType.DELETE_RESTRICAO:
          this.refreshRestrictions();
          break;
        case FormType.CREATE_ADMINISTRATOR:
          this.refreshAdministrators();
      }
    }
  }

  private refreshAdministrators(): void {
    this.AdmService.getAllUsers().subscribe({
      next: (data: User[]) => {
        console.log('Administradores carregados:', data);
        this.users = data;
      },
      error: (error: any) => {
        console.error('Erro ao carregar administradores:', error);
      }
    });
  }

  // Helper methods for data refresh
  private refreshSchedules(): void {
    this.AdmService.getAllSchedules().subscribe({
      next: (data: ScheduleModel[]) => {
        console.log('Agendamentos carregados:', data);
        this.reserva = data;  
        this.filteredReserva = this.reserva;
        this.filterTable();
      },
      error: (error: any) => {
        console.error('Erro ao carregar agendamentos:', error);
      }
    });
  }

  private refreshRestrictions(): void {
    this.AdmService.getAllRestrictions().subscribe({
      next: (data: Restricao[]) => {
        console.log('Restrições carregadas:', data);
        this.restricao = data;
      },
      error: (error: any) => {
        console.error('Erro ao carregar restrições:', error);
      }
    });
  }

  // Button click handlers
  onCriarReservaClick(): void {
    this.openModal(FormType.CREATE_SCHEDULE, 'Criar Reserva');
  }

  onCancelarAgendamentoClick(): void {
    this.openModal(FormType.DELETE_SCHEDULE, 'Cancelar Agendamento');
  }

  onCriarGinasioClick(): void {
    this.openModal(FormType.CREATE_GINASIO, 'Criar Ginásio');
  }

  onApagarGinasioClick(): void {
    this.openModal(FormType.DELETE_GINASIO, 'Apagar Ginásio');
  }

  onCriarRestricaoClick(): void {
    this.openModal(FormType.CREATE_RESTRICAO, 'Criar Restrição');
  }

  onApagarRestricaoClick(): void {
    this.openModal(FormType.DELETE_RESTRICAO, 'Apagar Restrição');
  }

  onCriarAdministradorClick() {
    this.openModal(FormType.CREATE_ADMINISTRATOR, 'Criar Administrador');
  }
}
</file>

</files>
